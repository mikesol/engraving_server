// combine with other file...
purcell.sql_socket = {};
purcell.make_websocket = function(out) {
  purcell.$0cket = purcell.sql_socket;
  purcell.$0cket.db = new window.SQL.Database();
  purcell.$0cket.db.run(purcell.$0cket.PROGRAM);
  purcell.$0cket.send = function(json) {
    var data = JSON.parse(json);
    var sql = data.sql;
    var out = {}
    if (data.subsequent != null) {
      out.subsequent = data.subsequent;
    }
    if (sql != null) {
      for (var i = 0; i < sql.length; i++) {
        // we only take the first statement
        var evaluated_sql = purcell.$0cket.db.exec(sql[i]['sql']);
        if (evaluated_sql.length > 0) {
          evaluated_sql = evaluated_sql[0];
          var ret = [];
          for (var j = 0; j < evaluated_sql.values.length; j++) {
            ret.push({});
            for (var k = 0; k < evaluated_sql.values[j].length; k++) {
              ret[j][evaluated_sql.columns[k]] = evaluated_sql.values[j][k];
            }
          }
          var name = sql[i]['name'] ? sql[i]['name'] : 'anonymous';
          out[name] = ret;
        }
      }
    }
    evt = {}
    evt.data = JSON.stringify(out);
    purcell.$0cket.onmessage(evt);
  }
  purcell.$0cket.onmessage = function(evt) {
    json = eval("("+evt.data+")")
    var subsequent = json.subsequent;
    if (subsequent) {
      eval(subsequent+"("+evt.data+")");
    }
    purcell.CURRENT_DATA = evt.data;
  }
  out = {
         client:purcell.MY_NAME,
         initializing:true,
         sql:out,
         'return': 'just_me',
        };
  purcell.$0cket.send(JSON.stringify(out));
  out = [];
  purcell.append_standard_graphical_queries(out);
  out = {
         client:purcell.MY_NAME,
         sql:out,
         'return': 'everyone',
         subsequent:"purcell.draw"
        };
  purcell.$0cket.send(JSON.stringify(out));
}
purcell.sql_socket.PROGRAM = ' CREATE TABLE rhythmic_event_to_dot_padding ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE key_signature_inter_accidental_padding ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE dynamic ( 	id INTEGER NOT NULL,  	val VARCHAR,  	PRIMARY KEY (id) )  ; CREATE TABLE global_onset ( 	id INTEGER NOT NULL,  	num INTEGER,  	den INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE rhythmic_head_height ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE used_ids ( 	id INTEGER NOT NULL,  	PRIMARY KEY (id) )  ; CREATE TABLE anchored_x_position ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE stem_direction ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE line_stencil ( 	id INTEGER NOT NULL,  	writer VARCHAR NOT NULL,  	sub_id INTEGER NOT NULL,  	x0 FLOAT,  	y0 FLOAT,  	x1 FLOAT,  	y1 FLOAT,  	thickness FLOAT,  	PRIMARY KEY (id, writer, sub_id) )  ; CREATE TABLE octave ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE height ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE left_tuplet_bound ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE score ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE local_onset ( 	id INTEGER NOT NULL,  	num INTEGER,  	den INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE dots ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE duration ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE line_thickness ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE left_width ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE ledger_line ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE stem_end ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE time_signature_inter_number_padding ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE natural_stem_end ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE rhythmic_event_to_accidental_padding ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE horstemps_next ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE beam ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE dot_padding ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE string_stencil ( 	id INTEGER NOT NULL,  	writer VARCHAR NOT NULL,  	sub_id INTEGER NOT NULL,  	font_name VARCHAR,  	font_size FLOAT,  	str VARCHAR,  	x FLOAT,  	y FLOAT,  	PRIMARY KEY (id, writer, sub_id) )  ; CREATE TABLE graphical_next ( 	id INTEGER NOT NULL,  	prev INTEGER,  	next INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE key_signature ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE right_tuplet_bound ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE glyph_stencil ( 	id INTEGER NOT NULL,  	writer VARCHAR NOT NULL,  	sub_id INTEGER NOT NULL,  	font_name VARCHAR,  	font_size FLOAT,  	unicode VARCHAR,  	x FLOAT,  	y FLOAT,  	PRIMARY KEY (id, writer, sub_id) )  ; CREATE TABLE string_box ( 	name VARCHAR NOT NULL,  	str INTEGER NOT NULL,  	x INTEGER,  	y INTEGER,  	width INTEGER,  	height INTEGER,  	PRIMARY KEY (name, str) )  ; CREATE TABLE time_next ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE tuplet_fraction ( 	id INTEGER NOT NULL,  	num INTEGER,  	den INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE polygon_stencil ( 	id INTEGER NOT NULL,  	writer VARCHAR NOT NULL,  	sub_id INTEGER NOT NULL,  	point INTEGER NOT NULL,  	x FLOAT,  	y FLOAT,  	thickness FLOAT,  	fill INTEGER,  	stroke INTEGER,  	PRIMARY KEY (id, writer, sub_id, point) )  ; CREATE TABLE unicode ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE staff ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE width ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE rhythmic_head_width ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE dynamic_staff_position ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE accidental_width ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE anchor_y ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE staff_position ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE space_prev ( 	id INTEGER NOT NULL,  	prev INTEGER,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE anchored_y_position ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE horstemps_anchor ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE beam_y_position ( 	id INTEGER NOT NULL,  	"left" FLOAT,  	"right" FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE natural_stem_direction ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE note_box ( 	id INTEGER NOT NULL,  	x FLOAT,  	y FLOAT,  	width FLOAT,  	height FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE unicode_to_glyph_index_map ( 	name VARCHAR NOT NULL,  	idx INTEGER NOT NULL,  	unicode VARCHAR,  	PRIMARY KEY (name, idx) )  ; CREATE TABLE alignment_directive ( 	id INTEGER NOT NULL,  	x FLOAT,  	y FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE chord ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE anchor_x ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE pitch ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE beam_x_position ( 	id INTEGER NOT NULL,  	"left" FLOAT,  	"right" FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE accidental ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE dynamic_padding ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE dot_width ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE voice ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE onset_referent ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE stem_length ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE onset_anchor ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE dynamic_direction ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE log_table ( 	id INTEGER NOT NULL,  	mom FLOAT,  	msg VARCHAR,  	PRIMARY KEY (id) )  ; CREATE TABLE glyph_box ( 	name VARCHAR NOT NULL,  	unicode VARCHAR NOT NULL,  	x INTEGER,  	y INTEGER,  	width INTEGER,  	height INTEGER,  	PRIMARY KEY (name, unicode) )  ; CREATE TABLE staff_space ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE stem_x_offset ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE x_position ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE staff_symbol ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE bar_thickness ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE time_signature ( 	id INTEGER NOT NULL,  	num INTEGER,  	den INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE font_size ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE name ( 	id INTEGER NOT NULL,  	val VARCHAR(50),  	PRIMARY KEY (id) )  ; CREATE TABLE tuplet_factor ( 	id INTEGER NOT NULL,  	num INTEGER,  	den INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE font_name ( 	id INTEGER NOT NULL,  	val VARCHAR,  	PRIMARY KEY (id) )  ; CREATE TABLE n_lines ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE right_width ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ; CREATE TABLE duration_log ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE anchor ( 	id INTEGER NOT NULL,  	val INTEGER,  	PRIMARY KEY (id) )  ; CREATE TABLE y_position ( 	id INTEGER NOT NULL,  	val FLOAT,  	PRIMARY KEY (id) )  ;CREATE TRIGGER dots_insert_del_duration_ins_duration_LpnN AFTER INSERT ON dots WHEN (EXISTS (SELECT duration_log.id  FROM duration_log))       BEGIN                      DELETE FROM duration WHERE duration.id = new.id;           INSERT INTO duration (id, val) WITH RECURSIVE dot_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, CASE WHEN (dots.val IS NOT NULL) THEN dots.val ELSE 0 END AS val  FROM duration_log LEFT OUTER JOIN dots ON duration_log.id = dots.id  WHERE duration_log.id = new.id UNION ALL SELECT dot_power_prev.id AS id, dot_power_prev.counter + 1 AS counter, dot_power_prev.times_two * 2 AS times_two, dot_power_prev.val AS val  FROM dot_power AS dot_power_prev  WHERE dot_power_prev.counter < dot_power_prev.val),  duration_log_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, abs(duration_log.val) AS val  FROM duration_log  WHERE duration_log.id = new.id UNION ALL SELECT duration_log_power_prev.id AS id, duration_log_power_prev.counter + 1 AS counter, duration_log_power_prev.times_two * 2 AS times_two, duration_log_power_prev.val AS val  FROM duration_log_power AS duration_log_power_prev  WHERE duration_log_power_prev.counter < duration_log_power_prev.val),  dot_power_max AS  (SELECT max(dot_power.counter) AS counter  FROM dot_power),  duration_log_power_max AS  (SELECT max(duration_log_power.counter) AS counter  FROM duration_log_power),  rhythmic_events_to_durations AS  (SELECT duration_log.id AS id, (1.0 * coalesce(tuplet_factor.num, 1) * (2 * dot_power.times_two - 1) * CASE WHEN (duration_log.val > 0) THEN duration_log_power.times_two ELSE 1 END) / (coalesce(tuplet_factor.den, 1) * dot_power.times_two * CASE WHEN (duration_log.val < 0) THEN duration_log_power.times_two ELSE 1 END) AS anon_1  FROM dot_power, duration_log_power, dot_power_max, duration_log_power_max, duration_log LEFT OUTER JOIN tuplet_factor ON duration_log.id = tuplet_factor.id  WHERE duration_log.id = new.id AND dot_power.counter = dot_power_max.counter AND duration_log_power.counter = duration_log_power_max.counter)  SELECT rhythmic_events_to_durations.id, rhythmic_events_to_durations.anon_1  FROM rhythmic_events_to_durations;       END;     CREATE TRIGGER dots_update_del_duration_ins_duration_ZKSs AFTER UPDATE ON dots WHEN (EXISTS (SELECT duration_log.id  FROM duration_log))       BEGIN                      DELETE FROM duration WHERE duration.id = new.id;           INSERT INTO duration (id, val) WITH RECURSIVE dot_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, CASE WHEN (dots.val IS NOT NULL) THEN dots.val ELSE 0 END AS val  FROM duration_log LEFT OUTER JOIN dots ON duration_log.id = dots.id  WHERE duration_log.id = new.id UNION ALL SELECT dot_power_prev.id AS id, dot_power_prev.counter + 1 AS counter, dot_power_prev.times_two * 2 AS times_two, dot_power_prev.val AS val  FROM dot_power AS dot_power_prev  WHERE dot_power_prev.counter < dot_power_prev.val),  duration_log_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, abs(duration_log.val) AS val  FROM duration_log  WHERE duration_log.id = new.id UNION ALL SELECT duration_log_power_prev.id AS id, duration_log_power_prev.counter + 1 AS counter, duration_log_power_prev.times_two * 2 AS times_two, duration_log_power_prev.val AS val  FROM duration_log_power AS duration_log_power_prev  WHERE duration_log_power_prev.counter < duration_log_power_prev.val),  dot_power_max AS  (SELECT max(dot_power.counter) AS counter  FROM dot_power),  duration_log_power_max AS  (SELECT max(duration_log_power.counter) AS counter  FROM duration_log_power),  rhythmic_events_to_durations AS  (SELECT duration_log.id AS id, (1.0 * coalesce(tuplet_factor.num, 1) * (2 * dot_power.times_two - 1) * CASE WHEN (duration_log.val > 0) THEN duration_log_power.times_two ELSE 1 END) / (coalesce(tuplet_factor.den, 1) * dot_power.times_two * CASE WHEN (duration_log.val < 0) THEN duration_log_power.times_two ELSE 1 END) AS anon_1  FROM dot_power, duration_log_power, dot_power_max, duration_log_power_max, duration_log LEFT OUTER JOIN tuplet_factor ON duration_log.id = tuplet_factor.id  WHERE duration_log.id = new.id AND dot_power.counter = dot_power_max.counter AND duration_log_power.counter = duration_log_power_max.counter)  SELECT rhythmic_events_to_durations.id, rhythmic_events_to_durations.anon_1  FROM rhythmic_events_to_durations;       END;     CREATE TRIGGER dots_delete_del_duration_ins_duration_BXhI AFTER DELETE ON dots WHEN (EXISTS (SELECT duration_log.id  FROM duration_log))       BEGIN                      DELETE FROM duration WHERE duration.id = old.id;           INSERT INTO duration (id, val) WITH RECURSIVE dot_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, CASE WHEN (dots.val IS NOT NULL) THEN dots.val ELSE 0 END AS val  FROM duration_log LEFT OUTER JOIN dots ON duration_log.id = dots.id  WHERE duration_log.id = old.id UNION ALL SELECT dot_power_prev.id AS id, dot_power_prev.counter + 1 AS counter, dot_power_prev.times_two * 2 AS times_two, dot_power_prev.val AS val  FROM dot_power AS dot_power_prev  WHERE dot_power_prev.counter < dot_power_prev.val),  duration_log_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, abs(duration_log.val) AS val  FROM duration_log  WHERE duration_log.id = old.id UNION ALL SELECT duration_log_power_prev.id AS id, duration_log_power_prev.counter + 1 AS counter, duration_log_power_prev.times_two * 2 AS times_two, duration_log_power_prev.val AS val  FROM duration_log_power AS duration_log_power_prev  WHERE duration_log_power_prev.counter < duration_log_power_prev.val),  dot_power_max AS  (SELECT max(dot_power.counter) AS counter  FROM dot_power),  duration_log_power_max AS  (SELECT max(duration_log_power.counter) AS counter  FROM duration_log_power),  rhythmic_events_to_durations AS  (SELECT duration_log.id AS id, (1.0 * coalesce(tuplet_factor.num, 1) * (2 * dot_power.times_two - 1) * CASE WHEN (duration_log.val > 0) THEN duration_log_power.times_two ELSE 1 END) / (coalesce(tuplet_factor.den, 1) * dot_power.times_two * CASE WHEN (duration_log.val < 0) THEN duration_log_power.times_two ELSE 1 END) AS anon_1  FROM dot_power, duration_log_power, dot_power_max, duration_log_power_max, duration_log LEFT OUTER JOIN tuplet_factor ON duration_log.id = tuplet_factor.id  WHERE duration_log.id = old.id AND dot_power.counter = dot_power_max.counter AND duration_log_power.counter = duration_log_power_max.counter)  SELECT rhythmic_events_to_durations.id, rhythmic_events_to_durations.anon_1  FROM rhythmic_events_to_durations;       END;     CREATE TRIGGER duration_log_insert_del_duration_ins_duration_PjoX AFTER INSERT ON duration_log WHEN (EXISTS (SELECT duration_log.id  FROM duration_log))       BEGIN                      DELETE FROM duration WHERE duration.id = new.id;           INSERT INTO duration (id, val) WITH RECURSIVE dot_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, CASE WHEN (dots.val IS NOT NULL) THEN dots.val ELSE 0 END AS val  FROM duration_log LEFT OUTER JOIN dots ON duration_log.id = dots.id  WHERE duration_log.id = new.id UNION ALL SELECT dot_power_prev.id AS id, dot_power_prev.counter + 1 AS counter, dot_power_prev.times_two * 2 AS times_two, dot_power_prev.val AS val  FROM dot_power AS dot_power_prev  WHERE dot_power_prev.counter < dot_power_prev.val),  duration_log_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, abs(duration_log.val) AS val  FROM duration_log  WHERE duration_log.id = new.id UNION ALL SELECT duration_log_power_prev.id AS id, duration_log_power_prev.counter + 1 AS counter, duration_log_power_prev.times_two * 2 AS times_two, duration_log_power_prev.val AS val  FROM duration_log_power AS duration_log_power_prev  WHERE duration_log_power_prev.counter < duration_log_power_prev.val),  dot_power_max AS  (SELECT max(dot_power.counter) AS counter  FROM dot_power),  duration_log_power_max AS  (SELECT max(duration_log_power.counter) AS counter  FROM duration_log_power),  rhythmic_events_to_durations AS  (SELECT duration_log.id AS id, (1.0 * coalesce(tuplet_factor.num, 1) * (2 * dot_power.times_two - 1) * CASE WHEN (duration_log.val > 0) THEN duration_log_power.times_two ELSE 1 END) / (coalesce(tuplet_factor.den, 1) * dot_power.times_two * CASE WHEN (duration_log.val < 0) THEN duration_log_power.times_two ELSE 1 END) AS anon_1  FROM dot_power, duration_log_power, dot_power_max, duration_log_power_max, duration_log LEFT OUTER JOIN tuplet_factor ON duration_log.id = tuplet_factor.id  WHERE duration_log.id = new.id AND dot_power.counter = dot_power_max.counter AND duration_log_power.counter = duration_log_power_max.counter)  SELECT rhythmic_events_to_durations.id, rhythmic_events_to_durations.anon_1  FROM rhythmic_events_to_durations;       END;     CREATE TRIGGER duration_log_update_del_duration_ins_duration_UOEp AFTER UPDATE ON duration_log WHEN (EXISTS (SELECT duration_log.id  FROM duration_log))       BEGIN                      DELETE FROM duration WHERE duration.id = new.id;           INSERT INTO duration (id, val) WITH RECURSIVE dot_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, CASE WHEN (dots.val IS NOT NULL) THEN dots.val ELSE 0 END AS val  FROM duration_log LEFT OUTER JOIN dots ON duration_log.id = dots.id  WHERE duration_log.id = new.id UNION ALL SELECT dot_power_prev.id AS id, dot_power_prev.counter + 1 AS counter, dot_power_prev.times_two * 2 AS times_two, dot_power_prev.val AS val  FROM dot_power AS dot_power_prev  WHERE dot_power_prev.counter < dot_power_prev.val),  duration_log_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, abs(duration_log.val) AS val  FROM duration_log  WHERE duration_log.id = new.id UNION ALL SELECT duration_log_power_prev.id AS id, duration_log_power_prev.counter + 1 AS counter, duration_log_power_prev.times_two * 2 AS times_two, duration_log_power_prev.val AS val  FROM duration_log_power AS duration_log_power_prev  WHERE duration_log_power_prev.counter < duration_log_power_prev.val),  dot_power_max AS  (SELECT max(dot_power.counter) AS counter  FROM dot_power),  duration_log_power_max AS  (SELECT max(duration_log_power.counter) AS counter  FROM duration_log_power),  rhythmic_events_to_durations AS  (SELECT duration_log.id AS id, (1.0 * coalesce(tuplet_factor.num, 1) * (2 * dot_power.times_two - 1) * CASE WHEN (duration_log.val > 0) THEN duration_log_power.times_two ELSE 1 END) / (coalesce(tuplet_factor.den, 1) * dot_power.times_two * CASE WHEN (duration_log.val < 0) THEN duration_log_power.times_two ELSE 1 END) AS anon_1  FROM dot_power, duration_log_power, dot_power_max, duration_log_power_max, duration_log LEFT OUTER JOIN tuplet_factor ON duration_log.id = tuplet_factor.id  WHERE duration_log.id = new.id AND dot_power.counter = dot_power_max.counter AND duration_log_power.counter = duration_log_power_max.counter)  SELECT rhythmic_events_to_durations.id, rhythmic_events_to_durations.anon_1  FROM rhythmic_events_to_durations;       END;     CREATE TRIGGER duration_log_delete_del_duration_ins_duration_QzVX AFTER DELETE ON duration_log WHEN (EXISTS (SELECT duration_log.id  FROM duration_log))       BEGIN                      DELETE FROM duration WHERE duration.id = old.id;           INSERT INTO duration (id, val) WITH RECURSIVE dot_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, CASE WHEN (dots.val IS NOT NULL) THEN dots.val ELSE 0 END AS val  FROM duration_log LEFT OUTER JOIN dots ON duration_log.id = dots.id  WHERE duration_log.id = old.id UNION ALL SELECT dot_power_prev.id AS id, dot_power_prev.counter + 1 AS counter, dot_power_prev.times_two * 2 AS times_two, dot_power_prev.val AS val  FROM dot_power AS dot_power_prev  WHERE dot_power_prev.counter < dot_power_prev.val),  duration_log_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, abs(duration_log.val) AS val  FROM duration_log  WHERE duration_log.id = old.id UNION ALL SELECT duration_log_power_prev.id AS id, duration_log_power_prev.counter + 1 AS counter, duration_log_power_prev.times_two * 2 AS times_two, duration_log_power_prev.val AS val  FROM duration_log_power AS duration_log_power_prev  WHERE duration_log_power_prev.counter < duration_log_power_prev.val),  dot_power_max AS  (SELECT max(dot_power.counter) AS counter  FROM dot_power),  duration_log_power_max AS  (SELECT max(duration_log_power.counter) AS counter  FROM duration_log_power),  rhythmic_events_to_durations AS  (SELECT duration_log.id AS id, (1.0 * coalesce(tuplet_factor.num, 1) * (2 * dot_power.times_two - 1) * CASE WHEN (duration_log.val > 0) THEN duration_log_power.times_two ELSE 1 END) / (coalesce(tuplet_factor.den, 1) * dot_power.times_two * CASE WHEN (duration_log.val < 0) THEN duration_log_power.times_two ELSE 1 END) AS anon_1  FROM dot_power, duration_log_power, dot_power_max, duration_log_power_max, duration_log LEFT OUTER JOIN tuplet_factor ON duration_log.id = tuplet_factor.id  WHERE duration_log.id = old.id AND dot_power.counter = dot_power_max.counter AND duration_log_power.counter = duration_log_power_max.counter)  SELECT rhythmic_events_to_durations.id, rhythmic_events_to_durations.anon_1  FROM rhythmic_events_to_durations;       END;     CREATE TRIGGER tuplet_factor_insert_del_duration_ins_duration_ZeOQ AFTER INSERT ON tuplet_factor WHEN (EXISTS (SELECT duration_log.id  FROM duration_log))       BEGIN                      DELETE FROM duration WHERE duration.id = new.id;           INSERT INTO duration (id, val) WITH RECURSIVE dot_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, CASE WHEN (dots.val IS NOT NULL) THEN dots.val ELSE 0 END AS val  FROM duration_log LEFT OUTER JOIN dots ON duration_log.id = dots.id  WHERE duration_log.id = new.id UNION ALL SELECT dot_power_prev.id AS id, dot_power_prev.counter + 1 AS counter, dot_power_prev.times_two * 2 AS times_two, dot_power_prev.val AS val  FROM dot_power AS dot_power_prev  WHERE dot_power_prev.counter < dot_power_prev.val),  duration_log_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, abs(duration_log.val) AS val  FROM duration_log  WHERE duration_log.id = new.id UNION ALL SELECT duration_log_power_prev.id AS id, duration_log_power_prev.counter + 1 AS counter, duration_log_power_prev.times_two * 2 AS times_two, duration_log_power_prev.val AS val  FROM duration_log_power AS duration_log_power_prev  WHERE duration_log_power_prev.counter < duration_log_power_prev.val),  dot_power_max AS  (SELECT max(dot_power.counter) AS counter  FROM dot_power),  duration_log_power_max AS  (SELECT max(duration_log_power.counter) AS counter  FROM duration_log_power),  rhythmic_events_to_durations AS  (SELECT duration_log.id AS id, (1.0 * coalesce(tuplet_factor.num, 1) * (2 * dot_power.times_two - 1) * CASE WHEN (duration_log.val > 0) THEN duration_log_power.times_two ELSE 1 END) / (coalesce(tuplet_factor.den, 1) * dot_power.times_two * CASE WHEN (duration_log.val < 0) THEN duration_log_power.times_two ELSE 1 END) AS anon_1  FROM dot_power, duration_log_power, dot_power_max, duration_log_power_max, duration_log LEFT OUTER JOIN tuplet_factor ON duration_log.id = tuplet_factor.id  WHERE duration_log.id = new.id AND dot_power.counter = dot_power_max.counter AND duration_log_power.counter = duration_log_power_max.counter)  SELECT rhythmic_events_to_durations.id, rhythmic_events_to_durations.anon_1  FROM rhythmic_events_to_durations;       END;     CREATE TRIGGER tuplet_factor_update_del_duration_ins_duration_LwkR AFTER UPDATE ON tuplet_factor WHEN (EXISTS (SELECT duration_log.id  FROM duration_log))       BEGIN                      DELETE FROM duration WHERE duration.id = new.id;           INSERT INTO duration (id, val) WITH RECURSIVE dot_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, CASE WHEN (dots.val IS NOT NULL) THEN dots.val ELSE 0 END AS val  FROM duration_log LEFT OUTER JOIN dots ON duration_log.id = dots.id  WHERE duration_log.id = new.id UNION ALL SELECT dot_power_prev.id AS id, dot_power_prev.counter + 1 AS counter, dot_power_prev.times_two * 2 AS times_two, dot_power_prev.val AS val  FROM dot_power AS dot_power_prev  WHERE dot_power_prev.counter < dot_power_prev.val),  duration_log_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, abs(duration_log.val) AS val  FROM duration_log  WHERE duration_log.id = new.id UNION ALL SELECT duration_log_power_prev.id AS id, duration_log_power_prev.counter + 1 AS counter, duration_log_power_prev.times_two * 2 AS times_two, duration_log_power_prev.val AS val  FROM duration_log_power AS duration_log_power_prev  WHERE duration_log_power_prev.counter < duration_log_power_prev.val),  dot_power_max AS  (SELECT max(dot_power.counter) AS counter  FROM dot_power),  duration_log_power_max AS  (SELECT max(duration_log_power.counter) AS counter  FROM duration_log_power),  rhythmic_events_to_durations AS  (SELECT duration_log.id AS id, (1.0 * coalesce(tuplet_factor.num, 1) * (2 * dot_power.times_two - 1) * CASE WHEN (duration_log.val > 0) THEN duration_log_power.times_two ELSE 1 END) / (coalesce(tuplet_factor.den, 1) * dot_power.times_two * CASE WHEN (duration_log.val < 0) THEN duration_log_power.times_two ELSE 1 END) AS anon_1  FROM dot_power, duration_log_power, dot_power_max, duration_log_power_max, duration_log LEFT OUTER JOIN tuplet_factor ON duration_log.id = tuplet_factor.id  WHERE duration_log.id = new.id AND dot_power.counter = dot_power_max.counter AND duration_log_power.counter = duration_log_power_max.counter)  SELECT rhythmic_events_to_durations.id, rhythmic_events_to_durations.anon_1  FROM rhythmic_events_to_durations;       END;     CREATE TRIGGER tuplet_factor_delete_del_duration_ins_duration_WUNg AFTER DELETE ON tuplet_factor WHEN (EXISTS (SELECT duration_log.id  FROM duration_log))       BEGIN                      DELETE FROM duration WHERE duration.id = old.id;           INSERT INTO duration (id, val) WITH RECURSIVE dot_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, CASE WHEN (dots.val IS NOT NULL) THEN dots.val ELSE 0 END AS val  FROM duration_log LEFT OUTER JOIN dots ON duration_log.id = dots.id  WHERE duration_log.id = old.id UNION ALL SELECT dot_power_prev.id AS id, dot_power_prev.counter + 1 AS counter, dot_power_prev.times_two * 2 AS times_two, dot_power_prev.val AS val  FROM dot_power AS dot_power_prev  WHERE dot_power_prev.counter < dot_power_prev.val),  duration_log_power(id, counter, times_two, val) AS  (SELECT duration_log.id AS id, 0 AS counter, 1 AS times_two, abs(duration_log.val) AS val  FROM duration_log  WHERE duration_log.id = old.id UNION ALL SELECT duration_log_power_prev.id AS id, duration_log_power_prev.counter + 1 AS counter, duration_log_power_prev.times_two * 2 AS times_two, duration_log_power_prev.val AS val  FROM duration_log_power AS duration_log_power_prev  WHERE duration_log_power_prev.counter < duration_log_power_prev.val),  dot_power_max AS  (SELECT max(dot_power.counter) AS counter  FROM dot_power),  duration_log_power_max AS  (SELECT max(duration_log_power.counter) AS counter  FROM duration_log_power),  rhythmic_events_to_durations AS  (SELECT duration_log.id AS id, (1.0 * coalesce(tuplet_factor.num, 1) * (2 * dot_power.times_two - 1) * CASE WHEN (duration_log.val > 0) THEN duration_log_power.times_two ELSE 1 END) / (coalesce(tuplet_factor.den, 1) * dot_power.times_two * CASE WHEN (duration_log.val < 0) THEN duration_log_power.times_two ELSE 1 END) AS anon_1  FROM dot_power, duration_log_power, dot_power_max, duration_log_power_max, duration_log LEFT OUTER JOIN tuplet_factor ON duration_log.id = tuplet_factor.id  WHERE duration_log.id = old.id AND dot_power.counter = dot_power_max.counter AND duration_log_power.counter = duration_log_power_max.counter)  SELECT rhythmic_events_to_durations.id, rhythmic_events_to_durations.anon_1  FROM rhythmic_events_to_durations;       END;     CREATE TRIGGER font_name_insert_del_width_ins_width_YUjh AFTER INSERT ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN name ON font_name.id = name.id JOIN key_signature ON font_name.id = key_signature.id))       BEGIN                      DELETE FROM width WHERE width.id = new.id;           INSERT INTO width (id, val) WITH key_signatures_to_widths AS  (SELECT name.id AS id, ((glyph_box.width * abs(key_signature.val) + CASE WHEN (abs(key_signature.val) > 0) THEN (abs(key_signature.val) - 1) * CASE WHEN (key_signature_inter_accidental_padding.val IS NOT NULL) THEN key_signature_inter_accidental_padding.val ELSE key_signature_inter_accidental_padding_default.val END ELSE 0.0 END) * font_size.val) / 20.0 AS val  FROM glyph_box, key_signature, key_signature_inter_accidental_padding AS key_signature_inter_accidental_padding_default, font_size, font_name, name LEFT OUTER JOIN key_signature_inter_accidental_padding ON name.id = key_signature_inter_accidental_padding.id  WHERE name.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND font_name.val = glyph_box.name AND key_signature_inter_accidental_padding_default.id = -1 AND CASE WHEN (key_signature.val > 0) THEN glyph_box.unicode = \'U+E262\' ELSE glyph_box.unicode = \'U+E260\' END = 1)  SELECT key_signatures_to_widths.id, key_signatures_to_widths.val  FROM key_signatures_to_widths;       END;     CREATE TRIGGER key_signature_insert_del_width_ins_width_Dvmj AFTER INSERT ON key_signature WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN name ON font_name.id = name.id JOIN key_signature ON font_name.id = key_signature.id))       BEGIN                      DELETE FROM width WHERE width.id = new.id;           INSERT INTO width (id, val) WITH key_signatures_to_widths AS  (SELECT name.id AS id, ((glyph_box.width * abs(key_signature.val) + CASE WHEN (abs(key_signature.val) > 0) THEN (abs(key_signature.val) - 1) * CASE WHEN (key_signature_inter_accidental_padding.val IS NOT NULL) THEN key_signature_inter_accidental_padding.val ELSE key_signature_inter_accidental_padding_default.val END ELSE 0.0 END) * font_size.val) / 20.0 AS val  FROM glyph_box, key_signature, key_signature_inter_accidental_padding AS key_signature_inter_accidental_padding_default, font_size, font_name, name LEFT OUTER JOIN key_signature_inter_accidental_padding ON name.id = key_signature_inter_accidental_padding.id  WHERE name.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND font_name.val = glyph_box.name AND key_signature_inter_accidental_padding_default.id = -1 AND CASE WHEN (key_signature.val > 0) THEN glyph_box.unicode = \'U+E262\' ELSE glyph_box.unicode = \'U+E260\' END = 1)  SELECT key_signatures_to_widths.id, key_signatures_to_widths.val  FROM key_signatures_to_widths;       END;     CREATE TRIGGER key_signature_inter_accidental_padding_insert_del_width_ins_width_PaSq AFTER INSERT ON key_signature_inter_accidental_padding WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN name ON font_name.id = name.id JOIN key_signature ON font_name.id = key_signature.id))       BEGIN                      DELETE FROM width WHERE width.id = new.id;           INSERT INTO width (id, val) WITH key_signatures_to_widths AS  (SELECT name.id AS id, ((glyph_box.width * abs(key_signature.val) + CASE WHEN (abs(key_signature.val) > 0) THEN (abs(key_signature.val) - 1) * CASE WHEN (key_signature_inter_accidental_padding.val IS NOT NULL) THEN key_signature_inter_accidental_padding.val ELSE key_signature_inter_accidental_padding_default.val END ELSE 0.0 END) * font_size.val) / 20.0 AS val  FROM glyph_box, key_signature, key_signature_inter_accidental_padding AS key_signature_inter_accidental_padding_default, font_size, font_name, name LEFT OUTER JOIN key_signature_inter_accidental_padding ON name.id = key_signature_inter_accidental_padding.id  WHERE name.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND font_name.val = glyph_box.name AND key_signature_inter_accidental_padding_default.id = -1 AND CASE WHEN (key_signature.val > 0) THEN glyph_box.unicode = \'U+E262\' ELSE glyph_box.unicode = \'U+E260\' END = 1)  SELECT key_signatures_to_widths.id, key_signatures_to_widths.val  FROM key_signatures_to_widths;       END;     CREATE TRIGGER name_insert_del_width_ins_width_ObTm AFTER INSERT ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN name ON font_name.id = name.id JOIN key_signature ON font_name.id = key_signature.id))       BEGIN                      DELETE FROM width WHERE width.id = new.id;           INSERT INTO width (id, val) WITH key_signatures_to_widths AS  (SELECT name.id AS id, ((glyph_box.width * abs(key_signature.val) + CASE WHEN (abs(key_signature.val) > 0) THEN (abs(key_signature.val) - 1) * CASE WHEN (key_signature_inter_accidental_padding.val IS NOT NULL) THEN key_signature_inter_accidental_padding.val ELSE key_signature_inter_accidental_padding_default.val END ELSE 0.0 END) * font_size.val) / 20.0 AS val  FROM glyph_box, key_signature, key_signature_inter_accidental_padding AS key_signature_inter_accidental_padding_default, font_size, font_name, name LEFT OUTER JOIN key_signature_inter_accidental_padding ON name.id = key_signature_inter_accidental_padding.id  WHERE name.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND font_name.val = glyph_box.name AND key_signature_inter_accidental_padding_default.id = -1 AND CASE WHEN (key_signature.val > 0) THEN glyph_box.unicode = \'U+E262\' ELSE glyph_box.unicode = \'U+E260\' END = 1)  SELECT key_signatures_to_widths.id, key_signatures_to_widths.val  FROM key_signatures_to_widths;       END;     CREATE TRIGGER font_name_update_del_width_ins_width_XJjD AFTER UPDATE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN name ON font_name.id = name.id JOIN key_signature ON font_name.id = key_signature.id))       BEGIN                      DELETE FROM width WHERE width.id = new.id;           INSERT INTO width (id, val) WITH key_signatures_to_widths AS  (SELECT name.id AS id, ((glyph_box.width * abs(key_signature.val) + CASE WHEN (abs(key_signature.val) > 0) THEN (abs(key_signature.val) - 1) * CASE WHEN (key_signature_inter_accidental_padding.val IS NOT NULL) THEN key_signature_inter_accidental_padding.val ELSE key_signature_inter_accidental_padding_default.val END ELSE 0.0 END) * font_size.val) / 20.0 AS val  FROM glyph_box, key_signature, key_signature_inter_accidental_padding AS key_signature_inter_accidental_padding_default, font_size, font_name, name LEFT OUTER JOIN key_signature_inter_accidental_padding ON name.id = key_signature_inter_accidental_padding.id  WHERE name.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND font_name.val = glyph_box.name AND key_signature_inter_accidental_padding_default.id = -1 AND CASE WHEN (key_signature.val > 0) THEN glyph_box.unicode = \'U+E262\' ELSE glyph_box.unicode = \'U+E260\' END = 1)  SELECT key_signatures_to_widths.id, key_signatures_to_widths.val  FROM key_signatures_to_widths;       END;     CREATE TRIGGER key_signature_update_del_width_ins_width_WkQn AFTER UPDATE ON key_signature WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN name ON font_name.id = name.id JOIN key_signature ON font_name.id = key_signature.id))       BEGIN                      DELETE FROM width WHERE width.id = new.id;           INSERT INTO width (id, val) WITH key_signatures_to_widths AS  (SELECT name.id AS id, ((glyph_box.width * abs(key_signature.val) + CASE WHEN (abs(key_signature.val) > 0) THEN (abs(key_signature.val) - 1) * CASE WHEN (key_signature_inter_accidental_padding.val IS NOT NULL) THEN key_signature_inter_accidental_padding.val ELSE key_signature_inter_accidental_padding_default.val END ELSE 0.0 END) * font_size.val) / 20.0 AS val  FROM glyph_box, key_signature, key_signature_inter_accidental_padding AS key_signature_inter_accidental_padding_default, font_size, font_name, name LEFT OUTER JOIN key_signature_inter_accidental_padding ON name.id = key_signature_inter_accidental_padding.id  WHERE name.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND font_name.val = glyph_box.name AND key_signature_inter_accidental_padding_default.id = -1 AND CASE WHEN (key_signature.val > 0) THEN glyph_box.unicode = \'U+E262\' ELSE glyph_box.unicode = \'U+E260\' END = 1)  SELECT key_signatures_to_widths.id, key_signatures_to_widths.val  FROM key_signatures_to_widths;       END;     CREATE TRIGGER key_signature_inter_accidental_padding_update_del_width_ins_width_STOZ AFTER UPDATE ON key_signature_inter_accidental_padding WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN name ON font_name.id = name.id JOIN key_signature ON font_name.id = key_signature.id))       BEGIN                      DELETE FROM width WHERE width.id = new.id;           INSERT INTO width (id, val) WITH key_signatures_to_widths AS  (SELECT name.id AS id, ((glyph_box.width * abs(key_signature.val) + CASE WHEN (abs(key_signature.val) > 0) THEN (abs(key_signature.val) - 1) * CASE WHEN (key_signature_inter_accidental_padding.val IS NOT NULL) THEN key_signature_inter_accidental_padding.val ELSE key_signature_inter_accidental_padding_default.val END ELSE 0.0 END) * font_size.val) / 20.0 AS val  FROM glyph_box, key_signature, key_signature_inter_accidental_padding AS key_signature_inter_accidental_padding_default, font_size, font_name, name LEFT OUTER JOIN key_signature_inter_accidental_padding ON name.id = key_signature_inter_accidental_padding.id  WHERE name.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND font_name.val = glyph_box.name AND key_signature_inter_accidental_padding_default.id = -1 AND CASE WHEN (key_signature.val > 0) THEN glyph_box.unicode = \'U+E262\' ELSE glyph_box.unicode = \'U+E260\' END = 1)  SELECT key_signatures_to_widths.id, key_signatures_to_widths.val  FROM key_signatures_to_widths;       END;     CREATE TRIGGER name_update_del_width_ins_width_VpKI AFTER UPDATE ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN name ON font_name.id = name.id JOIN key_signature ON font_name.id = key_signature.id))       BEGIN                      DELETE FROM width WHERE width.id = new.id;           INSERT INTO width (id, val) WITH key_signatures_to_widths AS  (SELECT name.id AS id, ((glyph_box.width * abs(key_signature.val) + CASE WHEN (abs(key_signature.val) > 0) THEN (abs(key_signature.val) - 1) * CASE WHEN (key_signature_inter_accidental_padding.val IS NOT NULL) THEN key_signature_inter_accidental_padding.val ELSE key_signature_inter_accidental_padding_default.val END ELSE 0.0 END) * font_size.val) / 20.0 AS val  FROM glyph_box, key_signature, key_signature_inter_accidental_padding AS key_signature_inter_accidental_padding_default, font_size, font_name, name LEFT OUTER JOIN key_signature_inter_accidental_padding ON name.id = key_signature_inter_accidental_padding.id  WHERE name.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND font_name.val = glyph_box.name AND key_signature_inter_accidental_padding_default.id = -1 AND CASE WHEN (key_signature.val > 0) THEN glyph_box.unicode = \'U+E262\' ELSE glyph_box.unicode = \'U+E260\' END = 1)  SELECT key_signatures_to_widths.id, key_signatures_to_widths.val  FROM key_signatures_to_widths;       END;     CREATE TRIGGER font_name_delete_del_width_ins_width_Otkt AFTER DELETE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN name ON font_name.id = name.id JOIN key_signature ON font_name.id = key_signature.id))       BEGIN                      DELETE FROM width WHERE width.id = old.id;           INSERT INTO width (id, val) WITH key_signatures_to_widths AS  (SELECT name.id AS id, ((glyph_box.width * abs(key_signature.val) + CASE WHEN (abs(key_signature.val) > 0) THEN (abs(key_signature.val) - 1) * CASE WHEN (key_signature_inter_accidental_padding.val IS NOT NULL) THEN key_signature_inter_accidental_padding.val ELSE key_signature_inter_accidental_padding_default.val END ELSE 0.0 END) * font_size.val) / 20.0 AS val  FROM glyph_box, key_signature, key_signature_inter_accidental_padding AS key_signature_inter_accidental_padding_default, font_size, font_name, name LEFT OUTER JOIN key_signature_inter_accidental_padding ON name.id = key_signature_inter_accidental_padding.id  WHERE name.id = old.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND font_name.val = glyph_box.name AND key_signature_inter_accidental_padding_default.id = -1 AND CASE WHEN (key_signature.val > 0) THEN glyph_box.unicode = \'U+E262\' ELSE glyph_box.unicode = \'U+E260\' END = 1)  SELECT key_signatures_to_widths.id, key_signatures_to_widths.val  FROM key_signatures_to_widths;       END;     CREATE TRIGGER key_signature_delete_del_width_ins_width_XtuG AFTER DELETE ON key_signature WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN name ON font_name.id = name.id JOIN key_signature ON font_name.id = key_signature.id))       BEGIN                      DELETE FROM width WHERE width.id = old.id;           INSERT INTO width (id, val) WITH key_signatures_to_widths AS  (SELECT name.id AS id, ((glyph_box.width * abs(key_signature.val) + CASE WHEN (abs(key_signature.val) > 0) THEN (abs(key_signature.val) - 1) * CASE WHEN (key_signature_inter_accidental_padding.val IS NOT NULL) THEN key_signature_inter_accidental_padding.val ELSE key_signature_inter_accidental_padding_default.val END ELSE 0.0 END) * font_size.val) / 20.0 AS val  FROM glyph_box, key_signature, key_signature_inter_accidental_padding AS key_signature_inter_accidental_padding_default, font_size, font_name, name LEFT OUTER JOIN key_signature_inter_accidental_padding ON name.id = key_signature_inter_accidental_padding.id  WHERE name.id = old.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND font_name.val = glyph_box.name AND key_signature_inter_accidental_padding_default.id = -1 AND CASE WHEN (key_signature.val > 0) THEN glyph_box.unicode = \'U+E262\' ELSE glyph_box.unicode = \'U+E260\' END = 1)  SELECT key_signatures_to_widths.id, key_signatures_to_widths.val  FROM key_signatures_to_widths;       END;     CREATE TRIGGER key_signature_inter_accidental_padding_delete_del_width_ins_width_MjQM AFTER DELETE ON key_signature_inter_accidental_padding WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN name ON font_name.id = name.id JOIN key_signature ON font_name.id = key_signature.id))       BEGIN                      DELETE FROM width WHERE width.id = old.id;           INSERT INTO width (id, val) WITH key_signatures_to_widths AS  (SELECT name.id AS id, ((glyph_box.width * abs(key_signature.val) + CASE WHEN (abs(key_signature.val) > 0) THEN (abs(key_signature.val) - 1) * CASE WHEN (key_signature_inter_accidental_padding.val IS NOT NULL) THEN key_signature_inter_accidental_padding.val ELSE key_signature_inter_accidental_padding_default.val END ELSE 0.0 END) * font_size.val) / 20.0 AS val  FROM glyph_box, key_signature, key_signature_inter_accidental_padding AS key_signature_inter_accidental_padding_default, font_size, font_name, name LEFT OUTER JOIN key_signature_inter_accidental_padding ON name.id = key_signature_inter_accidental_padding.id  WHERE name.id = old.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND font_name.val = glyph_box.name AND key_signature_inter_accidental_padding_default.id = -1 AND CASE WHEN (key_signature.val > 0) THEN glyph_box.unicode = \'U+E262\' ELSE glyph_box.unicode = \'U+E260\' END = 1)  SELECT key_signatures_to_widths.id, key_signatures_to_widths.val  FROM key_signatures_to_widths;       END;     CREATE TRIGGER name_delete_del_width_ins_width_BsAX AFTER DELETE ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN name ON font_name.id = name.id JOIN key_signature ON font_name.id = key_signature.id))       BEGIN                      DELETE FROM width WHERE width.id = old.id;           INSERT INTO width (id, val) WITH key_signatures_to_widths AS  (SELECT name.id AS id, ((glyph_box.width * abs(key_signature.val) + CASE WHEN (abs(key_signature.val) > 0) THEN (abs(key_signature.val) - 1) * CASE WHEN (key_signature_inter_accidental_padding.val IS NOT NULL) THEN key_signature_inter_accidental_padding.val ELSE key_signature_inter_accidental_padding_default.val END ELSE 0.0 END) * font_size.val) / 20.0 AS val  FROM glyph_box, key_signature, key_signature_inter_accidental_padding AS key_signature_inter_accidental_padding_default, font_size, font_name, name LEFT OUTER JOIN key_signature_inter_accidental_padding ON name.id = key_signature_inter_accidental_padding.id  WHERE name.id = old.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND font_name.val = glyph_box.name AND key_signature_inter_accidental_padding_default.id = -1 AND CASE WHEN (key_signature.val > 0) THEN glyph_box.unicode = \'U+E262\' ELSE glyph_box.unicode = \'U+E260\' END = 1)  SELECT key_signatures_to_widths.id, key_signatures_to_widths.val  FROM key_signatures_to_widths;       END;     CREATE TRIGGER bar_thickness_insert_del_width_ins_width_Sobk AFTER INSERT ON bar_thickness WHEN (EXISTS (SELECT bar_thickness.id  FROM bar_thickness))       BEGIN                      DELETE FROM width WHERE width.id = new.id;           INSERT INTO width (id, val) WITH bar_lines_to_widths AS  (SELECT bar_thickness.id AS id, bar_thickness.val AS val  FROM bar_thickness  WHERE bar_thickness.id = new.id)  SELECT bar_lines_to_widths.id, bar_lines_to_widths.val  FROM bar_lines_to_widths;       END;     CREATE TRIGGER bar_thickness_update_del_width_ins_width_BkGv AFTER UPDATE ON bar_thickness WHEN (EXISTS (SELECT bar_thickness.id  FROM bar_thickness))       BEGIN                      DELETE FROM width WHERE width.id = new.id;           INSERT INTO width (id, val) WITH bar_lines_to_widths AS  (SELECT bar_thickness.id AS id, bar_thickness.val AS val  FROM bar_thickness  WHERE bar_thickness.id = new.id)  SELECT bar_lines_to_widths.id, bar_lines_to_widths.val  FROM bar_lines_to_widths;       END;     CREATE TRIGGER bar_thickness_delete_del_width_ins_width_WRRu AFTER DELETE ON bar_thickness WHEN (EXISTS (SELECT bar_thickness.id  FROM bar_thickness))       BEGIN                      DELETE FROM width WHERE width.id = old.id;           INSERT INTO width (id, val) WITH bar_lines_to_widths AS  (SELECT bar_thickness.id AS id, bar_thickness.val AS val  FROM bar_thickness  WHERE bar_thickness.id = old.id)  SELECT bar_lines_to_widths.id, bar_lines_to_widths.val  FROM bar_lines_to_widths;       END;     CREATE TRIGGER staff_position_insert_del_y_position_ins_y_position_TDNb AFTER INSERT ON staff_position        BEGIN                      DELETE FROM y_position WHERE y_position.id = new.id;           INSERT INTO y_position (id, val) WITH clefs_to_y_positions AS  (SELECT staff_position.id AS id, (staff_position.val * -1.0 + 2.0) * staff_space.val AS val  FROM staff_position, staff_space, staff_symbol  WHERE staff_position.id = new.id AND staff_position.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT clefs_to_y_positions.id, clefs_to_y_positions.val  FROM clefs_to_y_positions;       END;     CREATE TRIGGER staff_symbol_insert_del_y_position_ins_y_position_HnFk AFTER INSERT ON staff_symbol        BEGIN                      DELETE FROM y_position WHERE y_position.id = new.id;           INSERT INTO y_position (id, val) WITH clefs_to_y_positions AS  (SELECT staff_position.id AS id, (staff_position.val * -1.0 + 2.0) * staff_space.val AS val  FROM staff_position, staff_space, staff_symbol  WHERE staff_position.id = new.id AND staff_position.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT clefs_to_y_positions.id, clefs_to_y_positions.val  FROM clefs_to_y_positions;       END;     CREATE TRIGGER staff_position_update_del_y_position_ins_y_position_HNZD AFTER UPDATE ON staff_position        BEGIN                      DELETE FROM y_position WHERE y_position.id = new.id;           INSERT INTO y_position (id, val) WITH clefs_to_y_positions AS  (SELECT staff_position.id AS id, (staff_position.val * -1.0 + 2.0) * staff_space.val AS val  FROM staff_position, staff_space, staff_symbol  WHERE staff_position.id = new.id AND staff_position.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT clefs_to_y_positions.id, clefs_to_y_positions.val  FROM clefs_to_y_positions;       END;     CREATE TRIGGER staff_symbol_update_del_y_position_ins_y_position_Lpop AFTER UPDATE ON staff_symbol        BEGIN                      DELETE FROM y_position WHERE y_position.id = new.id;           INSERT INTO y_position (id, val) WITH clefs_to_y_positions AS  (SELECT staff_position.id AS id, (staff_position.val * -1.0 + 2.0) * staff_space.val AS val  FROM staff_position, staff_space, staff_symbol  WHERE staff_position.id = new.id AND staff_position.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT clefs_to_y_positions.id, clefs_to_y_positions.val  FROM clefs_to_y_positions;       END;     CREATE TRIGGER staff_position_delete_del_y_position_ins_y_position_QHgE AFTER DELETE ON staff_position        BEGIN                      DELETE FROM y_position WHERE y_position.id = old.id;           INSERT INTO y_position (id, val) WITH clefs_to_y_positions AS  (SELECT staff_position.id AS id, (staff_position.val * -1.0 + 2.0) * staff_space.val AS val  FROM staff_position, staff_space, staff_symbol  WHERE staff_position.id = old.id AND staff_position.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT clefs_to_y_positions.id, clefs_to_y_positions.val  FROM clefs_to_y_positions;       END;     CREATE TRIGGER staff_symbol_delete_del_y_position_ins_y_position_YZYt AFTER DELETE ON staff_symbol        BEGIN                      DELETE FROM y_position WHERE y_position.id = old.id;           INSERT INTO y_position (id, val) WITH clefs_to_y_positions AS  (SELECT staff_position.id AS id, (staff_position.val * -1.0 + 2.0) * staff_space.val AS val  FROM staff_position, staff_space, staff_symbol  WHERE staff_position.id = old.id AND staff_position.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT clefs_to_y_positions.id, clefs_to_y_positions.val  FROM clefs_to_y_positions;       END;     CREATE TRIGGER name_insert_del_staff_position_ins_staff_position_BFHv AFTER INSERT ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN pitch ON name.id = pitch.id JOIN octave ON name.id = octave.id JOIN graphical_next ON name.id = graphical_next.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = new.id AND name.id = new.id AND name.val = \'note\');           INSERT INTO staff_position (id, val) WITH RECURSIVE clef_finder(id, prev, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS note_name, graphical_next LEFT OUTER JOIN name AS clef_name ON clef_name.id = graphical_next.prev  WHERE note_name.id = new.id AND note_name.id = graphical_next.id AND note_name.val = \'note\' UNION ALL SELECT clef_finder_prev.prev AS prev, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM clef_finder AS clef_finder_prev, graphical_next, name AS clef_name  WHERE clef_finder_prev.is_clef = 0 AND graphical_next.id = clef_finder_prev.prev AND clef_name.id = graphical_next.prev),  note_to_staff_position AS  (SELECT note_pitch.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position, clef_finder  WHERE note_pitch.id = new.id AND clef_finder.prev = clef_pitch.id AND clef_pitch.id = clef_octave.id AND note_octave.id = note_pitch.id AND clef_pitch.id = staff_position.id AND clef_finder.is_clef = 1)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER pitch_insert_del_staff_position_ins_staff_position_OZzo AFTER INSERT ON pitch WHEN (EXISTS (SELECT name.id  FROM name JOIN pitch ON name.id = pitch.id JOIN octave ON name.id = octave.id JOIN graphical_next ON name.id = graphical_next.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = new.id AND name.id = new.id AND name.val = \'note\');           INSERT INTO staff_position (id, val) WITH RECURSIVE clef_finder(id, prev, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS note_name, graphical_next LEFT OUTER JOIN name AS clef_name ON clef_name.id = graphical_next.prev  WHERE note_name.id = new.id AND note_name.id = graphical_next.id AND note_name.val = \'note\' UNION ALL SELECT clef_finder_prev.prev AS prev, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM clef_finder AS clef_finder_prev, graphical_next, name AS clef_name  WHERE clef_finder_prev.is_clef = 0 AND graphical_next.id = clef_finder_prev.prev AND clef_name.id = graphical_next.prev),  note_to_staff_position AS  (SELECT note_pitch.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position, clef_finder  WHERE note_pitch.id = new.id AND clef_finder.prev = clef_pitch.id AND clef_pitch.id = clef_octave.id AND note_octave.id = note_pitch.id AND clef_pitch.id = staff_position.id AND clef_finder.is_clef = 1)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER octave_insert_del_staff_position_ins_staff_position_DXtW AFTER INSERT ON octave WHEN (EXISTS (SELECT name.id  FROM name JOIN pitch ON name.id = pitch.id JOIN octave ON name.id = octave.id JOIN graphical_next ON name.id = graphical_next.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = new.id AND name.id = new.id AND name.val = \'note\');           INSERT INTO staff_position (id, val) WITH RECURSIVE clef_finder(id, prev, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS note_name, graphical_next LEFT OUTER JOIN name AS clef_name ON clef_name.id = graphical_next.prev  WHERE note_name.id = new.id AND note_name.id = graphical_next.id AND note_name.val = \'note\' UNION ALL SELECT clef_finder_prev.prev AS prev, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM clef_finder AS clef_finder_prev, graphical_next, name AS clef_name  WHERE clef_finder_prev.is_clef = 0 AND graphical_next.id = clef_finder_prev.prev AND clef_name.id = graphical_next.prev),  note_to_staff_position AS  (SELECT note_pitch.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position, clef_finder  WHERE note_pitch.id = new.id AND clef_finder.prev = clef_pitch.id AND clef_pitch.id = clef_octave.id AND note_octave.id = note_pitch.id AND clef_pitch.id = staff_position.id AND clef_finder.is_clef = 1)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER graphical_next_insert_del_staff_position_ins_staff_position_MRoi AFTER INSERT ON graphical_next WHEN (EXISTS (SELECT name.id  FROM name JOIN pitch ON name.id = pitch.id JOIN octave ON name.id = octave.id JOIN graphical_next ON name.id = graphical_next.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = new.id AND name.id = new.id AND name.val = \'note\');           INSERT INTO staff_position (id, val) WITH RECURSIVE clef_finder(id, prev, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS note_name, graphical_next LEFT OUTER JOIN name AS clef_name ON clef_name.id = graphical_next.prev  WHERE note_name.id = new.id AND note_name.id = graphical_next.id AND note_name.val = \'note\' UNION ALL SELECT clef_finder_prev.prev AS prev, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM clef_finder AS clef_finder_prev, graphical_next, name AS clef_name  WHERE clef_finder_prev.is_clef = 0 AND graphical_next.id = clef_finder_prev.prev AND clef_name.id = graphical_next.prev),  note_to_staff_position AS  (SELECT note_pitch.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position, clef_finder  WHERE note_pitch.id = new.id AND clef_finder.prev = clef_pitch.id AND clef_pitch.id = clef_octave.id AND note_octave.id = note_pitch.id AND clef_pitch.id = staff_position.id AND clef_finder.is_clef = 1)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER name_update_del_staff_position_ins_staff_position_RRvr AFTER UPDATE ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN pitch ON name.id = pitch.id JOIN octave ON name.id = octave.id JOIN graphical_next ON name.id = graphical_next.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = new.id AND name.id = new.id AND name.val = \'note\');           INSERT INTO staff_position (id, val) WITH RECURSIVE clef_finder(id, prev, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS note_name, graphical_next LEFT OUTER JOIN name AS clef_name ON clef_name.id = graphical_next.prev  WHERE note_name.id = new.id AND note_name.id = graphical_next.id AND note_name.val = \'note\' UNION ALL SELECT clef_finder_prev.prev AS prev, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM clef_finder AS clef_finder_prev, graphical_next, name AS clef_name  WHERE clef_finder_prev.is_clef = 0 AND graphical_next.id = clef_finder_prev.prev AND clef_name.id = graphical_next.prev),  note_to_staff_position AS  (SELECT note_pitch.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position, clef_finder  WHERE note_pitch.id = new.id AND clef_finder.prev = clef_pitch.id AND clef_pitch.id = clef_octave.id AND note_octave.id = note_pitch.id AND clef_pitch.id = staff_position.id AND clef_finder.is_clef = 1)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER pitch_update_del_staff_position_ins_staff_position_AyMP AFTER UPDATE ON pitch WHEN (EXISTS (SELECT name.id  FROM name JOIN pitch ON name.id = pitch.id JOIN octave ON name.id = octave.id JOIN graphical_next ON name.id = graphical_next.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = new.id AND name.id = new.id AND name.val = \'note\');           INSERT INTO staff_position (id, val) WITH RECURSIVE clef_finder(id, prev, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS note_name, graphical_next LEFT OUTER JOIN name AS clef_name ON clef_name.id = graphical_next.prev  WHERE note_name.id = new.id AND note_name.id = graphical_next.id AND note_name.val = \'note\' UNION ALL SELECT clef_finder_prev.prev AS prev, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM clef_finder AS clef_finder_prev, graphical_next, name AS clef_name  WHERE clef_finder_prev.is_clef = 0 AND graphical_next.id = clef_finder_prev.prev AND clef_name.id = graphical_next.prev),  note_to_staff_position AS  (SELECT note_pitch.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position, clef_finder  WHERE note_pitch.id = new.id AND clef_finder.prev = clef_pitch.id AND clef_pitch.id = clef_octave.id AND note_octave.id = note_pitch.id AND clef_pitch.id = staff_position.id AND clef_finder.is_clef = 1)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER octave_update_del_staff_position_ins_staff_position_JXEN AFTER UPDATE ON octave WHEN (EXISTS (SELECT name.id  FROM name JOIN pitch ON name.id = pitch.id JOIN octave ON name.id = octave.id JOIN graphical_next ON name.id = graphical_next.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = new.id AND name.id = new.id AND name.val = \'note\');           INSERT INTO staff_position (id, val) WITH RECURSIVE clef_finder(id, prev, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS note_name, graphical_next LEFT OUTER JOIN name AS clef_name ON clef_name.id = graphical_next.prev  WHERE note_name.id = new.id AND note_name.id = graphical_next.id AND note_name.val = \'note\' UNION ALL SELECT clef_finder_prev.prev AS prev, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM clef_finder AS clef_finder_prev, graphical_next, name AS clef_name  WHERE clef_finder_prev.is_clef = 0 AND graphical_next.id = clef_finder_prev.prev AND clef_name.id = graphical_next.prev),  note_to_staff_position AS  (SELECT note_pitch.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position, clef_finder  WHERE note_pitch.id = new.id AND clef_finder.prev = clef_pitch.id AND clef_pitch.id = clef_octave.id AND note_octave.id = note_pitch.id AND clef_pitch.id = staff_position.id AND clef_finder.is_clef = 1)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER graphical_next_update_del_staff_position_ins_staff_position_PfAV AFTER UPDATE ON graphical_next WHEN (EXISTS (SELECT name.id  FROM name JOIN pitch ON name.id = pitch.id JOIN octave ON name.id = octave.id JOIN graphical_next ON name.id = graphical_next.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = new.id AND name.id = new.id AND name.val = \'note\');           INSERT INTO staff_position (id, val) WITH RECURSIVE clef_finder(id, prev, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS note_name, graphical_next LEFT OUTER JOIN name AS clef_name ON clef_name.id = graphical_next.prev  WHERE note_name.id = new.id AND note_name.id = graphical_next.id AND note_name.val = \'note\' UNION ALL SELECT clef_finder_prev.prev AS prev, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM clef_finder AS clef_finder_prev, graphical_next, name AS clef_name  WHERE clef_finder_prev.is_clef = 0 AND graphical_next.id = clef_finder_prev.prev AND clef_name.id = graphical_next.prev),  note_to_staff_position AS  (SELECT note_pitch.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position, clef_finder  WHERE note_pitch.id = new.id AND clef_finder.prev = clef_pitch.id AND clef_pitch.id = clef_octave.id AND note_octave.id = note_pitch.id AND clef_pitch.id = staff_position.id AND clef_finder.is_clef = 1)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER name_delete_del_staff_position_ins_staff_position_AEAF AFTER DELETE ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN pitch ON name.id = pitch.id JOIN octave ON name.id = octave.id JOIN graphical_next ON name.id = graphical_next.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = old.id AND name.id = old.id AND name.val = \'note\');           INSERT INTO staff_position (id, val) WITH RECURSIVE clef_finder(id, prev, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS note_name, graphical_next LEFT OUTER JOIN name AS clef_name ON clef_name.id = graphical_next.prev  WHERE note_name.id = old.id AND note_name.id = graphical_next.id AND note_name.val = \'note\' UNION ALL SELECT clef_finder_prev.prev AS prev, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM clef_finder AS clef_finder_prev, graphical_next, name AS clef_name  WHERE clef_finder_prev.is_clef = 0 AND graphical_next.id = clef_finder_prev.prev AND clef_name.id = graphical_next.prev),  note_to_staff_position AS  (SELECT note_pitch.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position, clef_finder  WHERE note_pitch.id = old.id AND clef_finder.prev = clef_pitch.id AND clef_pitch.id = clef_octave.id AND note_octave.id = note_pitch.id AND clef_pitch.id = staff_position.id AND clef_finder.is_clef = 1)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER pitch_delete_del_staff_position_ins_staff_position_KoGS AFTER DELETE ON pitch WHEN (EXISTS (SELECT name.id  FROM name JOIN pitch ON name.id = pitch.id JOIN octave ON name.id = octave.id JOIN graphical_next ON name.id = graphical_next.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = old.id AND name.id = old.id AND name.val = \'note\');           INSERT INTO staff_position (id, val) WITH RECURSIVE clef_finder(id, prev, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS note_name, graphical_next LEFT OUTER JOIN name AS clef_name ON clef_name.id = graphical_next.prev  WHERE note_name.id = old.id AND note_name.id = graphical_next.id AND note_name.val = \'note\' UNION ALL SELECT clef_finder_prev.prev AS prev, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM clef_finder AS clef_finder_prev, graphical_next, name AS clef_name  WHERE clef_finder_prev.is_clef = 0 AND graphical_next.id = clef_finder_prev.prev AND clef_name.id = graphical_next.prev),  note_to_staff_position AS  (SELECT note_pitch.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position, clef_finder  WHERE note_pitch.id = old.id AND clef_finder.prev = clef_pitch.id AND clef_pitch.id = clef_octave.id AND note_octave.id = note_pitch.id AND clef_pitch.id = staff_position.id AND clef_finder.is_clef = 1)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER octave_delete_del_staff_position_ins_staff_position_LJeY AFTER DELETE ON octave WHEN (EXISTS (SELECT name.id  FROM name JOIN pitch ON name.id = pitch.id JOIN octave ON name.id = octave.id JOIN graphical_next ON name.id = graphical_next.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = old.id AND name.id = old.id AND name.val = \'note\');           INSERT INTO staff_position (id, val) WITH RECURSIVE clef_finder(id, prev, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS note_name, graphical_next LEFT OUTER JOIN name AS clef_name ON clef_name.id = graphical_next.prev  WHERE note_name.id = old.id AND note_name.id = graphical_next.id AND note_name.val = \'note\' UNION ALL SELECT clef_finder_prev.prev AS prev, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM clef_finder AS clef_finder_prev, graphical_next, name AS clef_name  WHERE clef_finder_prev.is_clef = 0 AND graphical_next.id = clef_finder_prev.prev AND clef_name.id = graphical_next.prev),  note_to_staff_position AS  (SELECT note_pitch.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position, clef_finder  WHERE note_pitch.id = old.id AND clef_finder.prev = clef_pitch.id AND clef_pitch.id = clef_octave.id AND note_octave.id = note_pitch.id AND clef_pitch.id = staff_position.id AND clef_finder.is_clef = 1)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER graphical_next_delete_del_staff_position_ins_staff_position_BTNh AFTER DELETE ON graphical_next WHEN (EXISTS (SELECT name.id  FROM name JOIN pitch ON name.id = pitch.id JOIN octave ON name.id = octave.id JOIN graphical_next ON name.id = graphical_next.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = old.id AND name.id = old.id AND name.val = \'note\');           INSERT INTO staff_position (id, val) WITH RECURSIVE clef_finder(id, prev, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS note_name, graphical_next LEFT OUTER JOIN name AS clef_name ON clef_name.id = graphical_next.prev  WHERE note_name.id = old.id AND note_name.id = graphical_next.id AND note_name.val = \'note\' UNION ALL SELECT clef_finder_prev.prev AS prev, graphical_next.prev AS prev, CASE WHEN (clef_name.val = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM clef_finder AS clef_finder_prev, graphical_next, name AS clef_name  WHERE clef_finder_prev.is_clef = 0 AND graphical_next.id = clef_finder_prev.prev AND clef_name.id = graphical_next.prev),  note_to_staff_position AS  (SELECT note_pitch.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position, clef_finder  WHERE note_pitch.id = old.id AND clef_finder.prev = clef_pitch.id AND clef_pitch.id = clef_octave.id AND note_octave.id = note_pitch.id AND clef_pitch.id = staff_position.id AND clef_finder.is_clef = 1)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER name_insert_del_staff_position_ins_staff_position_GtDh AFTER INSERT ON name        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = new.id AND name.id = new.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = new.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = new.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER pitch_insert_del_staff_position_ins_staff_position_HFEb AFTER INSERT ON pitch        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = new.id AND name.id = new.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = new.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = new.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER octave_insert_del_staff_position_ins_staff_position_ZOWq AFTER INSERT ON octave        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = new.id AND name.id = new.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = new.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = new.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER graphical_next_insert_del_staff_position_ins_staff_position_FZvw AFTER INSERT ON graphical_next        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = new.id AND name.id = new.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = new.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = new.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER staff_position_insert_del_staff_position_ins_staff_position_CvnQ AFTER INSERT ON staff_position        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = new.id AND name.id = new.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = new.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = new.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER name_update_del_staff_position_ins_staff_position_Azym AFTER UPDATE ON name        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = new.id AND name.id = new.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = new.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = new.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER pitch_update_del_staff_position_ins_staff_position_IRCV AFTER UPDATE ON pitch        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = new.id AND name.id = new.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = new.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = new.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER octave_update_del_staff_position_ins_staff_position_OSJp AFTER UPDATE ON octave        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = new.id AND name.id = new.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = new.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = new.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER graphical_next_update_del_staff_position_ins_staff_position_Tvgi AFTER UPDATE ON graphical_next        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = new.id AND name.id = new.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = new.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = new.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER staff_position_update_del_staff_position_ins_staff_position_YtKo AFTER UPDATE ON staff_position        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = new.id AND name.id = new.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = new.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = new.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER name_delete_del_staff_position_ins_staff_position_JXgE AFTER DELETE ON name        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = old.id AND name.id = old.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = old.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = old.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER pitch_delete_del_staff_position_ins_staff_position_Cryn AFTER DELETE ON pitch        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = old.id AND name.id = old.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = old.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = old.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER octave_delete_del_staff_position_ins_staff_position_SQiF AFTER DELETE ON octave        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = old.id AND name.id = old.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = old.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = old.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER graphical_next_delete_del_staff_position_ins_staff_position_WbPF AFTER DELETE ON graphical_next        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = old.id AND name.id = old.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = old.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = old.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER staff_position_delete_del_staff_position_ins_staff_position_UbNj AFTER DELETE ON staff_position        BEGIN                      DELETE FROM staff_position WHERE EXISTS (WITH RECURSIVE first_clef(id) AS  (SELECT graphical_next.id AS id  FROM graphical_next, name  WHERE graphical_next.id = old.id AND name.id = old.id AND name.val = \'clef\' UNION ALL SELECT graphical_next.next AS next  FROM graphical_next, first_clef AS first_clef_prev, name  WHERE first_clef_prev.id = graphical_next.id AND name.id = graphical_next.next AND name.val != \'clef\')  SELECT first_clef.id AS id  FROM first_clef, name  WHERE name.id = first_clef.id AND name.val = \'note\' AND staff_position.id = name.id);           INSERT INTO staff_position (id, val) WITH RECURSIVE notes_after_clef(id, next, is_clef) AS  (SELECT graphical_next.id AS id, graphical_next.next AS next, CASE WHEN (last_clef_name.val = \'clef\') THEN 1 ELSE 0 END AS is_clef  FROM name AS first_clef_name, graphical_next LEFT OUTER JOIN name AS last_clef_name ON last_clef_name.id = graphical_next.next  WHERE first_clef_name.id = old.id AND first_clef_name.id = graphical_next.id AND first_clef_name.val = \'clef\' UNION ALL SELECT notes_after_clef_next.next AS next, graphical_next.next AS next, CASE WHEN (last_clef_name.id = \'clef\') THEN 1 ELSE 0 END AS anon_1  FROM notes_after_clef AS notes_after_clef_next, graphical_next, name AS last_clef_name  WHERE notes_after_clef_next.is_clef = 0 AND graphical_next.id = notes_after_clef_next.next AND last_clef_name.id = graphical_next.next),  just_notes AS  (SELECT notes_after_clef.id AS id  FROM notes_after_clef, name AS note_name  WHERE notes_after_clef.id = note_name.id AND note_name.val = \'note\'),  note_to_staff_position AS  (SELECT just_notes.id AS id, ((note_pitch.val + 7 * note_octave.val) - (clef_pitch.val + 7 * clef_octave.val)) / 2.0 + staff_position.val AS val  FROM just_notes, pitch AS note_pitch, octave AS note_octave, pitch AS clef_pitch, octave AS clef_octave, staff_position AS staff_position  WHERE clef_pitch.id = old.id AND just_notes.id = note_pitch.id AND clef_octave.id = clef_pitch.id AND just_notes.id = note_octave.id AND clef_octave.id = staff_position.id)  SELECT note_to_staff_position.id, note_to_staff_position.val  FROM note_to_staff_position;       END;     CREATE TRIGGER name_insert_del_staff_position_ins_staff_position_BVwd AFTER INSERT ON name        BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = new.id AND name.id = new.id AND name.val = \'rest\');           INSERT INTO staff_position (id, val) WITH rest_to_staff_position AS  (SELECT name.id AS id, 0 AS val  FROM name  WHERE name.val = \'rest\' AND name.id = new.id)  SELECT rest_to_staff_position.id, rest_to_staff_position.val  FROM rest_to_staff_position;       END;     CREATE TRIGGER name_update_del_staff_position_ins_staff_position_JwOe AFTER UPDATE ON name        BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = new.id AND name.id = new.id AND name.val = \'rest\');           INSERT INTO staff_position (id, val) WITH rest_to_staff_position AS  (SELECT name.id AS id, 0 AS val  FROM name  WHERE name.val = \'rest\' AND name.id = new.id)  SELECT rest_to_staff_position.id, rest_to_staff_position.val  FROM rest_to_staff_position;       END;     CREATE TRIGGER name_delete_del_staff_position_ins_staff_position_OKsX AFTER DELETE ON name        BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT name.id  FROM name  WHERE staff_position.id = old.id AND name.id = old.id AND name.val = \'rest\');           INSERT INTO staff_position (id, val) WITH rest_to_staff_position AS  (SELECT name.id AS id, 0 AS val  FROM name  WHERE name.val = \'rest\' AND name.id = old.id)  SELECT rest_to_staff_position.id, rest_to_staff_position.val  FROM rest_to_staff_position;       END;     CREATE TRIGGER duration_log_insert_del_stem_length_ins_stem_length_AKCj AFTER INSERT ON duration_log WHEN (EXISTS (SELECT duration_log.id  FROM duration_log JOIN name ON duration_log.id = name.id))       BEGIN                      DELETE FROM stem_length WHERE stem_length.id = new.id;           INSERT INTO stem_length (id, val) WITH duration_log_to_stem_lengths AS  (SELECT duration_log.id AS id, CASE WHEN (beam.val IS NOT NULL) THEN 4.0 + 0.75 * (duration_log.val * -1 - 3.0) ELSE 4.0 END AS val  FROM name, duration_log LEFT OUTER JOIN beam ON duration_log.id = beam.id  WHERE duration_log.id = new.id AND duration_log.val < 0 AND name.id = duration_log.id AND name.val = \'note\')  SELECT duration_log_to_stem_lengths.id, duration_log_to_stem_lengths.val  FROM duration_log_to_stem_lengths;       END;     CREATE TRIGGER name_insert_del_stem_length_ins_stem_length_UXpu AFTER INSERT ON name WHEN (EXISTS (SELECT duration_log.id  FROM duration_log JOIN name ON duration_log.id = name.id))       BEGIN                      DELETE FROM stem_length WHERE stem_length.id = new.id;           INSERT INTO stem_length (id, val) WITH duration_log_to_stem_lengths AS  (SELECT duration_log.id AS id, CASE WHEN (beam.val IS NOT NULL) THEN 4.0 + 0.75 * (duration_log.val * -1 - 3.0) ELSE 4.0 END AS val  FROM name, duration_log LEFT OUTER JOIN beam ON duration_log.id = beam.id  WHERE duration_log.id = new.id AND duration_log.val < 0 AND name.id = duration_log.id AND name.val = \'note\')  SELECT duration_log_to_stem_lengths.id, duration_log_to_stem_lengths.val  FROM duration_log_to_stem_lengths;       END;     CREATE TRIGGER duration_log_update_del_stem_length_ins_stem_length_FdKE AFTER UPDATE ON duration_log WHEN (EXISTS (SELECT duration_log.id  FROM duration_log JOIN name ON duration_log.id = name.id))       BEGIN                      DELETE FROM stem_length WHERE stem_length.id = new.id;           INSERT INTO stem_length (id, val) WITH duration_log_to_stem_lengths AS  (SELECT duration_log.id AS id, CASE WHEN (beam.val IS NOT NULL) THEN 4.0 + 0.75 * (duration_log.val * -1 - 3.0) ELSE 4.0 END AS val  FROM name, duration_log LEFT OUTER JOIN beam ON duration_log.id = beam.id  WHERE duration_log.id = new.id AND duration_log.val < 0 AND name.id = duration_log.id AND name.val = \'note\')  SELECT duration_log_to_stem_lengths.id, duration_log_to_stem_lengths.val  FROM duration_log_to_stem_lengths;       END;     CREATE TRIGGER name_update_del_stem_length_ins_stem_length_GOdS AFTER UPDATE ON name WHEN (EXISTS (SELECT duration_log.id  FROM duration_log JOIN name ON duration_log.id = name.id))       BEGIN                      DELETE FROM stem_length WHERE stem_length.id = new.id;           INSERT INTO stem_length (id, val) WITH duration_log_to_stem_lengths AS  (SELECT duration_log.id AS id, CASE WHEN (beam.val IS NOT NULL) THEN 4.0 + 0.75 * (duration_log.val * -1 - 3.0) ELSE 4.0 END AS val  FROM name, duration_log LEFT OUTER JOIN beam ON duration_log.id = beam.id  WHERE duration_log.id = new.id AND duration_log.val < 0 AND name.id = duration_log.id AND name.val = \'note\')  SELECT duration_log_to_stem_lengths.id, duration_log_to_stem_lengths.val  FROM duration_log_to_stem_lengths;       END;     CREATE TRIGGER duration_log_delete_del_stem_length_ins_stem_length_CkFY AFTER DELETE ON duration_log WHEN (EXISTS (SELECT duration_log.id  FROM duration_log JOIN name ON duration_log.id = name.id))       BEGIN                      DELETE FROM stem_length WHERE stem_length.id = old.id;           INSERT INTO stem_length (id, val) WITH duration_log_to_stem_lengths AS  (SELECT duration_log.id AS id, CASE WHEN (beam.val IS NOT NULL) THEN 4.0 + 0.75 * (duration_log.val * -1 - 3.0) ELSE 4.0 END AS val  FROM name, duration_log LEFT OUTER JOIN beam ON duration_log.id = beam.id  WHERE duration_log.id = old.id AND duration_log.val < 0 AND name.id = duration_log.id AND name.val = \'note\')  SELECT duration_log_to_stem_lengths.id, duration_log_to_stem_lengths.val  FROM duration_log_to_stem_lengths;       END;     CREATE TRIGGER name_delete_del_stem_length_ins_stem_length_VnVu AFTER DELETE ON name WHEN (EXISTS (SELECT duration_log.id  FROM duration_log JOIN name ON duration_log.id = name.id))       BEGIN                      DELETE FROM stem_length WHERE stem_length.id = old.id;           INSERT INTO stem_length (id, val) WITH duration_log_to_stem_lengths AS  (SELECT duration_log.id AS id, CASE WHEN (beam.val IS NOT NULL) THEN 4.0 + 0.75 * (duration_log.val * -1 - 3.0) ELSE 4.0 END AS val  FROM name, duration_log LEFT OUTER JOIN beam ON duration_log.id = beam.id  WHERE duration_log.id = old.id AND duration_log.val < 0 AND name.id = duration_log.id AND name.val = \'note\')  SELECT duration_log_to_stem_lengths.id, duration_log_to_stem_lengths.val  FROM duration_log_to_stem_lengths;       END;     CREATE TRIGGER name_insert_del_natural_stem_direction_ins_natural_stem_direction_XbiY AFTER INSERT ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN staff_position ON name.id = staff_position.id))       BEGIN                      DELETE FROM natural_stem_direction WHERE natural_stem_direction.id = new.id;           INSERT INTO natural_stem_direction (id, val) WITH duration_log_to_natural_stem_directions AS  (SELECT staff_position.id AS id, CASE WHEN (staff_position.val > 0) THEN -1 ELSE 1 END AS val  FROM staff_position, name  WHERE staff_position.id = new.id AND name.id = staff_position.id AND name.val = \'note\')  SELECT duration_log_to_natural_stem_directions.id, duration_log_to_natural_stem_directions.val  FROM duration_log_to_natural_stem_directions;       END;     CREATE TRIGGER staff_position_insert_del_natural_stem_direction_ins_natural_stem_direction_DJeL AFTER INSERT ON staff_position WHEN (EXISTS (SELECT name.id  FROM name JOIN staff_position ON name.id = staff_position.id))       BEGIN                      DELETE FROM natural_stem_direction WHERE natural_stem_direction.id = new.id;           INSERT INTO natural_stem_direction (id, val) WITH duration_log_to_natural_stem_directions AS  (SELECT staff_position.id AS id, CASE WHEN (staff_position.val > 0) THEN -1 ELSE 1 END AS val  FROM staff_position, name  WHERE staff_position.id = new.id AND name.id = staff_position.id AND name.val = \'note\')  SELECT duration_log_to_natural_stem_directions.id, duration_log_to_natural_stem_directions.val  FROM duration_log_to_natural_stem_directions;       END;     CREATE TRIGGER name_update_del_natural_stem_direction_ins_natural_stem_direction_Ughb AFTER UPDATE ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN staff_position ON name.id = staff_position.id))       BEGIN                      DELETE FROM natural_stem_direction WHERE natural_stem_direction.id = new.id;           INSERT INTO natural_stem_direction (id, val) WITH duration_log_to_natural_stem_directions AS  (SELECT staff_position.id AS id, CASE WHEN (staff_position.val > 0) THEN -1 ELSE 1 END AS val  FROM staff_position, name  WHERE staff_position.id = new.id AND name.id = staff_position.id AND name.val = \'note\')  SELECT duration_log_to_natural_stem_directions.id, duration_log_to_natural_stem_directions.val  FROM duration_log_to_natural_stem_directions;       END;     CREATE TRIGGER staff_position_update_del_natural_stem_direction_ins_natural_stem_direction_XBIu AFTER UPDATE ON staff_position WHEN (EXISTS (SELECT name.id  FROM name JOIN staff_position ON name.id = staff_position.id))       BEGIN                      DELETE FROM natural_stem_direction WHERE natural_stem_direction.id = new.id;           INSERT INTO natural_stem_direction (id, val) WITH duration_log_to_natural_stem_directions AS  (SELECT staff_position.id AS id, CASE WHEN (staff_position.val > 0) THEN -1 ELSE 1 END AS val  FROM staff_position, name  WHERE staff_position.id = new.id AND name.id = staff_position.id AND name.val = \'note\')  SELECT duration_log_to_natural_stem_directions.id, duration_log_to_natural_stem_directions.val  FROM duration_log_to_natural_stem_directions;       END;     CREATE TRIGGER name_delete_del_natural_stem_direction_ins_natural_stem_direction_LwfW AFTER DELETE ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN staff_position ON name.id = staff_position.id))       BEGIN                      DELETE FROM natural_stem_direction WHERE natural_stem_direction.id = old.id;           INSERT INTO natural_stem_direction (id, val) WITH duration_log_to_natural_stem_directions AS  (SELECT staff_position.id AS id, CASE WHEN (staff_position.val > 0) THEN -1 ELSE 1 END AS val  FROM staff_position, name  WHERE staff_position.id = old.id AND name.id = staff_position.id AND name.val = \'note\')  SELECT duration_log_to_natural_stem_directions.id, duration_log_to_natural_stem_directions.val  FROM duration_log_to_natural_stem_directions;       END;     CREATE TRIGGER staff_position_delete_del_natural_stem_direction_ins_natural_stem_direction_BYwo AFTER DELETE ON staff_position WHEN (EXISTS (SELECT name.id  FROM name JOIN staff_position ON name.id = staff_position.id))       BEGIN                      DELETE FROM natural_stem_direction WHERE natural_stem_direction.id = old.id;           INSERT INTO natural_stem_direction (id, val) WITH duration_log_to_natural_stem_directions AS  (SELECT staff_position.id AS id, CASE WHEN (staff_position.val > 0) THEN -1 ELSE 1 END AS val  FROM staff_position, name  WHERE staff_position.id = old.id AND name.id = staff_position.id AND name.val = \'note\')  SELECT duration_log_to_natural_stem_directions.id, duration_log_to_natural_stem_directions.val  FROM duration_log_to_natural_stem_directions;       END;     CREATE TRIGGER natural_stem_direction_insert_del_stem_direction_ins_stem_direction_RxFN AFTER INSERT ON natural_stem_direction        BEGIN                      DELETE FROM stem_direction WHERE stem_direction.id = new.id;           INSERT INTO stem_direction (id, val) WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  prevailing_direction AS  (SELECT sum(natural_stem_direction.val) AS val  FROM natural_stem_direction, others_beamed_with_me  WHERE natural_stem_direction.id = others_beamed_with_me.id),  stem_direction_for_beams AS  (SELECT others_beamed_with_me.id AS id, prevailing_direction.val AS val  FROM others_beamed_with_me, prevailing_direction),  natural_stem_direction_to_stem_direction AS  (SELECT natural_stem_direction.id AS id, CASE WHEN (stem_direction_for_beams.val IS NOT NULL) THEN CASE WHEN (stem_direction_for_beams.val > 0) THEN 1 ELSE -1 END ELSE natural_stem_direction.val END AS val  FROM natural_stem_direction LEFT OUTER JOIN stem_direction_for_beams ON natural_stem_direction.id = stem_direction_for_beams.id  WHERE natural_stem_direction.id = new.id)  SELECT natural_stem_direction_to_stem_direction.id, natural_stem_direction_to_stem_direction.val  FROM natural_stem_direction_to_stem_direction;       END;     CREATE TRIGGER natural_stem_direction_update_del_stem_direction_ins_stem_direction_EwkK AFTER UPDATE ON natural_stem_direction        BEGIN                      DELETE FROM stem_direction WHERE stem_direction.id = new.id;           INSERT INTO stem_direction (id, val) WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  prevailing_direction AS  (SELECT sum(natural_stem_direction.val) AS val  FROM natural_stem_direction, others_beamed_with_me  WHERE natural_stem_direction.id = others_beamed_with_me.id),  stem_direction_for_beams AS  (SELECT others_beamed_with_me.id AS id, prevailing_direction.val AS val  FROM others_beamed_with_me, prevailing_direction),  natural_stem_direction_to_stem_direction AS  (SELECT natural_stem_direction.id AS id, CASE WHEN (stem_direction_for_beams.val IS NOT NULL) THEN CASE WHEN (stem_direction_for_beams.val > 0) THEN 1 ELSE -1 END ELSE natural_stem_direction.val END AS val  FROM natural_stem_direction LEFT OUTER JOIN stem_direction_for_beams ON natural_stem_direction.id = stem_direction_for_beams.id  WHERE natural_stem_direction.id = new.id)  SELECT natural_stem_direction_to_stem_direction.id, natural_stem_direction_to_stem_direction.val  FROM natural_stem_direction_to_stem_direction;       END;     CREATE TRIGGER natural_stem_direction_delete_del_stem_direction_ins_stem_direction_HguJ AFTER DELETE ON natural_stem_direction        BEGIN                      DELETE FROM stem_direction WHERE stem_direction.id = old.id;           INSERT INTO stem_direction (id, val) WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = old.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  prevailing_direction AS  (SELECT sum(natural_stem_direction.val) AS val  FROM natural_stem_direction, others_beamed_with_me  WHERE natural_stem_direction.id = others_beamed_with_me.id),  stem_direction_for_beams AS  (SELECT others_beamed_with_me.id AS id, prevailing_direction.val AS val  FROM others_beamed_with_me, prevailing_direction),  natural_stem_direction_to_stem_direction AS  (SELECT natural_stem_direction.id AS id, CASE WHEN (stem_direction_for_beams.val IS NOT NULL) THEN CASE WHEN (stem_direction_for_beams.val > 0) THEN 1 ELSE -1 END ELSE natural_stem_direction.val END AS val  FROM natural_stem_direction LEFT OUTER JOIN stem_direction_for_beams ON natural_stem_direction.id = stem_direction_for_beams.id  WHERE natural_stem_direction.id = old.id)  SELECT natural_stem_direction_to_stem_direction.id, natural_stem_direction_to_stem_direction.val  FROM natural_stem_direction_to_stem_direction;       END;     CREATE TRIGGER beam_insert_del_stem_direction_ins_stem_direction_AiBs AFTER INSERT ON beam        BEGIN                      DELETE FROM stem_direction WHERE EXISTS (SELECT beam_other.id  FROM beam AS beam_other, beam AS beam_me  WHERE stem_direction.id = beam_other.id AND beam_other.val = beam_me.val AND beam_me.id = new.id);           INSERT INTO stem_direction (id, val) WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  prevailing_direction AS  (SELECT sum(natural_stem_direction.val) AS val  FROM natural_stem_direction, others_beamed_with_me  WHERE natural_stem_direction.id = others_beamed_with_me.id),  stem_direction_for_beams AS  (SELECT others_beamed_with_me.id AS id, prevailing_direction.val AS val  FROM others_beamed_with_me, prevailing_direction),  natural_stem_direction_to_stem_direction AS  (SELECT stem_direction_for_beams.id AS id, CASE WHEN (stem_direction_for_beams.val > 0) THEN 1 ELSE -1 END AS val  FROM stem_direction_for_beams)  SELECT natural_stem_direction_to_stem_direction.id, natural_stem_direction_to_stem_direction.val  FROM natural_stem_direction_to_stem_direction;       END;     CREATE TRIGGER beam_update_del_stem_direction_ins_stem_direction_CkMe AFTER UPDATE ON beam        BEGIN                      DELETE FROM stem_direction WHERE EXISTS (SELECT beam_other.id  FROM beam AS beam_other, beam AS beam_me  WHERE stem_direction.id = beam_other.id AND beam_other.val = beam_me.val AND beam_me.id = new.id);           INSERT INTO stem_direction (id, val) WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  prevailing_direction AS  (SELECT sum(natural_stem_direction.val) AS val  FROM natural_stem_direction, others_beamed_with_me  WHERE natural_stem_direction.id = others_beamed_with_me.id),  stem_direction_for_beams AS  (SELECT others_beamed_with_me.id AS id, prevailing_direction.val AS val  FROM others_beamed_with_me, prevailing_direction),  natural_stem_direction_to_stem_direction AS  (SELECT stem_direction_for_beams.id AS id, CASE WHEN (stem_direction_for_beams.val > 0) THEN 1 ELSE -1 END AS val  FROM stem_direction_for_beams)  SELECT natural_stem_direction_to_stem_direction.id, natural_stem_direction_to_stem_direction.val  FROM natural_stem_direction_to_stem_direction;       END;     CREATE TRIGGER beam_delete_del_stem_direction_ins_stem_direction_GDtn AFTER DELETE ON beam        BEGIN                      DELETE FROM stem_direction WHERE EXISTS (SELECT beam_other.id  FROM beam AS beam_other, beam AS beam_me  WHERE stem_direction.id = beam_other.id AND beam_other.val = beam_me.val AND beam_me.id = old.id);           INSERT INTO stem_direction (id, val) WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = old.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  prevailing_direction AS  (SELECT sum(natural_stem_direction.val) AS val  FROM natural_stem_direction, others_beamed_with_me  WHERE natural_stem_direction.id = others_beamed_with_me.id),  stem_direction_for_beams AS  (SELECT others_beamed_with_me.id AS id, prevailing_direction.val AS val  FROM others_beamed_with_me, prevailing_direction),  natural_stem_direction_to_stem_direction AS  (SELECT stem_direction_for_beams.id AS id, CASE WHEN (stem_direction_for_beams.val > 0) THEN 1 ELSE -1 END AS val  FROM stem_direction_for_beams)  SELECT natural_stem_direction_to_stem_direction.id, natural_stem_direction_to_stem_direction.val  FROM natural_stem_direction_to_stem_direction;       END;     CREATE TRIGGER rhythmic_head_width_insert_del_stem_x_offset_ins_stem_x_offset_IOVd AFTER INSERT ON rhythmic_head_width        BEGIN                      DELETE FROM stem_x_offset WHERE stem_x_offset.id = new.id;           INSERT INTO stem_x_offset (id, val) WITH stem_direction_to_stem_x_offset AS  (SELECT stem_direction.id AS id, CASE WHEN (stem_direction.val > 0) THEN rhythmic_head_width.val ELSE 0.0 END AS val  FROM stem_direction, rhythmic_head_width  WHERE stem_direction.id = rhythmic_head_width.id AND stem_direction.id = new.id)  SELECT stem_direction_to_stem_x_offset.id, stem_direction_to_stem_x_offset.val  FROM stem_direction_to_stem_x_offset;       END;     CREATE TRIGGER stem_direction_insert_del_stem_x_offset_ins_stem_x_offset_DXIX AFTER INSERT ON stem_direction        BEGIN                      DELETE FROM stem_x_offset WHERE stem_x_offset.id = new.id;           INSERT INTO stem_x_offset (id, val) WITH stem_direction_to_stem_x_offset AS  (SELECT stem_direction.id AS id, CASE WHEN (stem_direction.val > 0) THEN rhythmic_head_width.val ELSE 0.0 END AS val  FROM stem_direction, rhythmic_head_width  WHERE stem_direction.id = rhythmic_head_width.id AND stem_direction.id = new.id)  SELECT stem_direction_to_stem_x_offset.id, stem_direction_to_stem_x_offset.val  FROM stem_direction_to_stem_x_offset;       END;     CREATE TRIGGER rhythmic_head_width_update_del_stem_x_offset_ins_stem_x_offset_QTth AFTER UPDATE ON rhythmic_head_width        BEGIN                      DELETE FROM stem_x_offset WHERE stem_x_offset.id = new.id;           INSERT INTO stem_x_offset (id, val) WITH stem_direction_to_stem_x_offset AS  (SELECT stem_direction.id AS id, CASE WHEN (stem_direction.val > 0) THEN rhythmic_head_width.val ELSE 0.0 END AS val  FROM stem_direction, rhythmic_head_width  WHERE stem_direction.id = rhythmic_head_width.id AND stem_direction.id = new.id)  SELECT stem_direction_to_stem_x_offset.id, stem_direction_to_stem_x_offset.val  FROM stem_direction_to_stem_x_offset;       END;     CREATE TRIGGER stem_direction_update_del_stem_x_offset_ins_stem_x_offset_FeXj AFTER UPDATE ON stem_direction        BEGIN                      DELETE FROM stem_x_offset WHERE stem_x_offset.id = new.id;           INSERT INTO stem_x_offset (id, val) WITH stem_direction_to_stem_x_offset AS  (SELECT stem_direction.id AS id, CASE WHEN (stem_direction.val > 0) THEN rhythmic_head_width.val ELSE 0.0 END AS val  FROM stem_direction, rhythmic_head_width  WHERE stem_direction.id = rhythmic_head_width.id AND stem_direction.id = new.id)  SELECT stem_direction_to_stem_x_offset.id, stem_direction_to_stem_x_offset.val  FROM stem_direction_to_stem_x_offset;       END;     CREATE TRIGGER rhythmic_head_width_delete_del_stem_x_offset_ins_stem_x_offset_Data AFTER DELETE ON rhythmic_head_width        BEGIN                      DELETE FROM stem_x_offset WHERE stem_x_offset.id = old.id;           INSERT INTO stem_x_offset (id, val) WITH stem_direction_to_stem_x_offset AS  (SELECT stem_direction.id AS id, CASE WHEN (stem_direction.val > 0) THEN rhythmic_head_width.val ELSE 0.0 END AS val  FROM stem_direction, rhythmic_head_width  WHERE stem_direction.id = rhythmic_head_width.id AND stem_direction.id = old.id)  SELECT stem_direction_to_stem_x_offset.id, stem_direction_to_stem_x_offset.val  FROM stem_direction_to_stem_x_offset;       END;     CREATE TRIGGER stem_direction_delete_del_stem_x_offset_ins_stem_x_offset_Mfgl AFTER DELETE ON stem_direction        BEGIN                      DELETE FROM stem_x_offset WHERE stem_x_offset.id = old.id;           INSERT INTO stem_x_offset (id, val) WITH stem_direction_to_stem_x_offset AS  (SELECT stem_direction.id AS id, CASE WHEN (stem_direction.val > 0) THEN rhythmic_head_width.val ELSE 0.0 END AS val  FROM stem_direction, rhythmic_head_width  WHERE stem_direction.id = rhythmic_head_width.id AND stem_direction.id = old.id)  SELECT stem_direction_to_stem_x_offset.id, stem_direction_to_stem_x_offset.val  FROM stem_direction_to_stem_x_offset;       END;     CREATE TRIGGER stem_direction_insert_del_natural_stem_end_ins_natural_stem_end_XSvn AFTER INSERT ON stem_direction        BEGIN                      DELETE FROM natural_stem_end WHERE natural_stem_end.id = new.id;           INSERT INTO natural_stem_end (id, val) WITH stem_to_natural_stem_end AS  (SELECT stem_direction.id AS id, stem_direction.val * stem_length.val AS val  FROM stem_direction, stem_length  WHERE stem_length.id = stem_direction.id AND stem_direction.id = new.id)  SELECT stem_to_natural_stem_end.id, stem_to_natural_stem_end.val  FROM stem_to_natural_stem_end;       END;     CREATE TRIGGER stem_length_insert_del_natural_stem_end_ins_natural_stem_end_WxIt AFTER INSERT ON stem_length        BEGIN                      DELETE FROM natural_stem_end WHERE natural_stem_end.id = new.id;           INSERT INTO natural_stem_end (id, val) WITH stem_to_natural_stem_end AS  (SELECT stem_direction.id AS id, stem_direction.val * stem_length.val AS val  FROM stem_direction, stem_length  WHERE stem_length.id = stem_direction.id AND stem_direction.id = new.id)  SELECT stem_to_natural_stem_end.id, stem_to_natural_stem_end.val  FROM stem_to_natural_stem_end;       END;     CREATE TRIGGER stem_direction_update_del_natural_stem_end_ins_natural_stem_end_VVTi AFTER UPDATE ON stem_direction        BEGIN                      DELETE FROM natural_stem_end WHERE natural_stem_end.id = new.id;           INSERT INTO natural_stem_end (id, val) WITH stem_to_natural_stem_end AS  (SELECT stem_direction.id AS id, stem_direction.val * stem_length.val AS val  FROM stem_direction, stem_length  WHERE stem_length.id = stem_direction.id AND stem_direction.id = new.id)  SELECT stem_to_natural_stem_end.id, stem_to_natural_stem_end.val  FROM stem_to_natural_stem_end;       END;     CREATE TRIGGER stem_length_update_del_natural_stem_end_ins_natural_stem_end_KPlW AFTER UPDATE ON stem_length        BEGIN                      DELETE FROM natural_stem_end WHERE natural_stem_end.id = new.id;           INSERT INTO natural_stem_end (id, val) WITH stem_to_natural_stem_end AS  (SELECT stem_direction.id AS id, stem_direction.val * stem_length.val AS val  FROM stem_direction, stem_length  WHERE stem_length.id = stem_direction.id AND stem_direction.id = new.id)  SELECT stem_to_natural_stem_end.id, stem_to_natural_stem_end.val  FROM stem_to_natural_stem_end;       END;     CREATE TRIGGER stem_direction_delete_del_natural_stem_end_ins_natural_stem_end_Vopr AFTER DELETE ON stem_direction        BEGIN                      DELETE FROM natural_stem_end WHERE natural_stem_end.id = old.id;           INSERT INTO natural_stem_end (id, val) WITH stem_to_natural_stem_end AS  (SELECT stem_direction.id AS id, stem_direction.val * stem_length.val AS val  FROM stem_direction, stem_length  WHERE stem_length.id = stem_direction.id AND stem_direction.id = old.id)  SELECT stem_to_natural_stem_end.id, stem_to_natural_stem_end.val  FROM stem_to_natural_stem_end;       END;     CREATE TRIGGER stem_length_delete_del_natural_stem_end_ins_natural_stem_end_NKVb AFTER DELETE ON stem_length        BEGIN                      DELETE FROM natural_stem_end WHERE natural_stem_end.id = old.id;           INSERT INTO natural_stem_end (id, val) WITH stem_to_natural_stem_end AS  (SELECT stem_direction.id AS id, stem_direction.val * stem_length.val AS val  FROM stem_direction, stem_length  WHERE stem_length.id = stem_direction.id AND stem_direction.id = old.id)  SELECT stem_to_natural_stem_end.id, stem_to_natural_stem_end.val  FROM stem_to_natural_stem_end;       END;     CREATE TRIGGER natural_stem_end_insert_del_stem_end_ins_stem_end_Pquh AFTER INSERT ON natural_stem_end        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = new.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = new.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER beam_insert_del_stem_end_ins_stem_end_MxRi AFTER INSERT ON beam        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = new.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = new.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER stem_x_offset_insert_del_stem_end_ins_stem_end_HFpd AFTER INSERT ON stem_x_offset        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = new.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = new.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER x_position_insert_del_stem_end_ins_stem_end_Ypcl AFTER INSERT ON x_position        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = new.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = new.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER staff_position_insert_del_stem_end_ins_stem_end_YayG AFTER INSERT ON staff_position        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = new.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = new.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER natural_stem_end_update_del_stem_end_ins_stem_end_LshL AFTER UPDATE ON natural_stem_end        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = new.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = new.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER beam_update_del_stem_end_ins_stem_end_HuFh AFTER UPDATE ON beam        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = new.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = new.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER stem_x_offset_update_del_stem_end_ins_stem_end_XKHP AFTER UPDATE ON stem_x_offset        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = new.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = new.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER x_position_update_del_stem_end_ins_stem_end_TEir AFTER UPDATE ON x_position        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = new.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = new.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER staff_position_update_del_stem_end_ins_stem_end_XxBf AFTER UPDATE ON staff_position        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = new.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = new.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER natural_stem_end_delete_del_stem_end_ins_stem_end_Zpbp AFTER DELETE ON natural_stem_end        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = old.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = old.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = old.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER beam_delete_del_stem_end_ins_stem_end_ZsTS AFTER DELETE ON beam        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = old.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = old.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = old.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER stem_x_offset_delete_del_stem_end_ins_stem_end_DvrU AFTER DELETE ON stem_x_offset        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = old.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = old.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = old.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER x_position_delete_del_stem_end_ins_stem_end_DKoX AFTER DELETE ON x_position        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = old.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = old.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = old.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER staff_position_delete_del_stem_end_ins_stem_end_YcDg AFTER DELETE ON staff_position        BEGIN                      DELETE FROM stem_end WHERE stem_end.id = old.id;           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.id = old.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND natural_stem_end.id = old.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER beam_x_position_insert_del_stem_end_ins_stem_end_BDCK AFTER INSERT ON beam_x_position        BEGIN                      DELETE FROM stem_end WHERE EXISTS (SELECT beam.val  FROM beam  WHERE stem_end.id = beam.id AND beam.val = new.id);           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.val = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND beam.val = new.id AND natural_stem_end.id = beam.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER beam_y_position_insert_del_stem_end_ins_stem_end_BKoS AFTER INSERT ON beam_y_position        BEGIN                      DELETE FROM stem_end WHERE EXISTS (SELECT beam.val  FROM beam  WHERE stem_end.id = beam.id AND beam.val = new.id);           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.val = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND beam.val = new.id AND natural_stem_end.id = beam.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER beam_x_position_update_del_stem_end_ins_stem_end_RtBf AFTER UPDATE ON beam_x_position        BEGIN                      DELETE FROM stem_end WHERE EXISTS (SELECT beam.val  FROM beam  WHERE stem_end.id = beam.id AND beam.val = new.id);           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.val = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND beam.val = new.id AND natural_stem_end.id = beam.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER beam_y_position_update_del_stem_end_ins_stem_end_DvIv AFTER UPDATE ON beam_y_position        BEGIN                      DELETE FROM stem_end WHERE EXISTS (SELECT beam.val  FROM beam  WHERE stem_end.id = beam.id AND beam.val = new.id);           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.val = new.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND beam.val = new.id AND natural_stem_end.id = beam.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER beam_x_position_delete_del_stem_end_ins_stem_end_PrYd AFTER DELETE ON beam_x_position        BEGIN                      DELETE FROM stem_end WHERE EXISTS (SELECT beam.val  FROM beam  WHERE stem_end.id = beam.id AND beam.val = old.id);           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.val = old.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND beam.val = old.id AND natural_stem_end.id = beam.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER beam_y_position_delete_del_stem_end_ins_stem_end_EpLl AFTER DELETE ON beam_y_position        BEGIN                      DELETE FROM stem_end WHERE EXISTS (SELECT beam.val  FROM beam  WHERE stem_end.id = beam.id AND beam.val = old.id);           INSERT INTO stem_end (id, val) WITH my_beam AS  (SELECT min(beam.val) AS beam  FROM beam  WHERE beam.val = old.id),  slope AS  (SELECT my_beam.beam AS beam, (beam_y_position."right" - beam_y_position."left") / (beam_x_position."right" - beam_x_position."left") AS slope  FROM my_beam, beam_y_position, beam_x_position  WHERE beam_x_position.id = my_beam.beam AND beam_y_position.id = my_beam.beam),  slope_offset AS  (SELECT slope.beam AS beam, slope.slope AS slope, beam_y_position."left" - slope.slope * beam_x_position."left" AS "offset"  FROM slope, beam_y_position, beam_x_position  WHERE beam_y_position.id = slope.beam AND beam_x_position.id = slope.beam),  natural_stem_end_to_stem_end AS  (SELECT natural_stem_end.id AS id, CASE WHEN (slope_offset.slope IS NOT NULL) THEN (slope_offset.slope * (x_position.val + stem_x_offset.val) + slope_offset."offset") - staff_position.val ELSE natural_stem_end.val END AS val  FROM x_position, stem_x_offset, staff_position, natural_stem_end LEFT OUTER JOIN beam ON beam.id = natural_stem_end.id LEFT OUTER JOIN slope_offset ON beam.val = slope_offset.beam  WHERE natural_stem_end.id = x_position.id AND staff_position.id = x_position.id AND natural_stem_end.id = stem_x_offset.id AND beam.val = old.id AND natural_stem_end.id = beam.id)  SELECT natural_stem_end_to_stem_end.id, natural_stem_end_to_stem_end.val  FROM natural_stem_end_to_stem_end;       END;     CREATE TRIGGER stem_direction_insert_del_beam_x_position_ins_beam_x_position_RJzr AFTER INSERT ON stem_direction WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = new.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER natural_stem_end_insert_del_beam_x_position_ins_beam_x_position_Asrp AFTER INSERT ON natural_stem_end WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = new.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER beam_insert_del_beam_x_position_ins_beam_x_position_SiZF AFTER INSERT ON beam WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = new.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER x_position_insert_del_beam_x_position_ins_beam_x_position_SNeM AFTER INSERT ON x_position WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = new.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER stem_x_offset_insert_del_beam_x_position_ins_beam_x_position_EHrc AFTER INSERT ON stem_x_offset WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = new.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER stem_direction_update_del_beam_x_position_ins_beam_x_position_IlQa AFTER UPDATE ON stem_direction WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = new.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER natural_stem_end_update_del_beam_x_position_ins_beam_x_position_PShZ AFTER UPDATE ON natural_stem_end WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = new.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER beam_update_del_beam_x_position_ins_beam_x_position_VBIK AFTER UPDATE ON beam WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = new.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER x_position_update_del_beam_x_position_ins_beam_x_position_VhvK AFTER UPDATE ON x_position WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = new.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER stem_x_offset_update_del_beam_x_position_ins_beam_x_position_QogH AFTER UPDATE ON stem_x_offset WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = new.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER stem_direction_delete_del_beam_x_position_ins_beam_x_position_Kwex AFTER DELETE ON stem_direction WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = old.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = old.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = old.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER natural_stem_end_delete_del_beam_x_position_ins_beam_x_position_Efkq AFTER DELETE ON natural_stem_end WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = old.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = old.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = old.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER beam_delete_del_beam_x_position_ins_beam_x_position_LUBy AFTER DELETE ON beam WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = old.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = old.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = old.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER x_position_delete_del_beam_x_position_ins_beam_x_position_VOmB AFTER DELETE ON x_position WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = old.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = old.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = old.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER stem_x_offset_delete_del_beam_x_position_ins_beam_x_position_FMbx AFTER DELETE ON stem_x_offset WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_x_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_x_position.id = beam.val AND beam.id = old.id);           INSERT INTO beam_x_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = old.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  beam_x_position_for_beams AS  (SELECT beam.val AS id, left_right_x."left" AS "left", left_right_x."right" AS "right"  FROM beam, left_right_x  WHERE beam.id = old.id)  SELECT beam_x_position_for_beams.id, beam_x_position_for_beams."left", beam_x_position_for_beams."right"  FROM beam_x_position_for_beams;       END;     CREATE TRIGGER natural_stem_end_insert_del_beam_y_position_ins_beam_y_position_YzKe AFTER INSERT ON natural_stem_end WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_y_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_y_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_y_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  end_with_staff_position AS  (SELECT others_beamed_with_me.id AS id, natural_stem_end.val + staff_position.val AS val  FROM others_beamed_with_me, natural_stem_end, staff_position  WHERE others_beamed_with_me.id = natural_stem_end.id AND others_beamed_with_me.id = staff_position.id),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  left_right_y AS  (SELECT end_with_staff_position_left.val AS "left", end_with_staff_position_right.val AS "right"  FROM end_with_staff_position AS end_with_staff_position_left, end_with_staff_position AS end_with_staff_position_right, stem_x_positions AS stem_x_positions_left, left_right_x, stem_x_positions AS stem_x_positions_right  WHERE end_with_staff_position_left.id = stem_x_positions_left.id AND stem_x_positions_left.val = left_right_x."left" AND end_with_staff_position_right.id = stem_x_positions_right.id AND stem_x_positions_right.val = left_right_x."right"),  slope AS  (SELECT (left_right_y."right" - left_right_y."left") / (left_right_x."right" - left_right_x."left") AS slope  FROM left_right_y, left_right_x),  slope_offset AS  (SELECT slope.slope AS slope, left_right_y."left" - slope.slope * left_right_x."left" AS "offset"  FROM slope, left_right_y, left_right_x),  end_according_to_slope_offset AS  (SELECT stem_x_positions.id AS id, stem_x_positions.val * slope_offset.slope + slope_offset."offset" AS val  FROM stem_x_positions, slope_offset),  gap_with_end AS  (SELECT end_according_to_slope_offset.id AS id, (end_according_to_slope_offset.val - end_with_staff_position.val) * stem_direction.val AS val  FROM end_according_to_slope_offset, end_with_staff_position, stem_direction  WHERE stem_direction.id = end_with_staff_position.id AND end_with_staff_position.id = end_according_to_slope_offset.id),  biggest_acceptable_gap_candidates AS  (SELECT min(gap_with_end.val + 1.5) AS gap  FROM gap_with_end UNION SELECT 0.0 AS gap),  biggest_acceptable_gap AS  (SELECT min(biggest_acceptable_gap_candidates.gap) AS gap  FROM biggest_acceptable_gap_candidates),  beam_y_position_for_beams AS  (SELECT beam.val AS id, left_right_y."left" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "left", left_right_y."right" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "right"  FROM beam, left_right_y, biggest_acceptable_gap, stem_direction  WHERE beam.id = new.id AND stem_direction.id = beam.id AND biggest_acceptable_gap.gap IS NOT NULL)  SELECT beam_y_position_for_beams.id, beam_y_position_for_beams."left", beam_y_position_for_beams."right"  FROM beam_y_position_for_beams;       END;     CREATE TRIGGER beam_insert_del_beam_y_position_ins_beam_y_position_GIvm AFTER INSERT ON beam WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_y_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_y_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_y_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  end_with_staff_position AS  (SELECT others_beamed_with_me.id AS id, natural_stem_end.val + staff_position.val AS val  FROM others_beamed_with_me, natural_stem_end, staff_position  WHERE others_beamed_with_me.id = natural_stem_end.id AND others_beamed_with_me.id = staff_position.id),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  left_right_y AS  (SELECT end_with_staff_position_left.val AS "left", end_with_staff_position_right.val AS "right"  FROM end_with_staff_position AS end_with_staff_position_left, end_with_staff_position AS end_with_staff_position_right, stem_x_positions AS stem_x_positions_left, left_right_x, stem_x_positions AS stem_x_positions_right  WHERE end_with_staff_position_left.id = stem_x_positions_left.id AND stem_x_positions_left.val = left_right_x."left" AND end_with_staff_position_right.id = stem_x_positions_right.id AND stem_x_positions_right.val = left_right_x."right"),  slope AS  (SELECT (left_right_y."right" - left_right_y."left") / (left_right_x."right" - left_right_x."left") AS slope  FROM left_right_y, left_right_x),  slope_offset AS  (SELECT slope.slope AS slope, left_right_y."left" - slope.slope * left_right_x."left" AS "offset"  FROM slope, left_right_y, left_right_x),  end_according_to_slope_offset AS  (SELECT stem_x_positions.id AS id, stem_x_positions.val * slope_offset.slope + slope_offset."offset" AS val  FROM stem_x_positions, slope_offset),  gap_with_end AS  (SELECT end_according_to_slope_offset.id AS id, (end_according_to_slope_offset.val - end_with_staff_position.val) * stem_direction.val AS val  FROM end_according_to_slope_offset, end_with_staff_position, stem_direction  WHERE stem_direction.id = end_with_staff_position.id AND end_with_staff_position.id = end_according_to_slope_offset.id),  biggest_acceptable_gap_candidates AS  (SELECT min(gap_with_end.val + 1.5) AS gap  FROM gap_with_end UNION SELECT 0.0 AS gap),  biggest_acceptable_gap AS  (SELECT min(biggest_acceptable_gap_candidates.gap) AS gap  FROM biggest_acceptable_gap_candidates),  beam_y_position_for_beams AS  (SELECT beam.val AS id, left_right_y."left" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "left", left_right_y."right" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "right"  FROM beam, left_right_y, biggest_acceptable_gap, stem_direction  WHERE beam.id = new.id AND stem_direction.id = beam.id AND biggest_acceptable_gap.gap IS NOT NULL)  SELECT beam_y_position_for_beams.id, beam_y_position_for_beams."left", beam_y_position_for_beams."right"  FROM beam_y_position_for_beams;       END;     CREATE TRIGGER x_position_insert_del_beam_y_position_ins_beam_y_position_SdCb AFTER INSERT ON x_position WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_y_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_y_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_y_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  end_with_staff_position AS  (SELECT others_beamed_with_me.id AS id, natural_stem_end.val + staff_position.val AS val  FROM others_beamed_with_me, natural_stem_end, staff_position  WHERE others_beamed_with_me.id = natural_stem_end.id AND others_beamed_with_me.id = staff_position.id),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  left_right_y AS  (SELECT end_with_staff_position_left.val AS "left", end_with_staff_position_right.val AS "right"  FROM end_with_staff_position AS end_with_staff_position_left, end_with_staff_position AS end_with_staff_position_right, stem_x_positions AS stem_x_positions_left, left_right_x, stem_x_positions AS stem_x_positions_right  WHERE end_with_staff_position_left.id = stem_x_positions_left.id AND stem_x_positions_left.val = left_right_x."left" AND end_with_staff_position_right.id = stem_x_positions_right.id AND stem_x_positions_right.val = left_right_x."right"),  slope AS  (SELECT (left_right_y."right" - left_right_y."left") / (left_right_x."right" - left_right_x."left") AS slope  FROM left_right_y, left_right_x),  slope_offset AS  (SELECT slope.slope AS slope, left_right_y."left" - slope.slope * left_right_x."left" AS "offset"  FROM slope, left_right_y, left_right_x),  end_according_to_slope_offset AS  (SELECT stem_x_positions.id AS id, stem_x_positions.val * slope_offset.slope + slope_offset."offset" AS val  FROM stem_x_positions, slope_offset),  gap_with_end AS  (SELECT end_according_to_slope_offset.id AS id, (end_according_to_slope_offset.val - end_with_staff_position.val) * stem_direction.val AS val  FROM end_according_to_slope_offset, end_with_staff_position, stem_direction  WHERE stem_direction.id = end_with_staff_position.id AND end_with_staff_position.id = end_according_to_slope_offset.id),  biggest_acceptable_gap_candidates AS  (SELECT min(gap_with_end.val + 1.5) AS gap  FROM gap_with_end UNION SELECT 0.0 AS gap),  biggest_acceptable_gap AS  (SELECT min(biggest_acceptable_gap_candidates.gap) AS gap  FROM biggest_acceptable_gap_candidates),  beam_y_position_for_beams AS  (SELECT beam.val AS id, left_right_y."left" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "left", left_right_y."right" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "right"  FROM beam, left_right_y, biggest_acceptable_gap, stem_direction  WHERE beam.id = new.id AND stem_direction.id = beam.id AND biggest_acceptable_gap.gap IS NOT NULL)  SELECT beam_y_position_for_beams.id, beam_y_position_for_beams."left", beam_y_position_for_beams."right"  FROM beam_y_position_for_beams;       END;     CREATE TRIGGER stem_x_offset_insert_del_beam_y_position_ins_beam_y_position_YVgp AFTER INSERT ON stem_x_offset WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_y_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_y_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_y_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  end_with_staff_position AS  (SELECT others_beamed_with_me.id AS id, natural_stem_end.val + staff_position.val AS val  FROM others_beamed_with_me, natural_stem_end, staff_position  WHERE others_beamed_with_me.id = natural_stem_end.id AND others_beamed_with_me.id = staff_position.id),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  left_right_y AS  (SELECT end_with_staff_position_left.val AS "left", end_with_staff_position_right.val AS "right"  FROM end_with_staff_position AS end_with_staff_position_left, end_with_staff_position AS end_with_staff_position_right, stem_x_positions AS stem_x_positions_left, left_right_x, stem_x_positions AS stem_x_positions_right  WHERE end_with_staff_position_left.id = stem_x_positions_left.id AND stem_x_positions_left.val = left_right_x."left" AND end_with_staff_position_right.id = stem_x_positions_right.id AND stem_x_positions_right.val = left_right_x."right"),  slope AS  (SELECT (left_right_y."right" - left_right_y."left") / (left_right_x."right" - left_right_x."left") AS slope  FROM left_right_y, left_right_x),  slope_offset AS  (SELECT slope.slope AS slope, left_right_y."left" - slope.slope * left_right_x."left" AS "offset"  FROM slope, left_right_y, left_right_x),  end_according_to_slope_offset AS  (SELECT stem_x_positions.id AS id, stem_x_positions.val * slope_offset.slope + slope_offset."offset" AS val  FROM stem_x_positions, slope_offset),  gap_with_end AS  (SELECT end_according_to_slope_offset.id AS id, (end_according_to_slope_offset.val - end_with_staff_position.val) * stem_direction.val AS val  FROM end_according_to_slope_offset, end_with_staff_position, stem_direction  WHERE stem_direction.id = end_with_staff_position.id AND end_with_staff_position.id = end_according_to_slope_offset.id),  biggest_acceptable_gap_candidates AS  (SELECT min(gap_with_end.val + 1.5) AS gap  FROM gap_with_end UNION SELECT 0.0 AS gap),  biggest_acceptable_gap AS  (SELECT min(biggest_acceptable_gap_candidates.gap) AS gap  FROM biggest_acceptable_gap_candidates),  beam_y_position_for_beams AS  (SELECT beam.val AS id, left_right_y."left" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "left", left_right_y."right" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "right"  FROM beam, left_right_y, biggest_acceptable_gap, stem_direction  WHERE beam.id = new.id AND stem_direction.id = beam.id AND biggest_acceptable_gap.gap IS NOT NULL)  SELECT beam_y_position_for_beams.id, beam_y_position_for_beams."left", beam_y_position_for_beams."right"  FROM beam_y_position_for_beams;       END;     CREATE TRIGGER natural_stem_end_update_del_beam_y_position_ins_beam_y_position_UrGm AFTER UPDATE ON natural_stem_end WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_y_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_y_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_y_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  end_with_staff_position AS  (SELECT others_beamed_with_me.id AS id, natural_stem_end.val + staff_position.val AS val  FROM others_beamed_with_me, natural_stem_end, staff_position  WHERE others_beamed_with_me.id = natural_stem_end.id AND others_beamed_with_me.id = staff_position.id),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  left_right_y AS  (SELECT end_with_staff_position_left.val AS "left", end_with_staff_position_right.val AS "right"  FROM end_with_staff_position AS end_with_staff_position_left, end_with_staff_position AS end_with_staff_position_right, stem_x_positions AS stem_x_positions_left, left_right_x, stem_x_positions AS stem_x_positions_right  WHERE end_with_staff_position_left.id = stem_x_positions_left.id AND stem_x_positions_left.val = left_right_x."left" AND end_with_staff_position_right.id = stem_x_positions_right.id AND stem_x_positions_right.val = left_right_x."right"),  slope AS  (SELECT (left_right_y."right" - left_right_y."left") / (left_right_x."right" - left_right_x."left") AS slope  FROM left_right_y, left_right_x),  slope_offset AS  (SELECT slope.slope AS slope, left_right_y."left" - slope.slope * left_right_x."left" AS "offset"  FROM slope, left_right_y, left_right_x),  end_according_to_slope_offset AS  (SELECT stem_x_positions.id AS id, stem_x_positions.val * slope_offset.slope + slope_offset."offset" AS val  FROM stem_x_positions, slope_offset),  gap_with_end AS  (SELECT end_according_to_slope_offset.id AS id, (end_according_to_slope_offset.val - end_with_staff_position.val) * stem_direction.val AS val  FROM end_according_to_slope_offset, end_with_staff_position, stem_direction  WHERE stem_direction.id = end_with_staff_position.id AND end_with_staff_position.id = end_according_to_slope_offset.id),  biggest_acceptable_gap_candidates AS  (SELECT min(gap_with_end.val + 1.5) AS gap  FROM gap_with_end UNION SELECT 0.0 AS gap),  biggest_acceptable_gap AS  (SELECT min(biggest_acceptable_gap_candidates.gap) AS gap  FROM biggest_acceptable_gap_candidates),  beam_y_position_for_beams AS  (SELECT beam.val AS id, left_right_y."left" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "left", left_right_y."right" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "right"  FROM beam, left_right_y, biggest_acceptable_gap, stem_direction  WHERE beam.id = new.id AND stem_direction.id = beam.id AND biggest_acceptable_gap.gap IS NOT NULL)  SELECT beam_y_position_for_beams.id, beam_y_position_for_beams."left", beam_y_position_for_beams."right"  FROM beam_y_position_for_beams;       END;     CREATE TRIGGER beam_update_del_beam_y_position_ins_beam_y_position_TsCm AFTER UPDATE ON beam WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_y_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_y_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_y_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  end_with_staff_position AS  (SELECT others_beamed_with_me.id AS id, natural_stem_end.val + staff_position.val AS val  FROM others_beamed_with_me, natural_stem_end, staff_position  WHERE others_beamed_with_me.id = natural_stem_end.id AND others_beamed_with_me.id = staff_position.id),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  left_right_y AS  (SELECT end_with_staff_position_left.val AS "left", end_with_staff_position_right.val AS "right"  FROM end_with_staff_position AS end_with_staff_position_left, end_with_staff_position AS end_with_staff_position_right, stem_x_positions AS stem_x_positions_left, left_right_x, stem_x_positions AS stem_x_positions_right  WHERE end_with_staff_position_left.id = stem_x_positions_left.id AND stem_x_positions_left.val = left_right_x."left" AND end_with_staff_position_right.id = stem_x_positions_right.id AND stem_x_positions_right.val = left_right_x."right"),  slope AS  (SELECT (left_right_y."right" - left_right_y."left") / (left_right_x."right" - left_right_x."left") AS slope  FROM left_right_y, left_right_x),  slope_offset AS  (SELECT slope.slope AS slope, left_right_y."left" - slope.slope * left_right_x."left" AS "offset"  FROM slope, left_right_y, left_right_x),  end_according_to_slope_offset AS  (SELECT stem_x_positions.id AS id, stem_x_positions.val * slope_offset.slope + slope_offset."offset" AS val  FROM stem_x_positions, slope_offset),  gap_with_end AS  (SELECT end_according_to_slope_offset.id AS id, (end_according_to_slope_offset.val - end_with_staff_position.val) * stem_direction.val AS val  FROM end_according_to_slope_offset, end_with_staff_position, stem_direction  WHERE stem_direction.id = end_with_staff_position.id AND end_with_staff_position.id = end_according_to_slope_offset.id),  biggest_acceptable_gap_candidates AS  (SELECT min(gap_with_end.val + 1.5) AS gap  FROM gap_with_end UNION SELECT 0.0 AS gap),  biggest_acceptable_gap AS  (SELECT min(biggest_acceptable_gap_candidates.gap) AS gap  FROM biggest_acceptable_gap_candidates),  beam_y_position_for_beams AS  (SELECT beam.val AS id, left_right_y."left" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "left", left_right_y."right" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "right"  FROM beam, left_right_y, biggest_acceptable_gap, stem_direction  WHERE beam.id = new.id AND stem_direction.id = beam.id AND biggest_acceptable_gap.gap IS NOT NULL)  SELECT beam_y_position_for_beams.id, beam_y_position_for_beams."left", beam_y_position_for_beams."right"  FROM beam_y_position_for_beams;       END;     CREATE TRIGGER x_position_update_del_beam_y_position_ins_beam_y_position_XqZA AFTER UPDATE ON x_position WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_y_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_y_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_y_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  end_with_staff_position AS  (SELECT others_beamed_with_me.id AS id, natural_stem_end.val + staff_position.val AS val  FROM others_beamed_with_me, natural_stem_end, staff_position  WHERE others_beamed_with_me.id = natural_stem_end.id AND others_beamed_with_me.id = staff_position.id),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  left_right_y AS  (SELECT end_with_staff_position_left.val AS "left", end_with_staff_position_right.val AS "right"  FROM end_with_staff_position AS end_with_staff_position_left, end_with_staff_position AS end_with_staff_position_right, stem_x_positions AS stem_x_positions_left, left_right_x, stem_x_positions AS stem_x_positions_right  WHERE end_with_staff_position_left.id = stem_x_positions_left.id AND stem_x_positions_left.val = left_right_x."left" AND end_with_staff_position_right.id = stem_x_positions_right.id AND stem_x_positions_right.val = left_right_x."right"),  slope AS  (SELECT (left_right_y."right" - left_right_y."left") / (left_right_x."right" - left_right_x."left") AS slope  FROM left_right_y, left_right_x),  slope_offset AS  (SELECT slope.slope AS slope, left_right_y."left" - slope.slope * left_right_x."left" AS "offset"  FROM slope, left_right_y, left_right_x),  end_according_to_slope_offset AS  (SELECT stem_x_positions.id AS id, stem_x_positions.val * slope_offset.slope + slope_offset."offset" AS val  FROM stem_x_positions, slope_offset),  gap_with_end AS  (SELECT end_according_to_slope_offset.id AS id, (end_according_to_slope_offset.val - end_with_staff_position.val) * stem_direction.val AS val  FROM end_according_to_slope_offset, end_with_staff_position, stem_direction  WHERE stem_direction.id = end_with_staff_position.id AND end_with_staff_position.id = end_according_to_slope_offset.id),  biggest_acceptable_gap_candidates AS  (SELECT min(gap_with_end.val + 1.5) AS gap  FROM gap_with_end UNION SELECT 0.0 AS gap),  biggest_acceptable_gap AS  (SELECT min(biggest_acceptable_gap_candidates.gap) AS gap  FROM biggest_acceptable_gap_candidates),  beam_y_position_for_beams AS  (SELECT beam.val AS id, left_right_y."left" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "left", left_right_y."right" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "right"  FROM beam, left_right_y, biggest_acceptable_gap, stem_direction  WHERE beam.id = new.id AND stem_direction.id = beam.id AND biggest_acceptable_gap.gap IS NOT NULL)  SELECT beam_y_position_for_beams.id, beam_y_position_for_beams."left", beam_y_position_for_beams."right"  FROM beam_y_position_for_beams;       END;     CREATE TRIGGER stem_x_offset_update_del_beam_y_position_ins_beam_y_position_SPmt AFTER UPDATE ON stem_x_offset WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_y_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_y_position.id = beam.val AND beam.id = new.id);           INSERT INTO beam_y_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = new.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  end_with_staff_position AS  (SELECT others_beamed_with_me.id AS id, natural_stem_end.val + staff_position.val AS val  FROM others_beamed_with_me, natural_stem_end, staff_position  WHERE others_beamed_with_me.id = natural_stem_end.id AND others_beamed_with_me.id = staff_position.id),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  left_right_y AS  (SELECT end_with_staff_position_left.val AS "left", end_with_staff_position_right.val AS "right"  FROM end_with_staff_position AS end_with_staff_position_left, end_with_staff_position AS end_with_staff_position_right, stem_x_positions AS stem_x_positions_left, left_right_x, stem_x_positions AS stem_x_positions_right  WHERE end_with_staff_position_left.id = stem_x_positions_left.id AND stem_x_positions_left.val = left_right_x."left" AND end_with_staff_position_right.id = stem_x_positions_right.id AND stem_x_positions_right.val = left_right_x."right"),  slope AS  (SELECT (left_right_y."right" - left_right_y."left") / (left_right_x."right" - left_right_x."left") AS slope  FROM left_right_y, left_right_x),  slope_offset AS  (SELECT slope.slope AS slope, left_right_y."left" - slope.slope * left_right_x."left" AS "offset"  FROM slope, left_right_y, left_right_x),  end_according_to_slope_offset AS  (SELECT stem_x_positions.id AS id, stem_x_positions.val * slope_offset.slope + slope_offset."offset" AS val  FROM stem_x_positions, slope_offset),  gap_with_end AS  (SELECT end_according_to_slope_offset.id AS id, (end_according_to_slope_offset.val - end_with_staff_position.val) * stem_direction.val AS val  FROM end_according_to_slope_offset, end_with_staff_position, stem_direction  WHERE stem_direction.id = end_with_staff_position.id AND end_with_staff_position.id = end_according_to_slope_offset.id),  biggest_acceptable_gap_candidates AS  (SELECT min(gap_with_end.val + 1.5) AS gap  FROM gap_with_end UNION SELECT 0.0 AS gap),  biggest_acceptable_gap AS  (SELECT min(biggest_acceptable_gap_candidates.gap) AS gap  FROM biggest_acceptable_gap_candidates),  beam_y_position_for_beams AS  (SELECT beam.val AS id, left_right_y."left" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "left", left_right_y."right" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "right"  FROM beam, left_right_y, biggest_acceptable_gap, stem_direction  WHERE beam.id = new.id AND stem_direction.id = beam.id AND biggest_acceptable_gap.gap IS NOT NULL)  SELECT beam_y_position_for_beams.id, beam_y_position_for_beams."left", beam_y_position_for_beams."right"  FROM beam_y_position_for_beams;       END;     CREATE TRIGGER natural_stem_end_delete_del_beam_y_position_ins_beam_y_position_ATIx AFTER DELETE ON natural_stem_end WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_y_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_y_position.id = beam.val AND beam.id = old.id);           INSERT INTO beam_y_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = old.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  end_with_staff_position AS  (SELECT others_beamed_with_me.id AS id, natural_stem_end.val + staff_position.val AS val  FROM others_beamed_with_me, natural_stem_end, staff_position  WHERE others_beamed_with_me.id = natural_stem_end.id AND others_beamed_with_me.id = staff_position.id),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  left_right_y AS  (SELECT end_with_staff_position_left.val AS "left", end_with_staff_position_right.val AS "right"  FROM end_with_staff_position AS end_with_staff_position_left, end_with_staff_position AS end_with_staff_position_right, stem_x_positions AS stem_x_positions_left, left_right_x, stem_x_positions AS stem_x_positions_right  WHERE end_with_staff_position_left.id = stem_x_positions_left.id AND stem_x_positions_left.val = left_right_x."left" AND end_with_staff_position_right.id = stem_x_positions_right.id AND stem_x_positions_right.val = left_right_x."right"),  slope AS  (SELECT (left_right_y."right" - left_right_y."left") / (left_right_x."right" - left_right_x."left") AS slope  FROM left_right_y, left_right_x),  slope_offset AS  (SELECT slope.slope AS slope, left_right_y."left" - slope.slope * left_right_x."left" AS "offset"  FROM slope, left_right_y, left_right_x),  end_according_to_slope_offset AS  (SELECT stem_x_positions.id AS id, stem_x_positions.val * slope_offset.slope + slope_offset."offset" AS val  FROM stem_x_positions, slope_offset),  gap_with_end AS  (SELECT end_according_to_slope_offset.id AS id, (end_according_to_slope_offset.val - end_with_staff_position.val) * stem_direction.val AS val  FROM end_according_to_slope_offset, end_with_staff_position, stem_direction  WHERE stem_direction.id = end_with_staff_position.id AND end_with_staff_position.id = end_according_to_slope_offset.id),  biggest_acceptable_gap_candidates AS  (SELECT min(gap_with_end.val + 1.5) AS gap  FROM gap_with_end UNION SELECT 0.0 AS gap),  biggest_acceptable_gap AS  (SELECT min(biggest_acceptable_gap_candidates.gap) AS gap  FROM biggest_acceptable_gap_candidates),  beam_y_position_for_beams AS  (SELECT beam.val AS id, left_right_y."left" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "left", left_right_y."right" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "right"  FROM beam, left_right_y, biggest_acceptable_gap, stem_direction  WHERE beam.id = old.id AND stem_direction.id = beam.id AND biggest_acceptable_gap.gap IS NOT NULL)  SELECT beam_y_position_for_beams.id, beam_y_position_for_beams."left", beam_y_position_for_beams."right"  FROM beam_y_position_for_beams;       END;     CREATE TRIGGER beam_delete_del_beam_y_position_ins_beam_y_position_IdAl AFTER DELETE ON beam WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_y_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_y_position.id = beam.val AND beam.id = old.id);           INSERT INTO beam_y_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = old.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  end_with_staff_position AS  (SELECT others_beamed_with_me.id AS id, natural_stem_end.val + staff_position.val AS val  FROM others_beamed_with_me, natural_stem_end, staff_position  WHERE others_beamed_with_me.id = natural_stem_end.id AND others_beamed_with_me.id = staff_position.id),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  left_right_y AS  (SELECT end_with_staff_position_left.val AS "left", end_with_staff_position_right.val AS "right"  FROM end_with_staff_position AS end_with_staff_position_left, end_with_staff_position AS end_with_staff_position_right, stem_x_positions AS stem_x_positions_left, left_right_x, stem_x_positions AS stem_x_positions_right  WHERE end_with_staff_position_left.id = stem_x_positions_left.id AND stem_x_positions_left.val = left_right_x."left" AND end_with_staff_position_right.id = stem_x_positions_right.id AND stem_x_positions_right.val = left_right_x."right"),  slope AS  (SELECT (left_right_y."right" - left_right_y."left") / (left_right_x."right" - left_right_x."left") AS slope  FROM left_right_y, left_right_x),  slope_offset AS  (SELECT slope.slope AS slope, left_right_y."left" - slope.slope * left_right_x."left" AS "offset"  FROM slope, left_right_y, left_right_x),  end_according_to_slope_offset AS  (SELECT stem_x_positions.id AS id, stem_x_positions.val * slope_offset.slope + slope_offset."offset" AS val  FROM stem_x_positions, slope_offset),  gap_with_end AS  (SELECT end_according_to_slope_offset.id AS id, (end_according_to_slope_offset.val - end_with_staff_position.val) * stem_direction.val AS val  FROM end_according_to_slope_offset, end_with_staff_position, stem_direction  WHERE stem_direction.id = end_with_staff_position.id AND end_with_staff_position.id = end_according_to_slope_offset.id),  biggest_acceptable_gap_candidates AS  (SELECT min(gap_with_end.val + 1.5) AS gap  FROM gap_with_end UNION SELECT 0.0 AS gap),  biggest_acceptable_gap AS  (SELECT min(biggest_acceptable_gap_candidates.gap) AS gap  FROM biggest_acceptable_gap_candidates),  beam_y_position_for_beams AS  (SELECT beam.val AS id, left_right_y."left" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "left", left_right_y."right" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "right"  FROM beam, left_right_y, biggest_acceptable_gap, stem_direction  WHERE beam.id = old.id AND stem_direction.id = beam.id AND biggest_acceptable_gap.gap IS NOT NULL)  SELECT beam_y_position_for_beams.id, beam_y_position_for_beams."left", beam_y_position_for_beams."right"  FROM beam_y_position_for_beams;       END;     CREATE TRIGGER x_position_delete_del_beam_y_position_ins_beam_y_position_DAua AFTER DELETE ON x_position WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_y_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_y_position.id = beam.val AND beam.id = old.id);           INSERT INTO beam_y_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = old.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  end_with_staff_position AS  (SELECT others_beamed_with_me.id AS id, natural_stem_end.val + staff_position.val AS val  FROM others_beamed_with_me, natural_stem_end, staff_position  WHERE others_beamed_with_me.id = natural_stem_end.id AND others_beamed_with_me.id = staff_position.id),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  left_right_y AS  (SELECT end_with_staff_position_left.val AS "left", end_with_staff_position_right.val AS "right"  FROM end_with_staff_position AS end_with_staff_position_left, end_with_staff_position AS end_with_staff_position_right, stem_x_positions AS stem_x_positions_left, left_right_x, stem_x_positions AS stem_x_positions_right  WHERE end_with_staff_position_left.id = stem_x_positions_left.id AND stem_x_positions_left.val = left_right_x."left" AND end_with_staff_position_right.id = stem_x_positions_right.id AND stem_x_positions_right.val = left_right_x."right"),  slope AS  (SELECT (left_right_y."right" - left_right_y."left") / (left_right_x."right" - left_right_x."left") AS slope  FROM left_right_y, left_right_x),  slope_offset AS  (SELECT slope.slope AS slope, left_right_y."left" - slope.slope * left_right_x."left" AS "offset"  FROM slope, left_right_y, left_right_x),  end_according_to_slope_offset AS  (SELECT stem_x_positions.id AS id, stem_x_positions.val * slope_offset.slope + slope_offset."offset" AS val  FROM stem_x_positions, slope_offset),  gap_with_end AS  (SELECT end_according_to_slope_offset.id AS id, (end_according_to_slope_offset.val - end_with_staff_position.val) * stem_direction.val AS val  FROM end_according_to_slope_offset, end_with_staff_position, stem_direction  WHERE stem_direction.id = end_with_staff_position.id AND end_with_staff_position.id = end_according_to_slope_offset.id),  biggest_acceptable_gap_candidates AS  (SELECT min(gap_with_end.val + 1.5) AS gap  FROM gap_with_end UNION SELECT 0.0 AS gap),  biggest_acceptable_gap AS  (SELECT min(biggest_acceptable_gap_candidates.gap) AS gap  FROM biggest_acceptable_gap_candidates),  beam_y_position_for_beams AS  (SELECT beam.val AS id, left_right_y."left" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "left", left_right_y."right" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "right"  FROM beam, left_right_y, biggest_acceptable_gap, stem_direction  WHERE beam.id = old.id AND stem_direction.id = beam.id AND biggest_acceptable_gap.gap IS NOT NULL)  SELECT beam_y_position_for_beams.id, beam_y_position_for_beams."left", beam_y_position_for_beams."right"  FROM beam_y_position_for_beams;       END;     CREATE TRIGGER stem_x_offset_delete_del_beam_y_position_ins_beam_y_position_ZASc AFTER DELETE ON stem_x_offset WHEN (EXISTS (SELECT beam.id  FROM beam JOIN stem_direction ON beam.id = stem_direction.id JOIN natural_stem_end ON beam.id = natural_stem_end.id JOIN x_position ON beam.id = x_position.id JOIN stem_x_offset ON beam.id = stem_x_offset.id JOIN staff_position ON beam.id = staff_position.id))       BEGIN                      DELETE FROM beam_y_position WHERE EXISTS (SELECT beam.id  FROM beam  WHERE beam_y_position.id = beam.val AND beam.id = old.id);           INSERT INTO beam_y_position (id, "left", "right") WITH my_beam AS  (SELECT beam.val AS beam  FROM beam  WHERE beam.id = old.id),  others_beamed_with_me AS  (SELECT beam.id AS id, beam.val AS val  FROM beam, my_beam  WHERE beam.val = my_beam.beam),  end_with_staff_position AS  (SELECT others_beamed_with_me.id AS id, natural_stem_end.val + staff_position.val AS val  FROM others_beamed_with_me, natural_stem_end, staff_position  WHERE others_beamed_with_me.id = natural_stem_end.id AND others_beamed_with_me.id = staff_position.id),  stem_x_positions AS  (SELECT others_beamed_with_me.id AS id, x_position.val + stem_x_offset.val AS val  FROM others_beamed_with_me, x_position, stem_x_offset  WHERE x_position.id = others_beamed_with_me.id AND stem_x_offset.id = others_beamed_with_me.id),  left_right_x__ AS  (SELECT min(stem_x_positions.val) AS "left", max(stem_x_positions.val) AS "right"  FROM stem_x_positions),  left_right_x AS  (SELECT left_right_x__."left" AS "left", left_right_x__."right" AS "right"  FROM left_right_x__  WHERE left_right_x__."left" IS NOT NULL),  left_right_y AS  (SELECT end_with_staff_position_left.val AS "left", end_with_staff_position_right.val AS "right"  FROM end_with_staff_position AS end_with_staff_position_left, end_with_staff_position AS end_with_staff_position_right, stem_x_positions AS stem_x_positions_left, left_right_x, stem_x_positions AS stem_x_positions_right  WHERE end_with_staff_position_left.id = stem_x_positions_left.id AND stem_x_positions_left.val = left_right_x."left" AND end_with_staff_position_right.id = stem_x_positions_right.id AND stem_x_positions_right.val = left_right_x."right"),  slope AS  (SELECT (left_right_y."right" - left_right_y."left") / (left_right_x."right" - left_right_x."left") AS slope  FROM left_right_y, left_right_x),  slope_offset AS  (SELECT slope.slope AS slope, left_right_y."left" - slope.slope * left_right_x."left" AS "offset"  FROM slope, left_right_y, left_right_x),  end_according_to_slope_offset AS  (SELECT stem_x_positions.id AS id, stem_x_positions.val * slope_offset.slope + slope_offset."offset" AS val  FROM stem_x_positions, slope_offset),  gap_with_end AS  (SELECT end_according_to_slope_offset.id AS id, (end_according_to_slope_offset.val - end_with_staff_position.val) * stem_direction.val AS val  FROM end_according_to_slope_offset, end_with_staff_position, stem_direction  WHERE stem_direction.id = end_with_staff_position.id AND end_with_staff_position.id = end_according_to_slope_offset.id),  biggest_acceptable_gap_candidates AS  (SELECT min(gap_with_end.val + 1.5) AS gap  FROM gap_with_end UNION SELECT 0.0 AS gap),  biggest_acceptable_gap AS  (SELECT min(biggest_acceptable_gap_candidates.gap) AS gap  FROM biggest_acceptable_gap_candidates),  beam_y_position_for_beams AS  (SELECT beam.val AS id, left_right_y."left" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "left", left_right_y."right" + biggest_acceptable_gap.gap * -1 * stem_direction.val AS "right"  FROM beam, left_right_y, biggest_acceptable_gap, stem_direction  WHERE beam.id = old.id AND stem_direction.id = beam.id AND biggest_acceptable_gap.gap IS NOT NULL)  SELECT beam_y_position_for_beams.id, beam_y_position_for_beams."left", beam_y_position_for_beams."right"  FROM beam_y_position_for_beams;       END;     CREATE TRIGGER beam_x_position_insert_del_polygon_stencil_ins_polygon_stencil_SRuF AFTER INSERT ON beam_x_position WHEN (EXISTS (SELECT beam_x_position.id  FROM beam_x_position JOIN beam_y_position ON beam_x_position.id = beam_y_position.id))       BEGIN                      DELETE FROM polygon_stencil WHERE polygon_stencil.id = new.id AND polygon_stencil.writer = \'beam_to_stencil\';           INSERT INTO polygon_stencil (id, writer, sub_id, point, x, y, thickness, fill, stroke) WITH RECURSIVE beam_direction AS  (SELECT min(stem_direction.val) AS val  FROM stem_direction, beam  WHERE beam.val = new.id AND beam.id = stem_direction.id),  beam_duration_log AS  (SELECT min(duration_log.val) AS val  FROM duration_log, beam  WHERE beam.val = new.id AND beam.id = duration_log.id),  beam_starting_points(id, sub_id, x, y) AS  (SELECT beam_x_position.id AS id, 0 AS sub_id, beam_x_position."left" AS x, beam_y_position."left" AS y  FROM beam_x_position, beam_y_position  WHERE beam_x_position.id = new.id AND beam_x_position.id = beam_y_position.id UNION ALL SELECT beam_starting_points_prev.id AS id, beam_starting_points_prev.sub_id + 1 AS anon_2, beam_starting_points_prev.x AS x, beam_starting_points_prev.y + beam_direction.val * (beam_starting_points_prev.sub_id + 1) * -0.75 AS anon_3  FROM beam_starting_points AS beam_starting_points_prev, beam_direction, beam_duration_log  WHERE beam_starting_points_prev.sub_id < (beam_duration_log.val * -1 - 2) - 1),  beam_polygons_1 AS  (SELECT beam_starting_points.id AS id, \'beam_to_stencil\' AS writer, beam_starting_points.sub_id AS sub_id, 0 AS point, beam_starting_points.x + 0.16 AS x, beam_starting_points.y AS y, 0 AS thickness, 1 AS fill, 0 AS stroke  FROM beam_starting_points),  beam_polygons_2 AS  (SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, beam_polygons_1.point AS point, beam_polygons_1.x AS x, beam_polygons_1.y AS y, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 1 AS anon_4, beam_polygons_1.x + 0.16 AS anon_5, beam_polygons_1.y - 0.5 AS anon_6, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1),  beam_polygons_3 AS  (SELECT beam_polygons_2.id AS id, beam_polygons_2.writer AS writer, beam_polygons_2.sub_id AS sub_id, beam_polygons_2.point AS point, beam_polygons_2.x AS x, beam_polygons_2.y AS y, beam_polygons_2.thickness AS thickness, beam_polygons_2.fill AS fill, beam_polygons_2.stroke AS stroke  FROM beam_polygons_2 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 2 AS anon_7, beam_x_position."right" + 0.1 + 0.16 AS anon_8, ((beam_polygons_1.y - beam_y_position."left") + beam_y_position."right") - 0.5 AS anon_9, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1, beam_x_position, beam_y_position  WHERE beam_x_position.id = beam_polygons_1.id AND beam_y_position.id = beam_polygons_1.id),  beam_polygons_4 AS  (SELECT beam_polygons_3.id AS id, beam_polygons_3.writer AS writer, beam_polygons_3.sub_id AS sub_id, beam_polygons_3.point AS point, beam_polygons_3.x AS x, beam_polygons_3.y AS y, beam_polygons_3.thickness AS thickness, beam_polygons_3.fill AS fill, beam_polygons_3.stroke AS stroke  FROM beam_polygons_3 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 3 AS anon_10, beam_x_position."right" + 0.1 + 0.16 AS anon_11, (beam_polygons_1.y - beam_y_position."left") + beam_y_position."right" AS anon_12, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1, beam_x_position, beam_y_position  WHERE beam_x_position.id = beam_polygons_1.id AND beam_y_position.id = beam_polygons_1.id),  beam_polygons_5 AS  (SELECT beam_polygons_4.id AS id, beam_polygons_4.writer AS writer, beam_polygons_4.sub_id AS sub_id, beam_polygons_4.point AS point, beam_polygons_4.x AS x, beam_polygons_4.y AS y, beam_polygons_4.thickness AS thickness, beam_polygons_4.fill AS fill, beam_polygons_4.stroke AS stroke  FROM beam_polygons_4 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 4 AS anon_13, beam_polygons_1.x + 0.16 AS anon_14, beam_polygons_1.y AS y, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1),  beam_polygons_kludgified_for_staff AS  (SELECT beam_polygons_5.id AS id, beam_polygons_5.writer AS writer, beam_polygons_5.sub_id AS sub_id, beam_polygons_5.point AS point, beam_polygons_5.x AS x, beam_polygons_5.y * -1.0 + 2.0 AS anon_1, beam_polygons_5.thickness AS thickness, beam_polygons_5.fill AS fill, beam_polygons_5.stroke AS stroke  FROM beam_polygons_5)  SELECT beam_polygons_kludgified_for_staff.id, beam_polygons_kludgified_for_staff.writer, beam_polygons_kludgified_for_staff.sub_id, beam_polygons_kludgified_for_staff.point, beam_polygons_kludgified_for_staff.x, beam_polygons_kludgified_for_staff.anon_1, beam_polygons_kludgified_for_staff.thickness, beam_polygons_kludgified_for_staff.fill, beam_polygons_kludgified_for_staff.stroke  FROM beam_polygons_kludgified_for_staff;       END;     CREATE TRIGGER beam_y_position_insert_del_polygon_stencil_ins_polygon_stencil_RwFa AFTER INSERT ON beam_y_position WHEN (EXISTS (SELECT beam_x_position.id  FROM beam_x_position JOIN beam_y_position ON beam_x_position.id = beam_y_position.id))       BEGIN                      DELETE FROM polygon_stencil WHERE polygon_stencil.id = new.id AND polygon_stencil.writer = \'beam_to_stencil\';           INSERT INTO polygon_stencil (id, writer, sub_id, point, x, y, thickness, fill, stroke) WITH RECURSIVE beam_direction AS  (SELECT min(stem_direction.val) AS val  FROM stem_direction, beam  WHERE beam.val = new.id AND beam.id = stem_direction.id),  beam_duration_log AS  (SELECT min(duration_log.val) AS val  FROM duration_log, beam  WHERE beam.val = new.id AND beam.id = duration_log.id),  beam_starting_points(id, sub_id, x, y) AS  (SELECT beam_x_position.id AS id, 0 AS sub_id, beam_x_position."left" AS x, beam_y_position."left" AS y  FROM beam_x_position, beam_y_position  WHERE beam_x_position.id = new.id AND beam_x_position.id = beam_y_position.id UNION ALL SELECT beam_starting_points_prev.id AS id, beam_starting_points_prev.sub_id + 1 AS anon_2, beam_starting_points_prev.x AS x, beam_starting_points_prev.y + beam_direction.val * (beam_starting_points_prev.sub_id + 1) * -0.75 AS anon_3  FROM beam_starting_points AS beam_starting_points_prev, beam_direction, beam_duration_log  WHERE beam_starting_points_prev.sub_id < (beam_duration_log.val * -1 - 2) - 1),  beam_polygons_1 AS  (SELECT beam_starting_points.id AS id, \'beam_to_stencil\' AS writer, beam_starting_points.sub_id AS sub_id, 0 AS point, beam_starting_points.x + 0.16 AS x, beam_starting_points.y AS y, 0 AS thickness, 1 AS fill, 0 AS stroke  FROM beam_starting_points),  beam_polygons_2 AS  (SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, beam_polygons_1.point AS point, beam_polygons_1.x AS x, beam_polygons_1.y AS y, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 1 AS anon_4, beam_polygons_1.x + 0.16 AS anon_5, beam_polygons_1.y - 0.5 AS anon_6, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1),  beam_polygons_3 AS  (SELECT beam_polygons_2.id AS id, beam_polygons_2.writer AS writer, beam_polygons_2.sub_id AS sub_id, beam_polygons_2.point AS point, beam_polygons_2.x AS x, beam_polygons_2.y AS y, beam_polygons_2.thickness AS thickness, beam_polygons_2.fill AS fill, beam_polygons_2.stroke AS stroke  FROM beam_polygons_2 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 2 AS anon_7, beam_x_position."right" + 0.1 + 0.16 AS anon_8, ((beam_polygons_1.y - beam_y_position."left") + beam_y_position."right") - 0.5 AS anon_9, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1, beam_x_position, beam_y_position  WHERE beam_x_position.id = beam_polygons_1.id AND beam_y_position.id = beam_polygons_1.id),  beam_polygons_4 AS  (SELECT beam_polygons_3.id AS id, beam_polygons_3.writer AS writer, beam_polygons_3.sub_id AS sub_id, beam_polygons_3.point AS point, beam_polygons_3.x AS x, beam_polygons_3.y AS y, beam_polygons_3.thickness AS thickness, beam_polygons_3.fill AS fill, beam_polygons_3.stroke AS stroke  FROM beam_polygons_3 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 3 AS anon_10, beam_x_position."right" + 0.1 + 0.16 AS anon_11, (beam_polygons_1.y - beam_y_position."left") + beam_y_position."right" AS anon_12, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1, beam_x_position, beam_y_position  WHERE beam_x_position.id = beam_polygons_1.id AND beam_y_position.id = beam_polygons_1.id),  beam_polygons_5 AS  (SELECT beam_polygons_4.id AS id, beam_polygons_4.writer AS writer, beam_polygons_4.sub_id AS sub_id, beam_polygons_4.point AS point, beam_polygons_4.x AS x, beam_polygons_4.y AS y, beam_polygons_4.thickness AS thickness, beam_polygons_4.fill AS fill, beam_polygons_4.stroke AS stroke  FROM beam_polygons_4 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 4 AS anon_13, beam_polygons_1.x + 0.16 AS anon_14, beam_polygons_1.y AS y, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1),  beam_polygons_kludgified_for_staff AS  (SELECT beam_polygons_5.id AS id, beam_polygons_5.writer AS writer, beam_polygons_5.sub_id AS sub_id, beam_polygons_5.point AS point, beam_polygons_5.x AS x, beam_polygons_5.y * -1.0 + 2.0 AS anon_1, beam_polygons_5.thickness AS thickness, beam_polygons_5.fill AS fill, beam_polygons_5.stroke AS stroke  FROM beam_polygons_5)  SELECT beam_polygons_kludgified_for_staff.id, beam_polygons_kludgified_for_staff.writer, beam_polygons_kludgified_for_staff.sub_id, beam_polygons_kludgified_for_staff.point, beam_polygons_kludgified_for_staff.x, beam_polygons_kludgified_for_staff.anon_1, beam_polygons_kludgified_for_staff.thickness, beam_polygons_kludgified_for_staff.fill, beam_polygons_kludgified_for_staff.stroke  FROM beam_polygons_kludgified_for_staff;       END;     CREATE TRIGGER beam_x_position_update_del_polygon_stencil_ins_polygon_stencil_CRIv AFTER UPDATE ON beam_x_position WHEN (EXISTS (SELECT beam_x_position.id  FROM beam_x_position JOIN beam_y_position ON beam_x_position.id = beam_y_position.id))       BEGIN                      DELETE FROM polygon_stencil WHERE polygon_stencil.id = new.id AND polygon_stencil.writer = \'beam_to_stencil\';           INSERT INTO polygon_stencil (id, writer, sub_id, point, x, y, thickness, fill, stroke) WITH RECURSIVE beam_direction AS  (SELECT min(stem_direction.val) AS val  FROM stem_direction, beam  WHERE beam.val = new.id AND beam.id = stem_direction.id),  beam_duration_log AS  (SELECT min(duration_log.val) AS val  FROM duration_log, beam  WHERE beam.val = new.id AND beam.id = duration_log.id),  beam_starting_points(id, sub_id, x, y) AS  (SELECT beam_x_position.id AS id, 0 AS sub_id, beam_x_position."left" AS x, beam_y_position."left" AS y  FROM beam_x_position, beam_y_position  WHERE beam_x_position.id = new.id AND beam_x_position.id = beam_y_position.id UNION ALL SELECT beam_starting_points_prev.id AS id, beam_starting_points_prev.sub_id + 1 AS anon_2, beam_starting_points_prev.x AS x, beam_starting_points_prev.y + beam_direction.val * (beam_starting_points_prev.sub_id + 1) * -0.75 AS anon_3  FROM beam_starting_points AS beam_starting_points_prev, beam_direction, beam_duration_log  WHERE beam_starting_points_prev.sub_id < (beam_duration_log.val * -1 - 2) - 1),  beam_polygons_1 AS  (SELECT beam_starting_points.id AS id, \'beam_to_stencil\' AS writer, beam_starting_points.sub_id AS sub_id, 0 AS point, beam_starting_points.x + 0.16 AS x, beam_starting_points.y AS y, 0 AS thickness, 1 AS fill, 0 AS stroke  FROM beam_starting_points),  beam_polygons_2 AS  (SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, beam_polygons_1.point AS point, beam_polygons_1.x AS x, beam_polygons_1.y AS y, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 1 AS anon_4, beam_polygons_1.x + 0.16 AS anon_5, beam_polygons_1.y - 0.5 AS anon_6, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1),  beam_polygons_3 AS  (SELECT beam_polygons_2.id AS id, beam_polygons_2.writer AS writer, beam_polygons_2.sub_id AS sub_id, beam_polygons_2.point AS point, beam_polygons_2.x AS x, beam_polygons_2.y AS y, beam_polygons_2.thickness AS thickness, beam_polygons_2.fill AS fill, beam_polygons_2.stroke AS stroke  FROM beam_polygons_2 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 2 AS anon_7, beam_x_position."right" + 0.1 + 0.16 AS anon_8, ((beam_polygons_1.y - beam_y_position."left") + beam_y_position."right") - 0.5 AS anon_9, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1, beam_x_position, beam_y_position  WHERE beam_x_position.id = beam_polygons_1.id AND beam_y_position.id = beam_polygons_1.id),  beam_polygons_4 AS  (SELECT beam_polygons_3.id AS id, beam_polygons_3.writer AS writer, beam_polygons_3.sub_id AS sub_id, beam_polygons_3.point AS point, beam_polygons_3.x AS x, beam_polygons_3.y AS y, beam_polygons_3.thickness AS thickness, beam_polygons_3.fill AS fill, beam_polygons_3.stroke AS stroke  FROM beam_polygons_3 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 3 AS anon_10, beam_x_position."right" + 0.1 + 0.16 AS anon_11, (beam_polygons_1.y - beam_y_position."left") + beam_y_position."right" AS anon_12, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1, beam_x_position, beam_y_position  WHERE beam_x_position.id = beam_polygons_1.id AND beam_y_position.id = beam_polygons_1.id),  beam_polygons_5 AS  (SELECT beam_polygons_4.id AS id, beam_polygons_4.writer AS writer, beam_polygons_4.sub_id AS sub_id, beam_polygons_4.point AS point, beam_polygons_4.x AS x, beam_polygons_4.y AS y, beam_polygons_4.thickness AS thickness, beam_polygons_4.fill AS fill, beam_polygons_4.stroke AS stroke  FROM beam_polygons_4 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 4 AS anon_13, beam_polygons_1.x + 0.16 AS anon_14, beam_polygons_1.y AS y, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1),  beam_polygons_kludgified_for_staff AS  (SELECT beam_polygons_5.id AS id, beam_polygons_5.writer AS writer, beam_polygons_5.sub_id AS sub_id, beam_polygons_5.point AS point, beam_polygons_5.x AS x, beam_polygons_5.y * -1.0 + 2.0 AS anon_1, beam_polygons_5.thickness AS thickness, beam_polygons_5.fill AS fill, beam_polygons_5.stroke AS stroke  FROM beam_polygons_5)  SELECT beam_polygons_kludgified_for_staff.id, beam_polygons_kludgified_for_staff.writer, beam_polygons_kludgified_for_staff.sub_id, beam_polygons_kludgified_for_staff.point, beam_polygons_kludgified_for_staff.x, beam_polygons_kludgified_for_staff.anon_1, beam_polygons_kludgified_for_staff.thickness, beam_polygons_kludgified_for_staff.fill, beam_polygons_kludgified_for_staff.stroke  FROM beam_polygons_kludgified_for_staff;       END;     CREATE TRIGGER beam_y_position_update_del_polygon_stencil_ins_polygon_stencil_UsLL AFTER UPDATE ON beam_y_position WHEN (EXISTS (SELECT beam_x_position.id  FROM beam_x_position JOIN beam_y_position ON beam_x_position.id = beam_y_position.id))       BEGIN                      DELETE FROM polygon_stencil WHERE polygon_stencil.id = new.id AND polygon_stencil.writer = \'beam_to_stencil\';           INSERT INTO polygon_stencil (id, writer, sub_id, point, x, y, thickness, fill, stroke) WITH RECURSIVE beam_direction AS  (SELECT min(stem_direction.val) AS val  FROM stem_direction, beam  WHERE beam.val = new.id AND beam.id = stem_direction.id),  beam_duration_log AS  (SELECT min(duration_log.val) AS val  FROM duration_log, beam  WHERE beam.val = new.id AND beam.id = duration_log.id),  beam_starting_points(id, sub_id, x, y) AS  (SELECT beam_x_position.id AS id, 0 AS sub_id, beam_x_position."left" AS x, beam_y_position."left" AS y  FROM beam_x_position, beam_y_position  WHERE beam_x_position.id = new.id AND beam_x_position.id = beam_y_position.id UNION ALL SELECT beam_starting_points_prev.id AS id, beam_starting_points_prev.sub_id + 1 AS anon_2, beam_starting_points_prev.x AS x, beam_starting_points_prev.y + beam_direction.val * (beam_starting_points_prev.sub_id + 1) * -0.75 AS anon_3  FROM beam_starting_points AS beam_starting_points_prev, beam_direction, beam_duration_log  WHERE beam_starting_points_prev.sub_id < (beam_duration_log.val * -1 - 2) - 1),  beam_polygons_1 AS  (SELECT beam_starting_points.id AS id, \'beam_to_stencil\' AS writer, beam_starting_points.sub_id AS sub_id, 0 AS point, beam_starting_points.x + 0.16 AS x, beam_starting_points.y AS y, 0 AS thickness, 1 AS fill, 0 AS stroke  FROM beam_starting_points),  beam_polygons_2 AS  (SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, beam_polygons_1.point AS point, beam_polygons_1.x AS x, beam_polygons_1.y AS y, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 1 AS anon_4, beam_polygons_1.x + 0.16 AS anon_5, beam_polygons_1.y - 0.5 AS anon_6, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1),  beam_polygons_3 AS  (SELECT beam_polygons_2.id AS id, beam_polygons_2.writer AS writer, beam_polygons_2.sub_id AS sub_id, beam_polygons_2.point AS point, beam_polygons_2.x AS x, beam_polygons_2.y AS y, beam_polygons_2.thickness AS thickness, beam_polygons_2.fill AS fill, beam_polygons_2.stroke AS stroke  FROM beam_polygons_2 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 2 AS anon_7, beam_x_position."right" + 0.1 + 0.16 AS anon_8, ((beam_polygons_1.y - beam_y_position."left") + beam_y_position."right") - 0.5 AS anon_9, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1, beam_x_position, beam_y_position  WHERE beam_x_position.id = beam_polygons_1.id AND beam_y_position.id = beam_polygons_1.id),  beam_polygons_4 AS  (SELECT beam_polygons_3.id AS id, beam_polygons_3.writer AS writer, beam_polygons_3.sub_id AS sub_id, beam_polygons_3.point AS point, beam_polygons_3.x AS x, beam_polygons_3.y AS y, beam_polygons_3.thickness AS thickness, beam_polygons_3.fill AS fill, beam_polygons_3.stroke AS stroke  FROM beam_polygons_3 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 3 AS anon_10, beam_x_position."right" + 0.1 + 0.16 AS anon_11, (beam_polygons_1.y - beam_y_position."left") + beam_y_position."right" AS anon_12, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1, beam_x_position, beam_y_position  WHERE beam_x_position.id = beam_polygons_1.id AND beam_y_position.id = beam_polygons_1.id),  beam_polygons_5 AS  (SELECT beam_polygons_4.id AS id, beam_polygons_4.writer AS writer, beam_polygons_4.sub_id AS sub_id, beam_polygons_4.point AS point, beam_polygons_4.x AS x, beam_polygons_4.y AS y, beam_polygons_4.thickness AS thickness, beam_polygons_4.fill AS fill, beam_polygons_4.stroke AS stroke  FROM beam_polygons_4 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 4 AS anon_13, beam_polygons_1.x + 0.16 AS anon_14, beam_polygons_1.y AS y, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1),  beam_polygons_kludgified_for_staff AS  (SELECT beam_polygons_5.id AS id, beam_polygons_5.writer AS writer, beam_polygons_5.sub_id AS sub_id, beam_polygons_5.point AS point, beam_polygons_5.x AS x, beam_polygons_5.y * -1.0 + 2.0 AS anon_1, beam_polygons_5.thickness AS thickness, beam_polygons_5.fill AS fill, beam_polygons_5.stroke AS stroke  FROM beam_polygons_5)  SELECT beam_polygons_kludgified_for_staff.id, beam_polygons_kludgified_for_staff.writer, beam_polygons_kludgified_for_staff.sub_id, beam_polygons_kludgified_for_staff.point, beam_polygons_kludgified_for_staff.x, beam_polygons_kludgified_for_staff.anon_1, beam_polygons_kludgified_for_staff.thickness, beam_polygons_kludgified_for_staff.fill, beam_polygons_kludgified_for_staff.stroke  FROM beam_polygons_kludgified_for_staff;       END;     CREATE TRIGGER beam_x_position_delete_del_polygon_stencil_ins_polygon_stencil_SYbr AFTER DELETE ON beam_x_position WHEN (EXISTS (SELECT beam_x_position.id  FROM beam_x_position JOIN beam_y_position ON beam_x_position.id = beam_y_position.id))       BEGIN                      DELETE FROM polygon_stencil WHERE polygon_stencil.id = old.id AND polygon_stencil.writer = \'beam_to_stencil\';           INSERT INTO polygon_stencil (id, writer, sub_id, point, x, y, thickness, fill, stroke) WITH RECURSIVE beam_direction AS  (SELECT min(stem_direction.val) AS val  FROM stem_direction, beam  WHERE beam.val = old.id AND beam.id = stem_direction.id),  beam_duration_log AS  (SELECT min(duration_log.val) AS val  FROM duration_log, beam  WHERE beam.val = old.id AND beam.id = duration_log.id),  beam_starting_points(id, sub_id, x, y) AS  (SELECT beam_x_position.id AS id, 0 AS sub_id, beam_x_position."left" AS x, beam_y_position."left" AS y  FROM beam_x_position, beam_y_position  WHERE beam_x_position.id = old.id AND beam_x_position.id = beam_y_position.id UNION ALL SELECT beam_starting_points_prev.id AS id, beam_starting_points_prev.sub_id + 1 AS anon_2, beam_starting_points_prev.x AS x, beam_starting_points_prev.y + beam_direction.val * (beam_starting_points_prev.sub_id + 1) * -0.75 AS anon_3  FROM beam_starting_points AS beam_starting_points_prev, beam_direction, beam_duration_log  WHERE beam_starting_points_prev.sub_id < (beam_duration_log.val * -1 - 2) - 1),  beam_polygons_1 AS  (SELECT beam_starting_points.id AS id, \'beam_to_stencil\' AS writer, beam_starting_points.sub_id AS sub_id, 0 AS point, beam_starting_points.x + 0.16 AS x, beam_starting_points.y AS y, 0 AS thickness, 1 AS fill, 0 AS stroke  FROM beam_starting_points),  beam_polygons_2 AS  (SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, beam_polygons_1.point AS point, beam_polygons_1.x AS x, beam_polygons_1.y AS y, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 1 AS anon_4, beam_polygons_1.x + 0.16 AS anon_5, beam_polygons_1.y - 0.5 AS anon_6, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1),  beam_polygons_3 AS  (SELECT beam_polygons_2.id AS id, beam_polygons_2.writer AS writer, beam_polygons_2.sub_id AS sub_id, beam_polygons_2.point AS point, beam_polygons_2.x AS x, beam_polygons_2.y AS y, beam_polygons_2.thickness AS thickness, beam_polygons_2.fill AS fill, beam_polygons_2.stroke AS stroke  FROM beam_polygons_2 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 2 AS anon_7, beam_x_position."right" + 0.1 + 0.16 AS anon_8, ((beam_polygons_1.y - beam_y_position."left") + beam_y_position."right") - 0.5 AS anon_9, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1, beam_x_position, beam_y_position  WHERE beam_x_position.id = beam_polygons_1.id AND beam_y_position.id = beam_polygons_1.id),  beam_polygons_4 AS  (SELECT beam_polygons_3.id AS id, beam_polygons_3.writer AS writer, beam_polygons_3.sub_id AS sub_id, beam_polygons_3.point AS point, beam_polygons_3.x AS x, beam_polygons_3.y AS y, beam_polygons_3.thickness AS thickness, beam_polygons_3.fill AS fill, beam_polygons_3.stroke AS stroke  FROM beam_polygons_3 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 3 AS anon_10, beam_x_position."right" + 0.1 + 0.16 AS anon_11, (beam_polygons_1.y - beam_y_position."left") + beam_y_position."right" AS anon_12, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1, beam_x_position, beam_y_position  WHERE beam_x_position.id = beam_polygons_1.id AND beam_y_position.id = beam_polygons_1.id),  beam_polygons_5 AS  (SELECT beam_polygons_4.id AS id, beam_polygons_4.writer AS writer, beam_polygons_4.sub_id AS sub_id, beam_polygons_4.point AS point, beam_polygons_4.x AS x, beam_polygons_4.y AS y, beam_polygons_4.thickness AS thickness, beam_polygons_4.fill AS fill, beam_polygons_4.stroke AS stroke  FROM beam_polygons_4 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 4 AS anon_13, beam_polygons_1.x + 0.16 AS anon_14, beam_polygons_1.y AS y, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1),  beam_polygons_kludgified_for_staff AS  (SELECT beam_polygons_5.id AS id, beam_polygons_5.writer AS writer, beam_polygons_5.sub_id AS sub_id, beam_polygons_5.point AS point, beam_polygons_5.x AS x, beam_polygons_5.y * -1.0 + 2.0 AS anon_1, beam_polygons_5.thickness AS thickness, beam_polygons_5.fill AS fill, beam_polygons_5.stroke AS stroke  FROM beam_polygons_5)  SELECT beam_polygons_kludgified_for_staff.id, beam_polygons_kludgified_for_staff.writer, beam_polygons_kludgified_for_staff.sub_id, beam_polygons_kludgified_for_staff.point, beam_polygons_kludgified_for_staff.x, beam_polygons_kludgified_for_staff.anon_1, beam_polygons_kludgified_for_staff.thickness, beam_polygons_kludgified_for_staff.fill, beam_polygons_kludgified_for_staff.stroke  FROM beam_polygons_kludgified_for_staff;       END;     CREATE TRIGGER beam_y_position_delete_del_polygon_stencil_ins_polygon_stencil_JQii AFTER DELETE ON beam_y_position WHEN (EXISTS (SELECT beam_x_position.id  FROM beam_x_position JOIN beam_y_position ON beam_x_position.id = beam_y_position.id))       BEGIN                      DELETE FROM polygon_stencil WHERE polygon_stencil.id = old.id AND polygon_stencil.writer = \'beam_to_stencil\';           INSERT INTO polygon_stencil (id, writer, sub_id, point, x, y, thickness, fill, stroke) WITH RECURSIVE beam_direction AS  (SELECT min(stem_direction.val) AS val  FROM stem_direction, beam  WHERE beam.val = old.id AND beam.id = stem_direction.id),  beam_duration_log AS  (SELECT min(duration_log.val) AS val  FROM duration_log, beam  WHERE beam.val = old.id AND beam.id = duration_log.id),  beam_starting_points(id, sub_id, x, y) AS  (SELECT beam_x_position.id AS id, 0 AS sub_id, beam_x_position."left" AS x, beam_y_position."left" AS y  FROM beam_x_position, beam_y_position  WHERE beam_x_position.id = old.id AND beam_x_position.id = beam_y_position.id UNION ALL SELECT beam_starting_points_prev.id AS id, beam_starting_points_prev.sub_id + 1 AS anon_2, beam_starting_points_prev.x AS x, beam_starting_points_prev.y + beam_direction.val * (beam_starting_points_prev.sub_id + 1) * -0.75 AS anon_3  FROM beam_starting_points AS beam_starting_points_prev, beam_direction, beam_duration_log  WHERE beam_starting_points_prev.sub_id < (beam_duration_log.val * -1 - 2) - 1),  beam_polygons_1 AS  (SELECT beam_starting_points.id AS id, \'beam_to_stencil\' AS writer, beam_starting_points.sub_id AS sub_id, 0 AS point, beam_starting_points.x + 0.16 AS x, beam_starting_points.y AS y, 0 AS thickness, 1 AS fill, 0 AS stroke  FROM beam_starting_points),  beam_polygons_2 AS  (SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, beam_polygons_1.point AS point, beam_polygons_1.x AS x, beam_polygons_1.y AS y, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 1 AS anon_4, beam_polygons_1.x + 0.16 AS anon_5, beam_polygons_1.y - 0.5 AS anon_6, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1),  beam_polygons_3 AS  (SELECT beam_polygons_2.id AS id, beam_polygons_2.writer AS writer, beam_polygons_2.sub_id AS sub_id, beam_polygons_2.point AS point, beam_polygons_2.x AS x, beam_polygons_2.y AS y, beam_polygons_2.thickness AS thickness, beam_polygons_2.fill AS fill, beam_polygons_2.stroke AS stroke  FROM beam_polygons_2 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 2 AS anon_7, beam_x_position."right" + 0.1 + 0.16 AS anon_8, ((beam_polygons_1.y - beam_y_position."left") + beam_y_position."right") - 0.5 AS anon_9, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1, beam_x_position, beam_y_position  WHERE beam_x_position.id = beam_polygons_1.id AND beam_y_position.id = beam_polygons_1.id),  beam_polygons_4 AS  (SELECT beam_polygons_3.id AS id, beam_polygons_3.writer AS writer, beam_polygons_3.sub_id AS sub_id, beam_polygons_3.point AS point, beam_polygons_3.x AS x, beam_polygons_3.y AS y, beam_polygons_3.thickness AS thickness, beam_polygons_3.fill AS fill, beam_polygons_3.stroke AS stroke  FROM beam_polygons_3 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 3 AS anon_10, beam_x_position."right" + 0.1 + 0.16 AS anon_11, (beam_polygons_1.y - beam_y_position."left") + beam_y_position."right" AS anon_12, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1, beam_x_position, beam_y_position  WHERE beam_x_position.id = beam_polygons_1.id AND beam_y_position.id = beam_polygons_1.id),  beam_polygons_5 AS  (SELECT beam_polygons_4.id AS id, beam_polygons_4.writer AS writer, beam_polygons_4.sub_id AS sub_id, beam_polygons_4.point AS point, beam_polygons_4.x AS x, beam_polygons_4.y AS y, beam_polygons_4.thickness AS thickness, beam_polygons_4.fill AS fill, beam_polygons_4.stroke AS stroke  FROM beam_polygons_4 UNION ALL SELECT beam_polygons_1.id AS id, beam_polygons_1.writer AS writer, beam_polygons_1.sub_id AS sub_id, 4 AS anon_13, beam_polygons_1.x + 0.16 AS anon_14, beam_polygons_1.y AS y, beam_polygons_1.thickness AS thickness, beam_polygons_1.fill AS fill, beam_polygons_1.stroke AS stroke  FROM beam_polygons_1),  beam_polygons_kludgified_for_staff AS  (SELECT beam_polygons_5.id AS id, beam_polygons_5.writer AS writer, beam_polygons_5.sub_id AS sub_id, beam_polygons_5.point AS point, beam_polygons_5.x AS x, beam_polygons_5.y * -1.0 + 2.0 AS anon_1, beam_polygons_5.thickness AS thickness, beam_polygons_5.fill AS fill, beam_polygons_5.stroke AS stroke  FROM beam_polygons_5)  SELECT beam_polygons_kludgified_for_staff.id, beam_polygons_kludgified_for_staff.writer, beam_polygons_kludgified_for_staff.sub_id, beam_polygons_kludgified_for_staff.point, beam_polygons_kludgified_for_staff.x, beam_polygons_kludgified_for_staff.anon_1, beam_polygons_kludgified_for_staff.thickness, beam_polygons_kludgified_for_staff.fill, beam_polygons_kludgified_for_staff.stroke  FROM beam_polygons_kludgified_for_staff;       END;     CREATE TRIGGER font_name_insert_del_width_ins_width_NYJK AFTER INSERT ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN unicode ON font_name.id = unicode.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM width WHERE EXISTS (SELECT name.id  FROM name  WHERE width.id = new.id AND name.id = new.id AND name.val = \'clef\');           INSERT INTO width (id, val) WITH clefs_to_widths AS  (SELECT name.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM name, glyph_box, font_size, font_name, unicode  WHERE name.id = new.id AND name.val = \'clef\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = unicode.id AND font_name.val = glyph_box.name AND unicode.val = glyph_box.unicode)  SELECT clefs_to_widths.id, clefs_to_widths.val  FROM clefs_to_widths;       END;     CREATE TRIGGER unicode_insert_del_width_ins_width_CTnL AFTER INSERT ON unicode WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN unicode ON font_name.id = unicode.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM width WHERE EXISTS (SELECT name.id  FROM name  WHERE width.id = new.id AND name.id = new.id AND name.val = \'clef\');           INSERT INTO width (id, val) WITH clefs_to_widths AS  (SELECT name.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM name, glyph_box, font_size, font_name, unicode  WHERE name.id = new.id AND name.val = \'clef\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = unicode.id AND font_name.val = glyph_box.name AND unicode.val = glyph_box.unicode)  SELECT clefs_to_widths.id, clefs_to_widths.val  FROM clefs_to_widths;       END;     CREATE TRIGGER name_insert_del_width_ins_width_EzkI AFTER INSERT ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN unicode ON font_name.id = unicode.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM width WHERE EXISTS (SELECT name.id  FROM name  WHERE width.id = new.id AND name.id = new.id AND name.val = \'clef\');           INSERT INTO width (id, val) WITH clefs_to_widths AS  (SELECT name.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM name, glyph_box, font_size, font_name, unicode  WHERE name.id = new.id AND name.val = \'clef\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = unicode.id AND font_name.val = glyph_box.name AND unicode.val = glyph_box.unicode)  SELECT clefs_to_widths.id, clefs_to_widths.val  FROM clefs_to_widths;       END;     CREATE TRIGGER font_name_update_del_width_ins_width_PbFb AFTER UPDATE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN unicode ON font_name.id = unicode.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM width WHERE EXISTS (SELECT name.id  FROM name  WHERE width.id = new.id AND name.id = new.id AND name.val = \'clef\');           INSERT INTO width (id, val) WITH clefs_to_widths AS  (SELECT name.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM name, glyph_box, font_size, font_name, unicode  WHERE name.id = new.id AND name.val = \'clef\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = unicode.id AND font_name.val = glyph_box.name AND unicode.val = glyph_box.unicode)  SELECT clefs_to_widths.id, clefs_to_widths.val  FROM clefs_to_widths;       END;     CREATE TRIGGER unicode_update_del_width_ins_width_WzsW AFTER UPDATE ON unicode WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN unicode ON font_name.id = unicode.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM width WHERE EXISTS (SELECT name.id  FROM name  WHERE width.id = new.id AND name.id = new.id AND name.val = \'clef\');           INSERT INTO width (id, val) WITH clefs_to_widths AS  (SELECT name.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM name, glyph_box, font_size, font_name, unicode  WHERE name.id = new.id AND name.val = \'clef\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = unicode.id AND font_name.val = glyph_box.name AND unicode.val = glyph_box.unicode)  SELECT clefs_to_widths.id, clefs_to_widths.val  FROM clefs_to_widths;       END;     CREATE TRIGGER name_update_del_width_ins_width_LgjQ AFTER UPDATE ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN unicode ON font_name.id = unicode.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM width WHERE EXISTS (SELECT name.id  FROM name  WHERE width.id = new.id AND name.id = new.id AND name.val = \'clef\');           INSERT INTO width (id, val) WITH clefs_to_widths AS  (SELECT name.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM name, glyph_box, font_size, font_name, unicode  WHERE name.id = new.id AND name.val = \'clef\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = unicode.id AND font_name.val = glyph_box.name AND unicode.val = glyph_box.unicode)  SELECT clefs_to_widths.id, clefs_to_widths.val  FROM clefs_to_widths;       END;     CREATE TRIGGER font_name_delete_del_width_ins_width_NUBY AFTER DELETE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN unicode ON font_name.id = unicode.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM width WHERE EXISTS (SELECT name.id  FROM name  WHERE width.id = old.id AND name.id = old.id AND name.val = \'clef\');           INSERT INTO width (id, val) WITH clefs_to_widths AS  (SELECT name.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM name, glyph_box, font_size, font_name, unicode  WHERE name.id = old.id AND name.val = \'clef\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = unicode.id AND font_name.val = glyph_box.name AND unicode.val = glyph_box.unicode)  SELECT clefs_to_widths.id, clefs_to_widths.val  FROM clefs_to_widths;       END;     CREATE TRIGGER unicode_delete_del_width_ins_width_RUtE AFTER DELETE ON unicode WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN unicode ON font_name.id = unicode.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM width WHERE EXISTS (SELECT name.id  FROM name  WHERE width.id = old.id AND name.id = old.id AND name.val = \'clef\');           INSERT INTO width (id, val) WITH clefs_to_widths AS  (SELECT name.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM name, glyph_box, font_size, font_name, unicode  WHERE name.id = old.id AND name.val = \'clef\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = unicode.id AND font_name.val = glyph_box.name AND unicode.val = glyph_box.unicode)  SELECT clefs_to_widths.id, clefs_to_widths.val  FROM clefs_to_widths;       END;     CREATE TRIGGER name_delete_del_width_ins_width_QxbM AFTER DELETE ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN unicode ON font_name.id = unicode.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM width WHERE EXISTS (SELECT name.id  FROM name  WHERE width.id = old.id AND name.id = old.id AND name.val = \'clef\');           INSERT INTO width (id, val) WITH clefs_to_widths AS  (SELECT name.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM name, glyph_box, font_size, font_name, unicode  WHERE name.id = old.id AND name.val = \'clef\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = unicode.id AND font_name.val = glyph_box.name AND unicode.val = glyph_box.unicode)  SELECT clefs_to_widths.id, clefs_to_widths.val  FROM clefs_to_widths;       END;     CREATE TRIGGER name_insert_del_width_ins_width_JjYP AFTER INSERT ON name        BEGIN                      DELETE FROM width WHERE width.val = new.id;           INSERT INTO width (id, val) WITH time_signatures_to_widths AS  (SELECT name.id AS id, CASE WHEN ((glyph_box_a_1.width * font_size.val) / 20.0 >= (glyph_box_a_2.width * font_size.val) / 20.0 OR (glyph_box_a_2.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_1.width * font_size.val) / 20.0 WHEN ((glyph_box_a_2.width * font_size.val) / 20.0 >= (glyph_box_a_1.width * font_size.val) / 20.0 OR (glyph_box_a_1.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_2.width * font_size.val) / 20.0 END AS val  FROM name, glyph_box AS glyph_box_a_1, font_size, glyph_box AS glyph_box_a_2, font_name, time_signature  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = new.id)  SELECT time_signatures_to_widths.id, time_signatures_to_widths.val  FROM time_signatures_to_widths;       END;     CREATE TRIGGER font_name_insert_del_width_ins_width_PsmK AFTER INSERT ON font_name        BEGIN                      DELETE FROM width WHERE width.val = new.id;           INSERT INTO width (id, val) WITH time_signatures_to_widths AS  (SELECT name.id AS id, CASE WHEN ((glyph_box_a_1.width * font_size.val) / 20.0 >= (glyph_box_a_2.width * font_size.val) / 20.0 OR (glyph_box_a_2.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_1.width * font_size.val) / 20.0 WHEN ((glyph_box_a_2.width * font_size.val) / 20.0 >= (glyph_box_a_1.width * font_size.val) / 20.0 OR (glyph_box_a_1.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_2.width * font_size.val) / 20.0 END AS val  FROM name, glyph_box AS glyph_box_a_1, font_size, glyph_box AS glyph_box_a_2, font_name, time_signature  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = new.id)  SELECT time_signatures_to_widths.id, time_signatures_to_widths.val  FROM time_signatures_to_widths;       END;     CREATE TRIGGER font_size_insert_del_width_ins_width_QRKt AFTER INSERT ON font_size        BEGIN                      DELETE FROM width WHERE width.val = new.id;           INSERT INTO width (id, val) WITH time_signatures_to_widths AS  (SELECT name.id AS id, CASE WHEN ((glyph_box_a_1.width * font_size.val) / 20.0 >= (glyph_box_a_2.width * font_size.val) / 20.0 OR (glyph_box_a_2.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_1.width * font_size.val) / 20.0 WHEN ((glyph_box_a_2.width * font_size.val) / 20.0 >= (glyph_box_a_1.width * font_size.val) / 20.0 OR (glyph_box_a_1.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_2.width * font_size.val) / 20.0 END AS val  FROM name, glyph_box AS glyph_box_a_1, font_size, glyph_box AS glyph_box_a_2, font_name, time_signature  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = new.id)  SELECT time_signatures_to_widths.id, time_signatures_to_widths.val  FROM time_signatures_to_widths;       END;     CREATE TRIGGER time_signature_insert_del_width_ins_width_KjfG AFTER INSERT ON time_signature        BEGIN                      DELETE FROM width WHERE width.val = new.id;           INSERT INTO width (id, val) WITH time_signatures_to_widths AS  (SELECT name.id AS id, CASE WHEN ((glyph_box_a_1.width * font_size.val) / 20.0 >= (glyph_box_a_2.width * font_size.val) / 20.0 OR (glyph_box_a_2.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_1.width * font_size.val) / 20.0 WHEN ((glyph_box_a_2.width * font_size.val) / 20.0 >= (glyph_box_a_1.width * font_size.val) / 20.0 OR (glyph_box_a_1.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_2.width * font_size.val) / 20.0 END AS val  FROM name, glyph_box AS glyph_box_a_1, font_size, glyph_box AS glyph_box_a_2, font_name, time_signature  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = new.id)  SELECT time_signatures_to_widths.id, time_signatures_to_widths.val  FROM time_signatures_to_widths;       END;     CREATE TRIGGER name_update_del_width_ins_width_Uatc AFTER UPDATE ON name        BEGIN                      DELETE FROM width WHERE width.val = new.id;           INSERT INTO width (id, val) WITH time_signatures_to_widths AS  (SELECT name.id AS id, CASE WHEN ((glyph_box_a_1.width * font_size.val) / 20.0 >= (glyph_box_a_2.width * font_size.val) / 20.0 OR (glyph_box_a_2.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_1.width * font_size.val) / 20.0 WHEN ((glyph_box_a_2.width * font_size.val) / 20.0 >= (glyph_box_a_1.width * font_size.val) / 20.0 OR (glyph_box_a_1.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_2.width * font_size.val) / 20.0 END AS val  FROM name, glyph_box AS glyph_box_a_1, font_size, glyph_box AS glyph_box_a_2, font_name, time_signature  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = new.id)  SELECT time_signatures_to_widths.id, time_signatures_to_widths.val  FROM time_signatures_to_widths;       END;     CREATE TRIGGER font_name_update_del_width_ins_width_VvsS AFTER UPDATE ON font_name        BEGIN                      DELETE FROM width WHERE width.val = new.id;           INSERT INTO width (id, val) WITH time_signatures_to_widths AS  (SELECT name.id AS id, CASE WHEN ((glyph_box_a_1.width * font_size.val) / 20.0 >= (glyph_box_a_2.width * font_size.val) / 20.0 OR (glyph_box_a_2.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_1.width * font_size.val) / 20.0 WHEN ((glyph_box_a_2.width * font_size.val) / 20.0 >= (glyph_box_a_1.width * font_size.val) / 20.0 OR (glyph_box_a_1.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_2.width * font_size.val) / 20.0 END AS val  FROM name, glyph_box AS glyph_box_a_1, font_size, glyph_box AS glyph_box_a_2, font_name, time_signature  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = new.id)  SELECT time_signatures_to_widths.id, time_signatures_to_widths.val  FROM time_signatures_to_widths;       END;     CREATE TRIGGER font_size_update_del_width_ins_width_KIvE AFTER UPDATE ON font_size        BEGIN                      DELETE FROM width WHERE width.val = new.id;           INSERT INTO width (id, val) WITH time_signatures_to_widths AS  (SELECT name.id AS id, CASE WHEN ((glyph_box_a_1.width * font_size.val) / 20.0 >= (glyph_box_a_2.width * font_size.val) / 20.0 OR (glyph_box_a_2.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_1.width * font_size.val) / 20.0 WHEN ((glyph_box_a_2.width * font_size.val) / 20.0 >= (glyph_box_a_1.width * font_size.val) / 20.0 OR (glyph_box_a_1.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_2.width * font_size.val) / 20.0 END AS val  FROM name, glyph_box AS glyph_box_a_1, font_size, glyph_box AS glyph_box_a_2, font_name, time_signature  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = new.id)  SELECT time_signatures_to_widths.id, time_signatures_to_widths.val  FROM time_signatures_to_widths;       END;     CREATE TRIGGER time_signature_update_del_width_ins_width_MwHT AFTER UPDATE ON time_signature        BEGIN                      DELETE FROM width WHERE width.val = new.id;           INSERT INTO width (id, val) WITH time_signatures_to_widths AS  (SELECT name.id AS id, CASE WHEN ((glyph_box_a_1.width * font_size.val) / 20.0 >= (glyph_box_a_2.width * font_size.val) / 20.0 OR (glyph_box_a_2.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_1.width * font_size.val) / 20.0 WHEN ((glyph_box_a_2.width * font_size.val) / 20.0 >= (glyph_box_a_1.width * font_size.val) / 20.0 OR (glyph_box_a_1.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_2.width * font_size.val) / 20.0 END AS val  FROM name, glyph_box AS glyph_box_a_1, font_size, glyph_box AS glyph_box_a_2, font_name, time_signature  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = new.id)  SELECT time_signatures_to_widths.id, time_signatures_to_widths.val  FROM time_signatures_to_widths;       END;     CREATE TRIGGER name_delete_del_width_ins_width_RkKG AFTER DELETE ON name        BEGIN                      DELETE FROM width WHERE width.val = old.id;           INSERT INTO width (id, val) WITH time_signatures_to_widths AS  (SELECT name.id AS id, CASE WHEN ((glyph_box_a_1.width * font_size.val) / 20.0 >= (glyph_box_a_2.width * font_size.val) / 20.0 OR (glyph_box_a_2.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_1.width * font_size.val) / 20.0 WHEN ((glyph_box_a_2.width * font_size.val) / 20.0 >= (glyph_box_a_1.width * font_size.val) / 20.0 OR (glyph_box_a_1.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_2.width * font_size.val) / 20.0 END AS val  FROM name, glyph_box AS glyph_box_a_1, font_size, glyph_box AS glyph_box_a_2, font_name, time_signature  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = old.id)  SELECT time_signatures_to_widths.id, time_signatures_to_widths.val  FROM time_signatures_to_widths;       END;     CREATE TRIGGER font_name_delete_del_width_ins_width_LmKx AFTER DELETE ON font_name        BEGIN                      DELETE FROM width WHERE width.val = old.id;           INSERT INTO width (id, val) WITH time_signatures_to_widths AS  (SELECT name.id AS id, CASE WHEN ((glyph_box_a_1.width * font_size.val) / 20.0 >= (glyph_box_a_2.width * font_size.val) / 20.0 OR (glyph_box_a_2.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_1.width * font_size.val) / 20.0 WHEN ((glyph_box_a_2.width * font_size.val) / 20.0 >= (glyph_box_a_1.width * font_size.val) / 20.0 OR (glyph_box_a_1.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_2.width * font_size.val) / 20.0 END AS val  FROM name, glyph_box AS glyph_box_a_1, font_size, glyph_box AS glyph_box_a_2, font_name, time_signature  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = old.id)  SELECT time_signatures_to_widths.id, time_signatures_to_widths.val  FROM time_signatures_to_widths;       END;     CREATE TRIGGER font_size_delete_del_width_ins_width_VJHy AFTER DELETE ON font_size        BEGIN                      DELETE FROM width WHERE width.val = old.id;           INSERT INTO width (id, val) WITH time_signatures_to_widths AS  (SELECT name.id AS id, CASE WHEN ((glyph_box_a_1.width * font_size.val) / 20.0 >= (glyph_box_a_2.width * font_size.val) / 20.0 OR (glyph_box_a_2.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_1.width * font_size.val) / 20.0 WHEN ((glyph_box_a_2.width * font_size.val) / 20.0 >= (glyph_box_a_1.width * font_size.val) / 20.0 OR (glyph_box_a_1.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_2.width * font_size.val) / 20.0 END AS val  FROM name, glyph_box AS glyph_box_a_1, font_size, glyph_box AS glyph_box_a_2, font_name, time_signature  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = old.id)  SELECT time_signatures_to_widths.id, time_signatures_to_widths.val  FROM time_signatures_to_widths;       END;     CREATE TRIGGER time_signature_delete_del_width_ins_width_Smpj AFTER DELETE ON time_signature        BEGIN                      DELETE FROM width WHERE width.val = old.id;           INSERT INTO width (id, val) WITH time_signatures_to_widths AS  (SELECT name.id AS id, CASE WHEN ((glyph_box_a_1.width * font_size.val) / 20.0 >= (glyph_box_a_2.width * font_size.val) / 20.0 OR (glyph_box_a_2.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_1.width * font_size.val) / 20.0 WHEN ((glyph_box_a_2.width * font_size.val) / 20.0 >= (glyph_box_a_1.width * font_size.val) / 20.0 OR (glyph_box_a_1.width * font_size.val) / 20.0 IS NULL) THEN (glyph_box_a_2.width * font_size.val) / 20.0 END AS val  FROM name, glyph_box AS glyph_box_a_1, font_size, glyph_box AS glyph_box_a_2, font_name, time_signature  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = old.id)  SELECT time_signatures_to_widths.id, time_signatures_to_widths.val  FROM time_signatures_to_widths;       END;     CREATE TRIGGER font_name_insert_del_accidental_width_ins_accidental_width_MXuk AFTER INSERT ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id))       BEGIN                      DELETE FROM accidental_width WHERE accidental_width.id = new.id;           INSERT INTO accidental_width (id, val) WITH accidental_to_accidental_widths AS  (SELECT accidental.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM accidental JOIN font_name ON accidental.id = font_name.id JOIN font_size ON accidental.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE glyph_box.unicode = CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AND accidental.id = new.id)  SELECT accidental_to_accidental_widths.id, accidental_to_accidental_widths.val  FROM accidental_to_accidental_widths;       END;     CREATE TRIGGER font_size_insert_del_accidental_width_ins_accidental_width_WJRS AFTER INSERT ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id))       BEGIN                      DELETE FROM accidental_width WHERE accidental_width.id = new.id;           INSERT INTO accidental_width (id, val) WITH accidental_to_accidental_widths AS  (SELECT accidental.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM accidental JOIN font_name ON accidental.id = font_name.id JOIN font_size ON accidental.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE glyph_box.unicode = CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AND accidental.id = new.id)  SELECT accidental_to_accidental_widths.id, accidental_to_accidental_widths.val  FROM accidental_to_accidental_widths;       END;     CREATE TRIGGER accidental_insert_del_accidental_width_ins_accidental_width_UcjQ AFTER INSERT ON accidental WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id))       BEGIN                      DELETE FROM accidental_width WHERE accidental_width.id = new.id;           INSERT INTO accidental_width (id, val) WITH accidental_to_accidental_widths AS  (SELECT accidental.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM accidental JOIN font_name ON accidental.id = font_name.id JOIN font_size ON accidental.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE glyph_box.unicode = CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AND accidental.id = new.id)  SELECT accidental_to_accidental_widths.id, accidental_to_accidental_widths.val  FROM accidental_to_accidental_widths;       END;     CREATE TRIGGER font_name_update_del_accidental_width_ins_accidental_width_DvUB AFTER UPDATE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id))       BEGIN                      DELETE FROM accidental_width WHERE accidental_width.id = new.id;           INSERT INTO accidental_width (id, val) WITH accidental_to_accidental_widths AS  (SELECT accidental.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM accidental JOIN font_name ON accidental.id = font_name.id JOIN font_size ON accidental.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE glyph_box.unicode = CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AND accidental.id = new.id)  SELECT accidental_to_accidental_widths.id, accidental_to_accidental_widths.val  FROM accidental_to_accidental_widths;       END;     CREATE TRIGGER font_size_update_del_accidental_width_ins_accidental_width_DjzY AFTER UPDATE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id))       BEGIN                      DELETE FROM accidental_width WHERE accidental_width.id = new.id;           INSERT INTO accidental_width (id, val) WITH accidental_to_accidental_widths AS  (SELECT accidental.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM accidental JOIN font_name ON accidental.id = font_name.id JOIN font_size ON accidental.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE glyph_box.unicode = CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AND accidental.id = new.id)  SELECT accidental_to_accidental_widths.id, accidental_to_accidental_widths.val  FROM accidental_to_accidental_widths;       END;     CREATE TRIGGER accidental_update_del_accidental_width_ins_accidental_width_FfzW AFTER UPDATE ON accidental WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id))       BEGIN                      DELETE FROM accidental_width WHERE accidental_width.id = new.id;           INSERT INTO accidental_width (id, val) WITH accidental_to_accidental_widths AS  (SELECT accidental.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM accidental JOIN font_name ON accidental.id = font_name.id JOIN font_size ON accidental.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE glyph_box.unicode = CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AND accidental.id = new.id)  SELECT accidental_to_accidental_widths.id, accidental_to_accidental_widths.val  FROM accidental_to_accidental_widths;       END;     CREATE TRIGGER font_name_delete_del_accidental_width_ins_accidental_width_KEdM AFTER DELETE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id))       BEGIN                      DELETE FROM accidental_width WHERE accidental_width.id = old.id;           INSERT INTO accidental_width (id, val) WITH accidental_to_accidental_widths AS  (SELECT accidental.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM accidental JOIN font_name ON accidental.id = font_name.id JOIN font_size ON accidental.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE glyph_box.unicode = CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AND accidental.id = old.id)  SELECT accidental_to_accidental_widths.id, accidental_to_accidental_widths.val  FROM accidental_to_accidental_widths;       END;     CREATE TRIGGER font_size_delete_del_accidental_width_ins_accidental_width_FGLR AFTER DELETE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id))       BEGIN                      DELETE FROM accidental_width WHERE accidental_width.id = old.id;           INSERT INTO accidental_width (id, val) WITH accidental_to_accidental_widths AS  (SELECT accidental.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM accidental JOIN font_name ON accidental.id = font_name.id JOIN font_size ON accidental.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE glyph_box.unicode = CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AND accidental.id = old.id)  SELECT accidental_to_accidental_widths.id, accidental_to_accidental_widths.val  FROM accidental_to_accidental_widths;       END;     CREATE TRIGGER accidental_delete_del_accidental_width_ins_accidental_width_IDAh AFTER DELETE ON accidental WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id))       BEGIN                      DELETE FROM accidental_width WHERE accidental_width.id = old.id;           INSERT INTO accidental_width (id, val) WITH accidental_to_accidental_widths AS  (SELECT accidental.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM accidental JOIN font_name ON accidental.id = font_name.id JOIN font_size ON accidental.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE glyph_box.unicode = CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AND accidental.id = old.id)  SELECT accidental_to_accidental_widths.id, accidental_to_accidental_widths.val  FROM accidental_to_accidental_widths;       END;     CREATE TRIGGER font_name_insert_del_rhythmic_head_width_ins_rhythmic_head_width_JeNT AFTER INSERT ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_width WHERE rhythmic_head_width.id = new.id;           INSERT INTO rhythmic_head_width (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = new.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER duration_log_insert_del_rhythmic_head_width_ins_rhythmic_head_width_ZaAd AFTER INSERT ON duration_log WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_width WHERE rhythmic_head_width.id = new.id;           INSERT INTO rhythmic_head_width (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = new.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER name_insert_del_rhythmic_head_width_ins_rhythmic_head_width_Wizk AFTER INSERT ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_width WHERE rhythmic_head_width.id = new.id;           INSERT INTO rhythmic_head_width (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = new.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER font_name_update_del_rhythmic_head_width_ins_rhythmic_head_width_TCMU AFTER UPDATE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_width WHERE rhythmic_head_width.id = new.id;           INSERT INTO rhythmic_head_width (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = new.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER duration_log_update_del_rhythmic_head_width_ins_rhythmic_head_width_Qrsw AFTER UPDATE ON duration_log WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_width WHERE rhythmic_head_width.id = new.id;           INSERT INTO rhythmic_head_width (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = new.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER name_update_del_rhythmic_head_width_ins_rhythmic_head_width_EYJC AFTER UPDATE ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_width WHERE rhythmic_head_width.id = new.id;           INSERT INTO rhythmic_head_width (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = new.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER font_name_delete_del_rhythmic_head_width_ins_rhythmic_head_width_TdWB AFTER DELETE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_width WHERE rhythmic_head_width.id = old.id;           INSERT INTO rhythmic_head_width (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = old.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER duration_log_delete_del_rhythmic_head_width_ins_rhythmic_head_width_ErJr AFTER DELETE ON duration_log WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_width WHERE rhythmic_head_width.id = old.id;           INSERT INTO rhythmic_head_width (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = old.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER name_delete_del_rhythmic_head_width_ins_rhythmic_head_width_HHio AFTER DELETE ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_width WHERE rhythmic_head_width.id = old.id;           INSERT INTO rhythmic_head_width (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.width * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = old.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER font_name_insert_del_rhythmic_head_height_ins_rhythmic_head_height_BDfy AFTER INSERT ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_height WHERE rhythmic_head_height.id = new.id;           INSERT INTO rhythmic_head_height (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.height * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = new.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER duration_log_insert_del_rhythmic_head_height_ins_rhythmic_head_height_VgKm AFTER INSERT ON duration_log WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_height WHERE rhythmic_head_height.id = new.id;           INSERT INTO rhythmic_head_height (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.height * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = new.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER name_insert_del_rhythmic_head_height_ins_rhythmic_head_height_EmGk AFTER INSERT ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_height WHERE rhythmic_head_height.id = new.id;           INSERT INTO rhythmic_head_height (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.height * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = new.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER font_name_update_del_rhythmic_head_height_ins_rhythmic_head_height_MfZw AFTER UPDATE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_height WHERE rhythmic_head_height.id = new.id;           INSERT INTO rhythmic_head_height (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.height * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = new.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER duration_log_update_del_rhythmic_head_height_ins_rhythmic_head_height_KIGi AFTER UPDATE ON duration_log WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_height WHERE rhythmic_head_height.id = new.id;           INSERT INTO rhythmic_head_height (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.height * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = new.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER name_update_del_rhythmic_head_height_ins_rhythmic_head_height_BKvY AFTER UPDATE ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_height WHERE rhythmic_head_height.id = new.id;           INSERT INTO rhythmic_head_height (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.height * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = new.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER font_name_delete_del_rhythmic_head_height_ins_rhythmic_head_height_GWcl AFTER DELETE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_height WHERE rhythmic_head_height.id = old.id;           INSERT INTO rhythmic_head_height (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.height * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = old.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER duration_log_delete_del_rhythmic_head_height_ins_rhythmic_head_height_KVeD AFTER DELETE ON duration_log WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_height WHERE rhythmic_head_height.id = old.id;           INSERT INTO rhythmic_head_height (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.height * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = old.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER name_delete_del_rhythmic_head_height_ins_rhythmic_head_height_Pdxu AFTER DELETE ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM rhythmic_head_height WHERE rhythmic_head_height.id = old.id;           INSERT INTO rhythmic_head_height (id, val) WITH duration_log_to_rhythmic_event_dimensions AS  (SELECT duration_log.id AS id, (glyph_box.height * font_size.val) / 20.0 AS val  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id JOIN glyph_box ON font_name.val = glyph_box.name  WHERE duration_log.id = old.id AND glyph_box.unicode = CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END)  SELECT duration_log_to_rhythmic_event_dimensions.id, duration_log_to_rhythmic_event_dimensions.val  FROM duration_log_to_rhythmic_event_dimensions;       END;     CREATE TRIGGER font_name_insert_del_dot_width_ins_dot_width_NXDi AFTER INSERT ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id))       BEGIN                      DELETE FROM dot_width WHERE dot_width.id = new.id;           INSERT INTO dot_width (id, val) WITH dots_to_dot_widths AS  (SELECT dots.id AS id, CASE WHEN (dots.val = 0) THEN 0.0 ELSE (glyph_box.width * font_size.val * dots.val) / 20.0 + CASE WHEN (dot_padding.val IS NOT NULL) THEN dot_padding.val ELSE dot_padding_default.val END * (dots.val - 1) END AS val  FROM glyph_box, font_size, dot_padding AS dot_padding_default, font_name, dots LEFT OUTER JOIN dot_padding ON dots.id = dot_padding.id  WHERE dots.id = new.id AND dot_padding_default.id = -1 AND dots.id = font_name.id AND dots.id = font_size.id AND font_name.val = glyph_box.name AND glyph_box.unicode = \'U+E1E7\')  SELECT dots_to_dot_widths.id, dots_to_dot_widths.val  FROM dots_to_dot_widths;       END;     CREATE TRIGGER font_size_insert_del_dot_width_ins_dot_width_FvTW AFTER INSERT ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id))       BEGIN                      DELETE FROM dot_width WHERE dot_width.id = new.id;           INSERT INTO dot_width (id, val) WITH dots_to_dot_widths AS  (SELECT dots.id AS id, CASE WHEN (dots.val = 0) THEN 0.0 ELSE (glyph_box.width * font_size.val * dots.val) / 20.0 + CASE WHEN (dot_padding.val IS NOT NULL) THEN dot_padding.val ELSE dot_padding_default.val END * (dots.val - 1) END AS val  FROM glyph_box, font_size, dot_padding AS dot_padding_default, font_name, dots LEFT OUTER JOIN dot_padding ON dots.id = dot_padding.id  WHERE dots.id = new.id AND dot_padding_default.id = -1 AND dots.id = font_name.id AND dots.id = font_size.id AND font_name.val = glyph_box.name AND glyph_box.unicode = \'U+E1E7\')  SELECT dots_to_dot_widths.id, dots_to_dot_widths.val  FROM dots_to_dot_widths;       END;     CREATE TRIGGER dots_insert_del_dot_width_ins_dot_width_Ivyc AFTER INSERT ON dots WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id))       BEGIN                      DELETE FROM dot_width WHERE dot_width.id = new.id;           INSERT INTO dot_width (id, val) WITH dots_to_dot_widths AS  (SELECT dots.id AS id, CASE WHEN (dots.val = 0) THEN 0.0 ELSE (glyph_box.width * font_size.val * dots.val) / 20.0 + CASE WHEN (dot_padding.val IS NOT NULL) THEN dot_padding.val ELSE dot_padding_default.val END * (dots.val - 1) END AS val  FROM glyph_box, font_size, dot_padding AS dot_padding_default, font_name, dots LEFT OUTER JOIN dot_padding ON dots.id = dot_padding.id  WHERE dots.id = new.id AND dot_padding_default.id = -1 AND dots.id = font_name.id AND dots.id = font_size.id AND font_name.val = glyph_box.name AND glyph_box.unicode = \'U+E1E7\')  SELECT dots_to_dot_widths.id, dots_to_dot_widths.val  FROM dots_to_dot_widths;       END;     CREATE TRIGGER dot_padding_insert_del_dot_width_ins_dot_width_JfuG AFTER INSERT ON dot_padding WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id))       BEGIN                      DELETE FROM dot_width WHERE dot_width.id = new.id;           INSERT INTO dot_width (id, val) WITH dots_to_dot_widths AS  (SELECT dots.id AS id, CASE WHEN (dots.val = 0) THEN 0.0 ELSE (glyph_box.width * font_size.val * dots.val) / 20.0 + CASE WHEN (dot_padding.val IS NOT NULL) THEN dot_padding.val ELSE dot_padding_default.val END * (dots.val - 1) END AS val  FROM glyph_box, font_size, dot_padding AS dot_padding_default, font_name, dots LEFT OUTER JOIN dot_padding ON dots.id = dot_padding.id  WHERE dots.id = new.id AND dot_padding_default.id = -1 AND dots.id = font_name.id AND dots.id = font_size.id AND font_name.val = glyph_box.name AND glyph_box.unicode = \'U+E1E7\')  SELECT dots_to_dot_widths.id, dots_to_dot_widths.val  FROM dots_to_dot_widths;       END;     CREATE TRIGGER font_name_update_del_dot_width_ins_dot_width_BFpy AFTER UPDATE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id))       BEGIN                      DELETE FROM dot_width WHERE dot_width.id = new.id;           INSERT INTO dot_width (id, val) WITH dots_to_dot_widths AS  (SELECT dots.id AS id, CASE WHEN (dots.val = 0) THEN 0.0 ELSE (glyph_box.width * font_size.val * dots.val) / 20.0 + CASE WHEN (dot_padding.val IS NOT NULL) THEN dot_padding.val ELSE dot_padding_default.val END * (dots.val - 1) END AS val  FROM glyph_box, font_size, dot_padding AS dot_padding_default, font_name, dots LEFT OUTER JOIN dot_padding ON dots.id = dot_padding.id  WHERE dots.id = new.id AND dot_padding_default.id = -1 AND dots.id = font_name.id AND dots.id = font_size.id AND font_name.val = glyph_box.name AND glyph_box.unicode = \'U+E1E7\')  SELECT dots_to_dot_widths.id, dots_to_dot_widths.val  FROM dots_to_dot_widths;       END;     CREATE TRIGGER font_size_update_del_dot_width_ins_dot_width_YkTk AFTER UPDATE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id))       BEGIN                      DELETE FROM dot_width WHERE dot_width.id = new.id;           INSERT INTO dot_width (id, val) WITH dots_to_dot_widths AS  (SELECT dots.id AS id, CASE WHEN (dots.val = 0) THEN 0.0 ELSE (glyph_box.width * font_size.val * dots.val) / 20.0 + CASE WHEN (dot_padding.val IS NOT NULL) THEN dot_padding.val ELSE dot_padding_default.val END * (dots.val - 1) END AS val  FROM glyph_box, font_size, dot_padding AS dot_padding_default, font_name, dots LEFT OUTER JOIN dot_padding ON dots.id = dot_padding.id  WHERE dots.id = new.id AND dot_padding_default.id = -1 AND dots.id = font_name.id AND dots.id = font_size.id AND font_name.val = glyph_box.name AND glyph_box.unicode = \'U+E1E7\')  SELECT dots_to_dot_widths.id, dots_to_dot_widths.val  FROM dots_to_dot_widths;       END;     CREATE TRIGGER dots_update_del_dot_width_ins_dot_width_TTvV AFTER UPDATE ON dots WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id))       BEGIN                      DELETE FROM dot_width WHERE dot_width.id = new.id;           INSERT INTO dot_width (id, val) WITH dots_to_dot_widths AS  (SELECT dots.id AS id, CASE WHEN (dots.val = 0) THEN 0.0 ELSE (glyph_box.width * font_size.val * dots.val) / 20.0 + CASE WHEN (dot_padding.val IS NOT NULL) THEN dot_padding.val ELSE dot_padding_default.val END * (dots.val - 1) END AS val  FROM glyph_box, font_size, dot_padding AS dot_padding_default, font_name, dots LEFT OUTER JOIN dot_padding ON dots.id = dot_padding.id  WHERE dots.id = new.id AND dot_padding_default.id = -1 AND dots.id = font_name.id AND dots.id = font_size.id AND font_name.val = glyph_box.name AND glyph_box.unicode = \'U+E1E7\')  SELECT dots_to_dot_widths.id, dots_to_dot_widths.val  FROM dots_to_dot_widths;       END;     CREATE TRIGGER dot_padding_update_del_dot_width_ins_dot_width_UPFV AFTER UPDATE ON dot_padding WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id))       BEGIN                      DELETE FROM dot_width WHERE dot_width.id = new.id;           INSERT INTO dot_width (id, val) WITH dots_to_dot_widths AS  (SELECT dots.id AS id, CASE WHEN (dots.val = 0) THEN 0.0 ELSE (glyph_box.width * font_size.val * dots.val) / 20.0 + CASE WHEN (dot_padding.val IS NOT NULL) THEN dot_padding.val ELSE dot_padding_default.val END * (dots.val - 1) END AS val  FROM glyph_box, font_size, dot_padding AS dot_padding_default, font_name, dots LEFT OUTER JOIN dot_padding ON dots.id = dot_padding.id  WHERE dots.id = new.id AND dot_padding_default.id = -1 AND dots.id = font_name.id AND dots.id = font_size.id AND font_name.val = glyph_box.name AND glyph_box.unicode = \'U+E1E7\')  SELECT dots_to_dot_widths.id, dots_to_dot_widths.val  FROM dots_to_dot_widths;       END;     CREATE TRIGGER font_name_delete_del_dot_width_ins_dot_width_XQvv AFTER DELETE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id))       BEGIN                      DELETE FROM dot_width WHERE dot_width.id = old.id;           INSERT INTO dot_width (id, val) WITH dots_to_dot_widths AS  (SELECT dots.id AS id, CASE WHEN (dots.val = 0) THEN 0.0 ELSE (glyph_box.width * font_size.val * dots.val) / 20.0 + CASE WHEN (dot_padding.val IS NOT NULL) THEN dot_padding.val ELSE dot_padding_default.val END * (dots.val - 1) END AS val  FROM glyph_box, font_size, dot_padding AS dot_padding_default, font_name, dots LEFT OUTER JOIN dot_padding ON dots.id = dot_padding.id  WHERE dots.id = old.id AND dot_padding_default.id = -1 AND dots.id = font_name.id AND dots.id = font_size.id AND font_name.val = glyph_box.name AND glyph_box.unicode = \'U+E1E7\')  SELECT dots_to_dot_widths.id, dots_to_dot_widths.val  FROM dots_to_dot_widths;       END;     CREATE TRIGGER font_size_delete_del_dot_width_ins_dot_width_HDKp AFTER DELETE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id))       BEGIN                      DELETE FROM dot_width WHERE dot_width.id = old.id;           INSERT INTO dot_width (id, val) WITH dots_to_dot_widths AS  (SELECT dots.id AS id, CASE WHEN (dots.val = 0) THEN 0.0 ELSE (glyph_box.width * font_size.val * dots.val) / 20.0 + CASE WHEN (dot_padding.val IS NOT NULL) THEN dot_padding.val ELSE dot_padding_default.val END * (dots.val - 1) END AS val  FROM glyph_box, font_size, dot_padding AS dot_padding_default, font_name, dots LEFT OUTER JOIN dot_padding ON dots.id = dot_padding.id  WHERE dots.id = old.id AND dot_padding_default.id = -1 AND dots.id = font_name.id AND dots.id = font_size.id AND font_name.val = glyph_box.name AND glyph_box.unicode = \'U+E1E7\')  SELECT dots_to_dot_widths.id, dots_to_dot_widths.val  FROM dots_to_dot_widths;       END;     CREATE TRIGGER dots_delete_del_dot_width_ins_dot_width_CJvE AFTER DELETE ON dots WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id))       BEGIN                      DELETE FROM dot_width WHERE dot_width.id = old.id;           INSERT INTO dot_width (id, val) WITH dots_to_dot_widths AS  (SELECT dots.id AS id, CASE WHEN (dots.val = 0) THEN 0.0 ELSE (glyph_box.width * font_size.val * dots.val) / 20.0 + CASE WHEN (dot_padding.val IS NOT NULL) THEN dot_padding.val ELSE dot_padding_default.val END * (dots.val - 1) END AS val  FROM glyph_box, font_size, dot_padding AS dot_padding_default, font_name, dots LEFT OUTER JOIN dot_padding ON dots.id = dot_padding.id  WHERE dots.id = old.id AND dot_padding_default.id = -1 AND dots.id = font_name.id AND dots.id = font_size.id AND font_name.val = glyph_box.name AND glyph_box.unicode = \'U+E1E7\')  SELECT dots_to_dot_widths.id, dots_to_dot_widths.val  FROM dots_to_dot_widths;       END;     CREATE TRIGGER dot_padding_delete_del_dot_width_ins_dot_width_PWzh AFTER DELETE ON dot_padding WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id))       BEGIN                      DELETE FROM dot_width WHERE dot_width.id = old.id;           INSERT INTO dot_width (id, val) WITH dots_to_dot_widths AS  (SELECT dots.id AS id, CASE WHEN (dots.val = 0) THEN 0.0 ELSE (glyph_box.width * font_size.val * dots.val) / 20.0 + CASE WHEN (dot_padding.val IS NOT NULL) THEN dot_padding.val ELSE dot_padding_default.val END * (dots.val - 1) END AS val  FROM glyph_box, font_size, dot_padding AS dot_padding_default, font_name, dots LEFT OUTER JOIN dot_padding ON dots.id = dot_padding.id  WHERE dots.id = old.id AND dot_padding_default.id = -1 AND dots.id = font_name.id AND dots.id = font_size.id AND font_name.val = glyph_box.name AND glyph_box.unicode = \'U+E1E7\')  SELECT dots_to_dot_widths.id, dots_to_dot_widths.val  FROM dots_to_dot_widths;       END;     CREATE TRIGGER rhythmic_head_width_insert_del_right_width_ins_right_width_PcST AFTER INSERT ON rhythmic_head_width        BEGIN                      DELETE FROM right_width WHERE right_width.id = new.id;           INSERT INTO right_width (id, val) WITH rhythmic_event_to_right_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (dot_width.val IS NULL) THEN 0 ELSE dot_width.val END + CASE WHEN (dot_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_dot_padding.val IS NULL) THEN rhythmic_event_to_dot_padding_alias.val ELSE rhythmic_event_to_dot_padding.val END AS val  FROM rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_alias, rhythmic_head_width LEFT OUTER JOIN dot_width ON rhythmic_head_width.id = dot_width.id LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_head_width.id = rhythmic_event_to_dot_padding.id  WHERE rhythmic_event_to_dot_padding_alias.id = -1 AND rhythmic_head_width.id = new.id)  SELECT rhythmic_event_to_right_widths.id, rhythmic_event_to_right_widths.val  FROM rhythmic_event_to_right_widths;       END;     CREATE TRIGGER dot_width_insert_del_right_width_ins_right_width_YJRp AFTER INSERT ON dot_width        BEGIN                      DELETE FROM right_width WHERE right_width.id = new.id;           INSERT INTO right_width (id, val) WITH rhythmic_event_to_right_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (dot_width.val IS NULL) THEN 0 ELSE dot_width.val END + CASE WHEN (dot_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_dot_padding.val IS NULL) THEN rhythmic_event_to_dot_padding_alias.val ELSE rhythmic_event_to_dot_padding.val END AS val  FROM rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_alias, rhythmic_head_width LEFT OUTER JOIN dot_width ON rhythmic_head_width.id = dot_width.id LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_head_width.id = rhythmic_event_to_dot_padding.id  WHERE rhythmic_event_to_dot_padding_alias.id = -1 AND rhythmic_head_width.id = new.id)  SELECT rhythmic_event_to_right_widths.id, rhythmic_event_to_right_widths.val  FROM rhythmic_event_to_right_widths;       END;     CREATE TRIGGER rhythmic_event_to_dot_padding_insert_del_right_width_ins_right_width_XWhf AFTER INSERT ON rhythmic_event_to_dot_padding        BEGIN                      DELETE FROM right_width WHERE right_width.id = new.id;           INSERT INTO right_width (id, val) WITH rhythmic_event_to_right_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (dot_width.val IS NULL) THEN 0 ELSE dot_width.val END + CASE WHEN (dot_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_dot_padding.val IS NULL) THEN rhythmic_event_to_dot_padding_alias.val ELSE rhythmic_event_to_dot_padding.val END AS val  FROM rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_alias, rhythmic_head_width LEFT OUTER JOIN dot_width ON rhythmic_head_width.id = dot_width.id LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_head_width.id = rhythmic_event_to_dot_padding.id  WHERE rhythmic_event_to_dot_padding_alias.id = -1 AND rhythmic_head_width.id = new.id)  SELECT rhythmic_event_to_right_widths.id, rhythmic_event_to_right_widths.val  FROM rhythmic_event_to_right_widths;       END;     CREATE TRIGGER rhythmic_head_width_update_del_right_width_ins_right_width_CAYD AFTER UPDATE ON rhythmic_head_width        BEGIN                      DELETE FROM right_width WHERE right_width.id = new.id;           INSERT INTO right_width (id, val) WITH rhythmic_event_to_right_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (dot_width.val IS NULL) THEN 0 ELSE dot_width.val END + CASE WHEN (dot_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_dot_padding.val IS NULL) THEN rhythmic_event_to_dot_padding_alias.val ELSE rhythmic_event_to_dot_padding.val END AS val  FROM rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_alias, rhythmic_head_width LEFT OUTER JOIN dot_width ON rhythmic_head_width.id = dot_width.id LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_head_width.id = rhythmic_event_to_dot_padding.id  WHERE rhythmic_event_to_dot_padding_alias.id = -1 AND rhythmic_head_width.id = new.id)  SELECT rhythmic_event_to_right_widths.id, rhythmic_event_to_right_widths.val  FROM rhythmic_event_to_right_widths;       END;     CREATE TRIGGER dot_width_update_del_right_width_ins_right_width_Cxab AFTER UPDATE ON dot_width        BEGIN                      DELETE FROM right_width WHERE right_width.id = new.id;           INSERT INTO right_width (id, val) WITH rhythmic_event_to_right_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (dot_width.val IS NULL) THEN 0 ELSE dot_width.val END + CASE WHEN (dot_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_dot_padding.val IS NULL) THEN rhythmic_event_to_dot_padding_alias.val ELSE rhythmic_event_to_dot_padding.val END AS val  FROM rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_alias, rhythmic_head_width LEFT OUTER JOIN dot_width ON rhythmic_head_width.id = dot_width.id LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_head_width.id = rhythmic_event_to_dot_padding.id  WHERE rhythmic_event_to_dot_padding_alias.id = -1 AND rhythmic_head_width.id = new.id)  SELECT rhythmic_event_to_right_widths.id, rhythmic_event_to_right_widths.val  FROM rhythmic_event_to_right_widths;       END;     CREATE TRIGGER rhythmic_event_to_dot_padding_update_del_right_width_ins_right_width_QRVZ AFTER UPDATE ON rhythmic_event_to_dot_padding        BEGIN                      DELETE FROM right_width WHERE right_width.id = new.id;           INSERT INTO right_width (id, val) WITH rhythmic_event_to_right_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (dot_width.val IS NULL) THEN 0 ELSE dot_width.val END + CASE WHEN (dot_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_dot_padding.val IS NULL) THEN rhythmic_event_to_dot_padding_alias.val ELSE rhythmic_event_to_dot_padding.val END AS val  FROM rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_alias, rhythmic_head_width LEFT OUTER JOIN dot_width ON rhythmic_head_width.id = dot_width.id LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_head_width.id = rhythmic_event_to_dot_padding.id  WHERE rhythmic_event_to_dot_padding_alias.id = -1 AND rhythmic_head_width.id = new.id)  SELECT rhythmic_event_to_right_widths.id, rhythmic_event_to_right_widths.val  FROM rhythmic_event_to_right_widths;       END;     CREATE TRIGGER rhythmic_head_width_delete_del_right_width_ins_right_width_NOuM AFTER DELETE ON rhythmic_head_width        BEGIN                      DELETE FROM right_width WHERE right_width.id = old.id;           INSERT INTO right_width (id, val) WITH rhythmic_event_to_right_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (dot_width.val IS NULL) THEN 0 ELSE dot_width.val END + CASE WHEN (dot_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_dot_padding.val IS NULL) THEN rhythmic_event_to_dot_padding_alias.val ELSE rhythmic_event_to_dot_padding.val END AS val  FROM rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_alias, rhythmic_head_width LEFT OUTER JOIN dot_width ON rhythmic_head_width.id = dot_width.id LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_head_width.id = rhythmic_event_to_dot_padding.id  WHERE rhythmic_event_to_dot_padding_alias.id = -1 AND rhythmic_head_width.id = old.id)  SELECT rhythmic_event_to_right_widths.id, rhythmic_event_to_right_widths.val  FROM rhythmic_event_to_right_widths;       END;     CREATE TRIGGER dot_width_delete_del_right_width_ins_right_width_NBhq AFTER DELETE ON dot_width        BEGIN                      DELETE FROM right_width WHERE right_width.id = old.id;           INSERT INTO right_width (id, val) WITH rhythmic_event_to_right_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (dot_width.val IS NULL) THEN 0 ELSE dot_width.val END + CASE WHEN (dot_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_dot_padding.val IS NULL) THEN rhythmic_event_to_dot_padding_alias.val ELSE rhythmic_event_to_dot_padding.val END AS val  FROM rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_alias, rhythmic_head_width LEFT OUTER JOIN dot_width ON rhythmic_head_width.id = dot_width.id LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_head_width.id = rhythmic_event_to_dot_padding.id  WHERE rhythmic_event_to_dot_padding_alias.id = -1 AND rhythmic_head_width.id = old.id)  SELECT rhythmic_event_to_right_widths.id, rhythmic_event_to_right_widths.val  FROM rhythmic_event_to_right_widths;       END;     CREATE TRIGGER rhythmic_event_to_dot_padding_delete_del_right_width_ins_right_width_GnBv AFTER DELETE ON rhythmic_event_to_dot_padding        BEGIN                      DELETE FROM right_width WHERE right_width.id = old.id;           INSERT INTO right_width (id, val) WITH rhythmic_event_to_right_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (dot_width.val IS NULL) THEN 0 ELSE dot_width.val END + CASE WHEN (dot_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_dot_padding.val IS NULL) THEN rhythmic_event_to_dot_padding_alias.val ELSE rhythmic_event_to_dot_padding.val END AS val  FROM rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_alias, rhythmic_head_width LEFT OUTER JOIN dot_width ON rhythmic_head_width.id = dot_width.id LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_head_width.id = rhythmic_event_to_dot_padding.id  WHERE rhythmic_event_to_dot_padding_alias.id = -1 AND rhythmic_head_width.id = old.id)  SELECT rhythmic_event_to_right_widths.id, rhythmic_event_to_right_widths.val  FROM rhythmic_event_to_right_widths;       END;     CREATE TRIGGER rhythmic_head_width_insert_del_left_width_ins_left_width_Mdxq AFTER INSERT ON rhythmic_head_width        BEGIN                      DELETE FROM left_width WHERE left_width.id = new.id;           INSERT INTO left_width (id, val) WITH rhythmic_event_to_left_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (accidental_width.val IS NULL) THEN 0 ELSE accidental_width.val END + CASE WHEN (accidental_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_accidental_padding.val IS NULL) THEN rhythmic_event_to_accidental_padding_alias.val ELSE rhythmic_event_to_accidental_padding.val END AS val  FROM rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_alias, rhythmic_head_width LEFT OUTER JOIN accidental_width ON rhythmic_head_width.id = accidental_width.id LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_head_width.id = rhythmic_event_to_accidental_padding.id  WHERE rhythmic_event_to_accidental_padding_alias.id = -1 AND rhythmic_head_width.id = new.id)  SELECT rhythmic_event_to_left_widths.id, rhythmic_event_to_left_widths.val  FROM rhythmic_event_to_left_widths;       END;     CREATE TRIGGER accidental_width_insert_del_left_width_ins_left_width_PxbR AFTER INSERT ON accidental_width        BEGIN                      DELETE FROM left_width WHERE left_width.id = new.id;           INSERT INTO left_width (id, val) WITH rhythmic_event_to_left_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (accidental_width.val IS NULL) THEN 0 ELSE accidental_width.val END + CASE WHEN (accidental_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_accidental_padding.val IS NULL) THEN rhythmic_event_to_accidental_padding_alias.val ELSE rhythmic_event_to_accidental_padding.val END AS val  FROM rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_alias, rhythmic_head_width LEFT OUTER JOIN accidental_width ON rhythmic_head_width.id = accidental_width.id LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_head_width.id = rhythmic_event_to_accidental_padding.id  WHERE rhythmic_event_to_accidental_padding_alias.id = -1 AND rhythmic_head_width.id = new.id)  SELECT rhythmic_event_to_left_widths.id, rhythmic_event_to_left_widths.val  FROM rhythmic_event_to_left_widths;       END;     CREATE TRIGGER rhythmic_head_width_update_del_left_width_ins_left_width_AeNX AFTER UPDATE ON rhythmic_head_width        BEGIN                      DELETE FROM left_width WHERE left_width.id = new.id;           INSERT INTO left_width (id, val) WITH rhythmic_event_to_left_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (accidental_width.val IS NULL) THEN 0 ELSE accidental_width.val END + CASE WHEN (accidental_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_accidental_padding.val IS NULL) THEN rhythmic_event_to_accidental_padding_alias.val ELSE rhythmic_event_to_accidental_padding.val END AS val  FROM rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_alias, rhythmic_head_width LEFT OUTER JOIN accidental_width ON rhythmic_head_width.id = accidental_width.id LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_head_width.id = rhythmic_event_to_accidental_padding.id  WHERE rhythmic_event_to_accidental_padding_alias.id = -1 AND rhythmic_head_width.id = new.id)  SELECT rhythmic_event_to_left_widths.id, rhythmic_event_to_left_widths.val  FROM rhythmic_event_to_left_widths;       END;     CREATE TRIGGER accidental_width_update_del_left_width_ins_left_width_GjKJ AFTER UPDATE ON accidental_width        BEGIN                      DELETE FROM left_width WHERE left_width.id = new.id;           INSERT INTO left_width (id, val) WITH rhythmic_event_to_left_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (accidental_width.val IS NULL) THEN 0 ELSE accidental_width.val END + CASE WHEN (accidental_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_accidental_padding.val IS NULL) THEN rhythmic_event_to_accidental_padding_alias.val ELSE rhythmic_event_to_accidental_padding.val END AS val  FROM rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_alias, rhythmic_head_width LEFT OUTER JOIN accidental_width ON rhythmic_head_width.id = accidental_width.id LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_head_width.id = rhythmic_event_to_accidental_padding.id  WHERE rhythmic_event_to_accidental_padding_alias.id = -1 AND rhythmic_head_width.id = new.id)  SELECT rhythmic_event_to_left_widths.id, rhythmic_event_to_left_widths.val  FROM rhythmic_event_to_left_widths;       END;     CREATE TRIGGER rhythmic_head_width_delete_del_left_width_ins_left_width_TFvc AFTER DELETE ON rhythmic_head_width        BEGIN                      DELETE FROM left_width WHERE left_width.id = old.id;           INSERT INTO left_width (id, val) WITH rhythmic_event_to_left_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (accidental_width.val IS NULL) THEN 0 ELSE accidental_width.val END + CASE WHEN (accidental_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_accidental_padding.val IS NULL) THEN rhythmic_event_to_accidental_padding_alias.val ELSE rhythmic_event_to_accidental_padding.val END AS val  FROM rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_alias, rhythmic_head_width LEFT OUTER JOIN accidental_width ON rhythmic_head_width.id = accidental_width.id LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_head_width.id = rhythmic_event_to_accidental_padding.id  WHERE rhythmic_event_to_accidental_padding_alias.id = -1 AND rhythmic_head_width.id = old.id)  SELECT rhythmic_event_to_left_widths.id, rhythmic_event_to_left_widths.val  FROM rhythmic_event_to_left_widths;       END;     CREATE TRIGGER accidental_width_delete_del_left_width_ins_left_width_ONvi AFTER DELETE ON accidental_width        BEGIN                      DELETE FROM left_width WHERE left_width.id = old.id;           INSERT INTO left_width (id, val) WITH rhythmic_event_to_left_widths AS  (SELECT rhythmic_head_width.id AS id, rhythmic_head_width.val + CASE WHEN (accidental_width.val IS NULL) THEN 0 ELSE accidental_width.val END + CASE WHEN (accidental_width.val IS NULL) THEN 0 WHEN (rhythmic_event_to_accidental_padding.val IS NULL) THEN rhythmic_event_to_accidental_padding_alias.val ELSE rhythmic_event_to_accidental_padding.val END AS val  FROM rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_alias, rhythmic_head_width LEFT OUTER JOIN accidental_width ON rhythmic_head_width.id = accidental_width.id LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_head_width.id = rhythmic_event_to_accidental_padding.id  WHERE rhythmic_event_to_accidental_padding_alias.id = -1 AND rhythmic_head_width.id = old.id)  SELECT rhythmic_event_to_left_widths.id, rhythmic_event_to_left_widths.val  FROM rhythmic_event_to_left_widths;       END;     CREATE TRIGGER rhythmic_head_width_insert_del_note_box_ins_note_box_MyLC AFTER INSERT ON rhythmic_head_width WHEN (EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width JOIN stem_end ON rhythmic_head_width.id = stem_end.id JOIN staff_position ON rhythmic_head_width.id = staff_position.id))       BEGIN                      DELETE FROM note_box WHERE EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width  WHERE note_box.id = new.id AND rhythmic_head_width.id = new.id);           INSERT INTO note_box (id, x, y, width, height) WITH box_candidates AS  (SELECT 0.0 AS x, staff_position.val AS y  FROM staff_position  WHERE staff_position.id = new.id UNION ALL SELECT rhythmic_head_width.val AS x, staff_position.val + stem_end.val AS y  FROM rhythmic_head_width, staff_position, stem_end  WHERE staff_position.id = new.id AND rhythmic_head_width.id = staff_position.id AND staff_position.id = stem_end.id),  rhythmic_head_width_to_note_box_pre AS  (SELECT rhythmic_head_width.id AS id, min(box_candidates.x) AS x, min(box_candidates.y) AS y, max(box_candidates.x) AS width, max(box_candidates.y) AS height  FROM rhythmic_head_width, box_candidates  WHERE rhythmic_head_width.id = new.id),  rhythmic_head_width_to_note_box AS  (SELECT rhythmic_head_width_to_note_box_pre.id AS id, rhythmic_head_width_to_note_box_pre.x AS x, rhythmic_head_width_to_note_box_pre.y AS y, rhythmic_head_width_to_note_box_pre.width AS width, rhythmic_head_width_to_note_box_pre.height AS height  FROM rhythmic_head_width_to_note_box_pre, rhythmic_head_width  WHERE rhythmic_head_width.id = new.id AND rhythmic_head_width_to_note_box_pre.x IS NOT NULL)  SELECT rhythmic_head_width_to_note_box.id, rhythmic_head_width_to_note_box.x, rhythmic_head_width_to_note_box.y, rhythmic_head_width_to_note_box.width, rhythmic_head_width_to_note_box.height  FROM rhythmic_head_width_to_note_box;       END;     CREATE TRIGGER stem_end_insert_del_note_box_ins_note_box_Xssg AFTER INSERT ON stem_end WHEN (EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width JOIN stem_end ON rhythmic_head_width.id = stem_end.id JOIN staff_position ON rhythmic_head_width.id = staff_position.id))       BEGIN                      DELETE FROM note_box WHERE EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width  WHERE note_box.id = new.id AND rhythmic_head_width.id = new.id);           INSERT INTO note_box (id, x, y, width, height) WITH box_candidates AS  (SELECT 0.0 AS x, staff_position.val AS y  FROM staff_position  WHERE staff_position.id = new.id UNION ALL SELECT rhythmic_head_width.val AS x, staff_position.val + stem_end.val AS y  FROM rhythmic_head_width, staff_position, stem_end  WHERE staff_position.id = new.id AND rhythmic_head_width.id = staff_position.id AND staff_position.id = stem_end.id),  rhythmic_head_width_to_note_box_pre AS  (SELECT rhythmic_head_width.id AS id, min(box_candidates.x) AS x, min(box_candidates.y) AS y, max(box_candidates.x) AS width, max(box_candidates.y) AS height  FROM rhythmic_head_width, box_candidates  WHERE rhythmic_head_width.id = new.id),  rhythmic_head_width_to_note_box AS  (SELECT rhythmic_head_width_to_note_box_pre.id AS id, rhythmic_head_width_to_note_box_pre.x AS x, rhythmic_head_width_to_note_box_pre.y AS y, rhythmic_head_width_to_note_box_pre.width AS width, rhythmic_head_width_to_note_box_pre.height AS height  FROM rhythmic_head_width_to_note_box_pre, rhythmic_head_width  WHERE rhythmic_head_width.id = new.id AND rhythmic_head_width_to_note_box_pre.x IS NOT NULL)  SELECT rhythmic_head_width_to_note_box.id, rhythmic_head_width_to_note_box.x, rhythmic_head_width_to_note_box.y, rhythmic_head_width_to_note_box.width, rhythmic_head_width_to_note_box.height  FROM rhythmic_head_width_to_note_box;       END;     CREATE TRIGGER staff_position_insert_del_note_box_ins_note_box_Xesc AFTER INSERT ON staff_position WHEN (EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width JOIN stem_end ON rhythmic_head_width.id = stem_end.id JOIN staff_position ON rhythmic_head_width.id = staff_position.id))       BEGIN                      DELETE FROM note_box WHERE EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width  WHERE note_box.id = new.id AND rhythmic_head_width.id = new.id);           INSERT INTO note_box (id, x, y, width, height) WITH box_candidates AS  (SELECT 0.0 AS x, staff_position.val AS y  FROM staff_position  WHERE staff_position.id = new.id UNION ALL SELECT rhythmic_head_width.val AS x, staff_position.val + stem_end.val AS y  FROM rhythmic_head_width, staff_position, stem_end  WHERE staff_position.id = new.id AND rhythmic_head_width.id = staff_position.id AND staff_position.id = stem_end.id),  rhythmic_head_width_to_note_box_pre AS  (SELECT rhythmic_head_width.id AS id, min(box_candidates.x) AS x, min(box_candidates.y) AS y, max(box_candidates.x) AS width, max(box_candidates.y) AS height  FROM rhythmic_head_width, box_candidates  WHERE rhythmic_head_width.id = new.id),  rhythmic_head_width_to_note_box AS  (SELECT rhythmic_head_width_to_note_box_pre.id AS id, rhythmic_head_width_to_note_box_pre.x AS x, rhythmic_head_width_to_note_box_pre.y AS y, rhythmic_head_width_to_note_box_pre.width AS width, rhythmic_head_width_to_note_box_pre.height AS height  FROM rhythmic_head_width_to_note_box_pre, rhythmic_head_width  WHERE rhythmic_head_width.id = new.id AND rhythmic_head_width_to_note_box_pre.x IS NOT NULL)  SELECT rhythmic_head_width_to_note_box.id, rhythmic_head_width_to_note_box.x, rhythmic_head_width_to_note_box.y, rhythmic_head_width_to_note_box.width, rhythmic_head_width_to_note_box.height  FROM rhythmic_head_width_to_note_box;       END;     CREATE TRIGGER rhythmic_head_width_update_del_note_box_ins_note_box_HDuG AFTER UPDATE ON rhythmic_head_width WHEN (EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width JOIN stem_end ON rhythmic_head_width.id = stem_end.id JOIN staff_position ON rhythmic_head_width.id = staff_position.id))       BEGIN                      DELETE FROM note_box WHERE EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width  WHERE note_box.id = new.id AND rhythmic_head_width.id = new.id);           INSERT INTO note_box (id, x, y, width, height) WITH box_candidates AS  (SELECT 0.0 AS x, staff_position.val AS y  FROM staff_position  WHERE staff_position.id = new.id UNION ALL SELECT rhythmic_head_width.val AS x, staff_position.val + stem_end.val AS y  FROM rhythmic_head_width, staff_position, stem_end  WHERE staff_position.id = new.id AND rhythmic_head_width.id = staff_position.id AND staff_position.id = stem_end.id),  rhythmic_head_width_to_note_box_pre AS  (SELECT rhythmic_head_width.id AS id, min(box_candidates.x) AS x, min(box_candidates.y) AS y, max(box_candidates.x) AS width, max(box_candidates.y) AS height  FROM rhythmic_head_width, box_candidates  WHERE rhythmic_head_width.id = new.id),  rhythmic_head_width_to_note_box AS  (SELECT rhythmic_head_width_to_note_box_pre.id AS id, rhythmic_head_width_to_note_box_pre.x AS x, rhythmic_head_width_to_note_box_pre.y AS y, rhythmic_head_width_to_note_box_pre.width AS width, rhythmic_head_width_to_note_box_pre.height AS height  FROM rhythmic_head_width_to_note_box_pre, rhythmic_head_width  WHERE rhythmic_head_width.id = new.id AND rhythmic_head_width_to_note_box_pre.x IS NOT NULL)  SELECT rhythmic_head_width_to_note_box.id, rhythmic_head_width_to_note_box.x, rhythmic_head_width_to_note_box.y, rhythmic_head_width_to_note_box.width, rhythmic_head_width_to_note_box.height  FROM rhythmic_head_width_to_note_box;       END;     CREATE TRIGGER stem_end_update_del_note_box_ins_note_box_VwUO AFTER UPDATE ON stem_end WHEN (EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width JOIN stem_end ON rhythmic_head_width.id = stem_end.id JOIN staff_position ON rhythmic_head_width.id = staff_position.id))       BEGIN                      DELETE FROM note_box WHERE EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width  WHERE note_box.id = new.id AND rhythmic_head_width.id = new.id);           INSERT INTO note_box (id, x, y, width, height) WITH box_candidates AS  (SELECT 0.0 AS x, staff_position.val AS y  FROM staff_position  WHERE staff_position.id = new.id UNION ALL SELECT rhythmic_head_width.val AS x, staff_position.val + stem_end.val AS y  FROM rhythmic_head_width, staff_position, stem_end  WHERE staff_position.id = new.id AND rhythmic_head_width.id = staff_position.id AND staff_position.id = stem_end.id),  rhythmic_head_width_to_note_box_pre AS  (SELECT rhythmic_head_width.id AS id, min(box_candidates.x) AS x, min(box_candidates.y) AS y, max(box_candidates.x) AS width, max(box_candidates.y) AS height  FROM rhythmic_head_width, box_candidates  WHERE rhythmic_head_width.id = new.id),  rhythmic_head_width_to_note_box AS  (SELECT rhythmic_head_width_to_note_box_pre.id AS id, rhythmic_head_width_to_note_box_pre.x AS x, rhythmic_head_width_to_note_box_pre.y AS y, rhythmic_head_width_to_note_box_pre.width AS width, rhythmic_head_width_to_note_box_pre.height AS height  FROM rhythmic_head_width_to_note_box_pre, rhythmic_head_width  WHERE rhythmic_head_width.id = new.id AND rhythmic_head_width_to_note_box_pre.x IS NOT NULL)  SELECT rhythmic_head_width_to_note_box.id, rhythmic_head_width_to_note_box.x, rhythmic_head_width_to_note_box.y, rhythmic_head_width_to_note_box.width, rhythmic_head_width_to_note_box.height  FROM rhythmic_head_width_to_note_box;       END;     CREATE TRIGGER staff_position_update_del_note_box_ins_note_box_XZqp AFTER UPDATE ON staff_position WHEN (EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width JOIN stem_end ON rhythmic_head_width.id = stem_end.id JOIN staff_position ON rhythmic_head_width.id = staff_position.id))       BEGIN                      DELETE FROM note_box WHERE EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width  WHERE note_box.id = new.id AND rhythmic_head_width.id = new.id);           INSERT INTO note_box (id, x, y, width, height) WITH box_candidates AS  (SELECT 0.0 AS x, staff_position.val AS y  FROM staff_position  WHERE staff_position.id = new.id UNION ALL SELECT rhythmic_head_width.val AS x, staff_position.val + stem_end.val AS y  FROM rhythmic_head_width, staff_position, stem_end  WHERE staff_position.id = new.id AND rhythmic_head_width.id = staff_position.id AND staff_position.id = stem_end.id),  rhythmic_head_width_to_note_box_pre AS  (SELECT rhythmic_head_width.id AS id, min(box_candidates.x) AS x, min(box_candidates.y) AS y, max(box_candidates.x) AS width, max(box_candidates.y) AS height  FROM rhythmic_head_width, box_candidates  WHERE rhythmic_head_width.id = new.id),  rhythmic_head_width_to_note_box AS  (SELECT rhythmic_head_width_to_note_box_pre.id AS id, rhythmic_head_width_to_note_box_pre.x AS x, rhythmic_head_width_to_note_box_pre.y AS y, rhythmic_head_width_to_note_box_pre.width AS width, rhythmic_head_width_to_note_box_pre.height AS height  FROM rhythmic_head_width_to_note_box_pre, rhythmic_head_width  WHERE rhythmic_head_width.id = new.id AND rhythmic_head_width_to_note_box_pre.x IS NOT NULL)  SELECT rhythmic_head_width_to_note_box.id, rhythmic_head_width_to_note_box.x, rhythmic_head_width_to_note_box.y, rhythmic_head_width_to_note_box.width, rhythmic_head_width_to_note_box.height  FROM rhythmic_head_width_to_note_box;       END;     CREATE TRIGGER rhythmic_head_width_delete_del_note_box_ins_note_box_YxRU AFTER DELETE ON rhythmic_head_width WHEN (EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width JOIN stem_end ON rhythmic_head_width.id = stem_end.id JOIN staff_position ON rhythmic_head_width.id = staff_position.id))       BEGIN                      DELETE FROM note_box WHERE EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width  WHERE note_box.id = old.id AND rhythmic_head_width.id = old.id);           INSERT INTO note_box (id, x, y, width, height) WITH box_candidates AS  (SELECT 0.0 AS x, staff_position.val AS y  FROM staff_position  WHERE staff_position.id = old.id UNION ALL SELECT rhythmic_head_width.val AS x, staff_position.val + stem_end.val AS y  FROM rhythmic_head_width, staff_position, stem_end  WHERE staff_position.id = old.id AND rhythmic_head_width.id = staff_position.id AND staff_position.id = stem_end.id),  rhythmic_head_width_to_note_box_pre AS  (SELECT rhythmic_head_width.id AS id, min(box_candidates.x) AS x, min(box_candidates.y) AS y, max(box_candidates.x) AS width, max(box_candidates.y) AS height  FROM rhythmic_head_width, box_candidates  WHERE rhythmic_head_width.id = old.id),  rhythmic_head_width_to_note_box AS  (SELECT rhythmic_head_width_to_note_box_pre.id AS id, rhythmic_head_width_to_note_box_pre.x AS x, rhythmic_head_width_to_note_box_pre.y AS y, rhythmic_head_width_to_note_box_pre.width AS width, rhythmic_head_width_to_note_box_pre.height AS height  FROM rhythmic_head_width_to_note_box_pre, rhythmic_head_width  WHERE rhythmic_head_width.id = old.id AND rhythmic_head_width_to_note_box_pre.x IS NOT NULL)  SELECT rhythmic_head_width_to_note_box.id, rhythmic_head_width_to_note_box.x, rhythmic_head_width_to_note_box.y, rhythmic_head_width_to_note_box.width, rhythmic_head_width_to_note_box.height  FROM rhythmic_head_width_to_note_box;       END;     CREATE TRIGGER stem_end_delete_del_note_box_ins_note_box_HVvk AFTER DELETE ON stem_end WHEN (EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width JOIN stem_end ON rhythmic_head_width.id = stem_end.id JOIN staff_position ON rhythmic_head_width.id = staff_position.id))       BEGIN                      DELETE FROM note_box WHERE EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width  WHERE note_box.id = old.id AND rhythmic_head_width.id = old.id);           INSERT INTO note_box (id, x, y, width, height) WITH box_candidates AS  (SELECT 0.0 AS x, staff_position.val AS y  FROM staff_position  WHERE staff_position.id = old.id UNION ALL SELECT rhythmic_head_width.val AS x, staff_position.val + stem_end.val AS y  FROM rhythmic_head_width, staff_position, stem_end  WHERE staff_position.id = old.id AND rhythmic_head_width.id = staff_position.id AND staff_position.id = stem_end.id),  rhythmic_head_width_to_note_box_pre AS  (SELECT rhythmic_head_width.id AS id, min(box_candidates.x) AS x, min(box_candidates.y) AS y, max(box_candidates.x) AS width, max(box_candidates.y) AS height  FROM rhythmic_head_width, box_candidates  WHERE rhythmic_head_width.id = old.id),  rhythmic_head_width_to_note_box AS  (SELECT rhythmic_head_width_to_note_box_pre.id AS id, rhythmic_head_width_to_note_box_pre.x AS x, rhythmic_head_width_to_note_box_pre.y AS y, rhythmic_head_width_to_note_box_pre.width AS width, rhythmic_head_width_to_note_box_pre.height AS height  FROM rhythmic_head_width_to_note_box_pre, rhythmic_head_width  WHERE rhythmic_head_width.id = old.id AND rhythmic_head_width_to_note_box_pre.x IS NOT NULL)  SELECT rhythmic_head_width_to_note_box.id, rhythmic_head_width_to_note_box.x, rhythmic_head_width_to_note_box.y, rhythmic_head_width_to_note_box.width, rhythmic_head_width_to_note_box.height  FROM rhythmic_head_width_to_note_box;       END;     CREATE TRIGGER staff_position_delete_del_note_box_ins_note_box_HDsC AFTER DELETE ON staff_position WHEN (EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width JOIN stem_end ON rhythmic_head_width.id = stem_end.id JOIN staff_position ON rhythmic_head_width.id = staff_position.id))       BEGIN                      DELETE FROM note_box WHERE EXISTS (SELECT rhythmic_head_width.id  FROM rhythmic_head_width  WHERE note_box.id = old.id AND rhythmic_head_width.id = old.id);           INSERT INTO note_box (id, x, y, width, height) WITH box_candidates AS  (SELECT 0.0 AS x, staff_position.val AS y  FROM staff_position  WHERE staff_position.id = old.id UNION ALL SELECT rhythmic_head_width.val AS x, staff_position.val + stem_end.val AS y  FROM rhythmic_head_width, staff_position, stem_end  WHERE staff_position.id = old.id AND rhythmic_head_width.id = staff_position.id AND staff_position.id = stem_end.id),  rhythmic_head_width_to_note_box_pre AS  (SELECT rhythmic_head_width.id AS id, min(box_candidates.x) AS x, min(box_candidates.y) AS y, max(box_candidates.x) AS width, max(box_candidates.y) AS height  FROM rhythmic_head_width, box_candidates  WHERE rhythmic_head_width.id = old.id),  rhythmic_head_width_to_note_box AS  (SELECT rhythmic_head_width_to_note_box_pre.id AS id, rhythmic_head_width_to_note_box_pre.x AS x, rhythmic_head_width_to_note_box_pre.y AS y, rhythmic_head_width_to_note_box_pre.width AS width, rhythmic_head_width_to_note_box_pre.height AS height  FROM rhythmic_head_width_to_note_box_pre, rhythmic_head_width  WHERE rhythmic_head_width.id = old.id AND rhythmic_head_width_to_note_box_pre.x IS NOT NULL)  SELECT rhythmic_head_width_to_note_box.id, rhythmic_head_width_to_note_box.x, rhythmic_head_width_to_note_box.y, rhythmic_head_width_to_note_box.width, rhythmic_head_width_to_note_box.height  FROM rhythmic_head_width_to_note_box;       END;     CREATE TRIGGER anchor_insert_del_anchor_x_ins_anchor_x_UIGz AFTER INSERT ON anchor        BEGIN                      DELETE FROM anchor_x WHERE anchor_x.id = new.id;           INSERT INTO anchor_x (id, val) SELECT id, val  FROM (SELECT anchor.id AS id, anchor.val AS val  FROM anchor);       END;     CREATE TRIGGER anchor_update_del_anchor_x_ins_anchor_x_Cmij AFTER UPDATE ON anchor        BEGIN                      DELETE FROM anchor_x WHERE anchor_x.id = new.id;           INSERT INTO anchor_x (id, val) SELECT id, val  FROM (SELECT anchor.id AS id, anchor.val AS val  FROM anchor);       END;     CREATE TRIGGER anchor_delete_del_anchor_x_ins_anchor_x_DpBw AFTER DELETE ON anchor        BEGIN                      DELETE FROM anchor_x WHERE anchor_x.id = old.id;           INSERT INTO anchor_x (id, val) SELECT id, val  FROM (SELECT anchor.id AS id, anchor.val AS val  FROM anchor);       END;     CREATE TRIGGER anchor_insert_del_anchor_y_ins_anchor_y_EPAO AFTER INSERT ON anchor        BEGIN                      DELETE FROM anchor_y WHERE anchor_y.id = new.id;           INSERT INTO anchor_y (id, val) SELECT id, val  FROM (SELECT anchor.id AS id, anchor.val AS val  FROM anchor);       END;     CREATE TRIGGER anchor_update_del_anchor_y_ins_anchor_y_VdOG AFTER UPDATE ON anchor        BEGIN                      DELETE FROM anchor_y WHERE anchor_y.id = new.id;           INSERT INTO anchor_y (id, val) SELECT id, val  FROM (SELECT anchor.id AS id, anchor.val AS val  FROM anchor);       END;     CREATE TRIGGER anchor_delete_del_anchor_y_ins_anchor_y_SOdz AFTER DELETE ON anchor        BEGIN                      DELETE FROM anchor_y WHERE anchor_y.id = old.id;           INSERT INTO anchor_y (id, val) SELECT id, val  FROM (SELECT anchor.id AS id, anchor.val AS val  FROM anchor);       END;     CREATE TRIGGER anchor_x_insert_del_anchored_x_position_ins_anchored_x_position_JayP AFTER INSERT ON anchor_x        BEGIN                      DELETE FROM anchored_x_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT new.id AS id UNION ALL SELECT anchor_x.id AS id  FROM anchor_x, anchors AS stmt_prev  WHERE anchor_x.val = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE anchored_x_position.id = anchors.id);           INSERT INTO anchored_x_position (id, val) WITH RECURSIVE first_position_runner(id, counter, val) AS  (SELECT x_position.id AS id, 0 AS counter, anchored_x_position.val AS val  FROM x_position LEFT OUTER JOIN anchored_x_position ON x_position.id = anchored_x_position.id  WHERE x_position.id = new.id AND anchored_x_position.val IS NULL UNION ALL SELECT anchor_x.val AS id, first_position_runner_prev.counter + 1 AS counter, anchored_x_position.val AS val  FROM first_position_runner AS first_position_runner_prev, anchor_x LEFT OUTER JOIN anchored_x_position ON anchor_x.val = anchored_x_position.id  WHERE anchor_x.id = first_position_runner_prev.id AND anchored_x_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  position_recurser(id, val) AS  (SELECT x_position.id AS id, x_position.val + CASE WHEN (anchored_x_position.val IS NOT NULL) THEN anchored_x_position.val ELSE 0.0 END AS val  FROM starting_id, x_position LEFT OUTER JOIN anchor_x ON x_position.id = anchor_x.id LEFT OUTER JOIN anchored_x_position ON anchor_x.val = anchored_x_position.id  WHERE starting_id.id = x_position.id UNION ALL SELECT anchor_x.id AS id, local_position_prev.val + x_position.val AS anon_1  FROM anchor_x, position_recurser AS local_position_prev, x_position  WHERE anchor_x.val = local_position_prev.id AND x_position.id = anchor_x.id)  SELECT position_recurser.id, position_recurser.val  FROM position_recurser;       END;     CREATE TRIGGER x_position_insert_del_anchored_x_position_ins_anchored_x_position_FZnr AFTER INSERT ON x_position        BEGIN                      DELETE FROM anchored_x_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT new.id AS id UNION ALL SELECT anchor_x.id AS id  FROM anchor_x, anchors AS stmt_prev  WHERE anchor_x.val = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE anchored_x_position.id = anchors.id);           INSERT INTO anchored_x_position (id, val) WITH RECURSIVE first_position_runner(id, counter, val) AS  (SELECT x_position.id AS id, 0 AS counter, anchored_x_position.val AS val  FROM x_position LEFT OUTER JOIN anchored_x_position ON x_position.id = anchored_x_position.id  WHERE x_position.id = new.id AND anchored_x_position.val IS NULL UNION ALL SELECT anchor_x.val AS id, first_position_runner_prev.counter + 1 AS counter, anchored_x_position.val AS val  FROM first_position_runner AS first_position_runner_prev, anchor_x LEFT OUTER JOIN anchored_x_position ON anchor_x.val = anchored_x_position.id  WHERE anchor_x.id = first_position_runner_prev.id AND anchored_x_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  position_recurser(id, val) AS  (SELECT x_position.id AS id, x_position.val + CASE WHEN (anchored_x_position.val IS NOT NULL) THEN anchored_x_position.val ELSE 0.0 END AS val  FROM starting_id, x_position LEFT OUTER JOIN anchor_x ON x_position.id = anchor_x.id LEFT OUTER JOIN anchored_x_position ON anchor_x.val = anchored_x_position.id  WHERE starting_id.id = x_position.id UNION ALL SELECT anchor_x.id AS id, local_position_prev.val + x_position.val AS anon_1  FROM anchor_x, position_recurser AS local_position_prev, x_position  WHERE anchor_x.val = local_position_prev.id AND x_position.id = anchor_x.id)  SELECT position_recurser.id, position_recurser.val  FROM position_recurser;       END;     CREATE TRIGGER anchor_x_update_del_anchored_x_position_ins_anchored_x_position_AzXv AFTER UPDATE ON anchor_x        BEGIN                      DELETE FROM anchored_x_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT new.id AS id UNION ALL SELECT anchor_x.id AS id  FROM anchor_x, anchors AS stmt_prev  WHERE anchor_x.val = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE anchored_x_position.id = anchors.id);           INSERT INTO anchored_x_position (id, val) WITH RECURSIVE first_position_runner(id, counter, val) AS  (SELECT x_position.id AS id, 0 AS counter, anchored_x_position.val AS val  FROM x_position LEFT OUTER JOIN anchored_x_position ON x_position.id = anchored_x_position.id  WHERE x_position.id = new.id AND anchored_x_position.val IS NULL UNION ALL SELECT anchor_x.val AS id, first_position_runner_prev.counter + 1 AS counter, anchored_x_position.val AS val  FROM first_position_runner AS first_position_runner_prev, anchor_x LEFT OUTER JOIN anchored_x_position ON anchor_x.val = anchored_x_position.id  WHERE anchor_x.id = first_position_runner_prev.id AND anchored_x_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  position_recurser(id, val) AS  (SELECT x_position.id AS id, x_position.val + CASE WHEN (anchored_x_position.val IS NOT NULL) THEN anchored_x_position.val ELSE 0.0 END AS val  FROM starting_id, x_position LEFT OUTER JOIN anchor_x ON x_position.id = anchor_x.id LEFT OUTER JOIN anchored_x_position ON anchor_x.val = anchored_x_position.id  WHERE starting_id.id = x_position.id UNION ALL SELECT anchor_x.id AS id, local_position_prev.val + x_position.val AS anon_1  FROM anchor_x, position_recurser AS local_position_prev, x_position  WHERE anchor_x.val = local_position_prev.id AND x_position.id = anchor_x.id)  SELECT position_recurser.id, position_recurser.val  FROM position_recurser;       END;     CREATE TRIGGER x_position_update_del_anchored_x_position_ins_anchored_x_position_YvcL AFTER UPDATE ON x_position        BEGIN                      DELETE FROM anchored_x_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT new.id AS id UNION ALL SELECT anchor_x.id AS id  FROM anchor_x, anchors AS stmt_prev  WHERE anchor_x.val = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE anchored_x_position.id = anchors.id);           INSERT INTO anchored_x_position (id, val) WITH RECURSIVE first_position_runner(id, counter, val) AS  (SELECT x_position.id AS id, 0 AS counter, anchored_x_position.val AS val  FROM x_position LEFT OUTER JOIN anchored_x_position ON x_position.id = anchored_x_position.id  WHERE x_position.id = new.id AND anchored_x_position.val IS NULL UNION ALL SELECT anchor_x.val AS id, first_position_runner_prev.counter + 1 AS counter, anchored_x_position.val AS val  FROM first_position_runner AS first_position_runner_prev, anchor_x LEFT OUTER JOIN anchored_x_position ON anchor_x.val = anchored_x_position.id  WHERE anchor_x.id = first_position_runner_prev.id AND anchored_x_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  position_recurser(id, val) AS  (SELECT x_position.id AS id, x_position.val + CASE WHEN (anchored_x_position.val IS NOT NULL) THEN anchored_x_position.val ELSE 0.0 END AS val  FROM starting_id, x_position LEFT OUTER JOIN anchor_x ON x_position.id = anchor_x.id LEFT OUTER JOIN anchored_x_position ON anchor_x.val = anchored_x_position.id  WHERE starting_id.id = x_position.id UNION ALL SELECT anchor_x.id AS id, local_position_prev.val + x_position.val AS anon_1  FROM anchor_x, position_recurser AS local_position_prev, x_position  WHERE anchor_x.val = local_position_prev.id AND x_position.id = anchor_x.id)  SELECT position_recurser.id, position_recurser.val  FROM position_recurser;       END;     CREATE TRIGGER anchor_x_delete_del_anchored_x_position_ins_anchored_x_position_HlEy AFTER DELETE ON anchor_x        BEGIN                      DELETE FROM anchored_x_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT old.id AS id UNION ALL SELECT anchor_x.id AS id  FROM anchor_x, anchors AS stmt_prev  WHERE anchor_x.val = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE anchored_x_position.id = anchors.id);           INSERT INTO anchored_x_position (id, val) WITH RECURSIVE first_position_runner(id, counter, val) AS  (SELECT x_position.id AS id, 0 AS counter, anchored_x_position.val AS val  FROM x_position LEFT OUTER JOIN anchored_x_position ON x_position.id = anchored_x_position.id  WHERE x_position.id = old.id AND anchored_x_position.val IS NULL UNION ALL SELECT anchor_x.val AS id, first_position_runner_prev.counter + 1 AS counter, anchored_x_position.val AS val  FROM first_position_runner AS first_position_runner_prev, anchor_x LEFT OUTER JOIN anchored_x_position ON anchor_x.val = anchored_x_position.id  WHERE anchor_x.id = first_position_runner_prev.id AND anchored_x_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  position_recurser(id, val) AS  (SELECT x_position.id AS id, x_position.val + CASE WHEN (anchored_x_position.val IS NOT NULL) THEN anchored_x_position.val ELSE 0.0 END AS val  FROM starting_id, x_position LEFT OUTER JOIN anchor_x ON x_position.id = anchor_x.id LEFT OUTER JOIN anchored_x_position ON anchor_x.val = anchored_x_position.id  WHERE starting_id.id = x_position.id UNION ALL SELECT anchor_x.id AS id, local_position_prev.val + x_position.val AS anon_1  FROM anchor_x, position_recurser AS local_position_prev, x_position  WHERE anchor_x.val = local_position_prev.id AND x_position.id = anchor_x.id)  SELECT position_recurser.id, position_recurser.val  FROM position_recurser;       END;     CREATE TRIGGER x_position_delete_del_anchored_x_position_ins_anchored_x_position_JTKB AFTER DELETE ON x_position        BEGIN                      DELETE FROM anchored_x_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT old.id AS id UNION ALL SELECT anchor_x.id AS id  FROM anchor_x, anchors AS stmt_prev  WHERE anchor_x.val = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE anchored_x_position.id = anchors.id);           INSERT INTO anchored_x_position (id, val) WITH RECURSIVE first_position_runner(id, counter, val) AS  (SELECT x_position.id AS id, 0 AS counter, anchored_x_position.val AS val  FROM x_position LEFT OUTER JOIN anchored_x_position ON x_position.id = anchored_x_position.id  WHERE x_position.id = old.id AND anchored_x_position.val IS NULL UNION ALL SELECT anchor_x.val AS id, first_position_runner_prev.counter + 1 AS counter, anchored_x_position.val AS val  FROM first_position_runner AS first_position_runner_prev, anchor_x LEFT OUTER JOIN anchored_x_position ON anchor_x.val = anchored_x_position.id  WHERE anchor_x.id = first_position_runner_prev.id AND anchored_x_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  position_recurser(id, val) AS  (SELECT x_position.id AS id, x_position.val + CASE WHEN (anchored_x_position.val IS NOT NULL) THEN anchored_x_position.val ELSE 0.0 END AS val  FROM starting_id, x_position LEFT OUTER JOIN anchor_x ON x_position.id = anchor_x.id LEFT OUTER JOIN anchored_x_position ON anchor_x.val = anchored_x_position.id  WHERE starting_id.id = x_position.id UNION ALL SELECT anchor_x.id AS id, local_position_prev.val + x_position.val AS anon_1  FROM anchor_x, position_recurser AS local_position_prev, x_position  WHERE anchor_x.val = local_position_prev.id AND x_position.id = anchor_x.id)  SELECT position_recurser.id, position_recurser.val  FROM position_recurser;       END;     CREATE TRIGGER anchor_y_insert_del_anchored_y_position_ins_anchored_y_position_Usoa AFTER INSERT ON anchor_y        BEGIN                      DELETE FROM anchored_y_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT new.id AS id UNION ALL SELECT anchor_y.id AS id  FROM anchor_y, anchors AS stmt_prev  WHERE anchor_y.val = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE anchored_y_position.id = anchors.id);           INSERT INTO anchored_y_position (id, val) WITH RECURSIVE first_position_runner(id, counter, val) AS  (SELECT y_position.id AS id, 0 AS counter, anchored_y_position.val AS val  FROM y_position LEFT OUTER JOIN anchored_y_position ON y_position.id = anchored_y_position.id  WHERE y_position.id = new.id AND anchored_y_position.val IS NULL UNION ALL SELECT anchor_y.val AS id, first_position_runner_prev.counter + 1 AS counter, anchored_y_position.val AS val  FROM first_position_runner AS first_position_runner_prev, anchor_y LEFT OUTER JOIN anchored_y_position ON anchor_y.val = anchored_y_position.id  WHERE anchor_y.id = first_position_runner_prev.id AND anchored_y_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  position_recurser(id, val) AS  (SELECT y_position.id AS id, y_position.val + CASE WHEN (anchored_y_position.val IS NOT NULL) THEN anchored_y_position.val ELSE 0.0 END AS val  FROM starting_id, y_position LEFT OUTER JOIN anchor_y ON y_position.id = anchor_y.id LEFT OUTER JOIN anchored_y_position ON anchor_y.val = anchored_y_position.id  WHERE starting_id.id = y_position.id UNION ALL SELECT anchor_y.id AS id, local_position_prev.val + y_position.val AS anon_1  FROM anchor_y, position_recurser AS local_position_prev, y_position  WHERE anchor_y.val = local_position_prev.id AND y_position.id = anchor_y.id)  SELECT position_recurser.id, position_recurser.val  FROM position_recurser;       END;     CREATE TRIGGER y_position_insert_del_anchored_y_position_ins_anchored_y_position_ZMIM AFTER INSERT ON y_position        BEGIN                      DELETE FROM anchored_y_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT new.id AS id UNION ALL SELECT anchor_y.id AS id  FROM anchor_y, anchors AS stmt_prev  WHERE anchor_y.val = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE anchored_y_position.id = anchors.id);           INSERT INTO anchored_y_position (id, val) WITH RECURSIVE first_position_runner(id, counter, val) AS  (SELECT y_position.id AS id, 0 AS counter, anchored_y_position.val AS val  FROM y_position LEFT OUTER JOIN anchored_y_position ON y_position.id = anchored_y_position.id  WHERE y_position.id = new.id AND anchored_y_position.val IS NULL UNION ALL SELECT anchor_y.val AS id, first_position_runner_prev.counter + 1 AS counter, anchored_y_position.val AS val  FROM first_position_runner AS first_position_runner_prev, anchor_y LEFT OUTER JOIN anchored_y_position ON anchor_y.val = anchored_y_position.id  WHERE anchor_y.id = first_position_runner_prev.id AND anchored_y_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  position_recurser(id, val) AS  (SELECT y_position.id AS id, y_position.val + CASE WHEN (anchored_y_position.val IS NOT NULL) THEN anchored_y_position.val ELSE 0.0 END AS val  FROM starting_id, y_position LEFT OUTER JOIN anchor_y ON y_position.id = anchor_y.id LEFT OUTER JOIN anchored_y_position ON anchor_y.val = anchored_y_position.id  WHERE starting_id.id = y_position.id UNION ALL SELECT anchor_y.id AS id, local_position_prev.val + y_position.val AS anon_1  FROM anchor_y, position_recurser AS local_position_prev, y_position  WHERE anchor_y.val = local_position_prev.id AND y_position.id = anchor_y.id)  SELECT position_recurser.id, position_recurser.val  FROM position_recurser;       END;     CREATE TRIGGER anchor_y_update_del_anchored_y_position_ins_anchored_y_position_OQGQ AFTER UPDATE ON anchor_y        BEGIN                      DELETE FROM anchored_y_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT new.id AS id UNION ALL SELECT anchor_y.id AS id  FROM anchor_y, anchors AS stmt_prev  WHERE anchor_y.val = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE anchored_y_position.id = anchors.id);           INSERT INTO anchored_y_position (id, val) WITH RECURSIVE first_position_runner(id, counter, val) AS  (SELECT y_position.id AS id, 0 AS counter, anchored_y_position.val AS val  FROM y_position LEFT OUTER JOIN anchored_y_position ON y_position.id = anchored_y_position.id  WHERE y_position.id = new.id AND anchored_y_position.val IS NULL UNION ALL SELECT anchor_y.val AS id, first_position_runner_prev.counter + 1 AS counter, anchored_y_position.val AS val  FROM first_position_runner AS first_position_runner_prev, anchor_y LEFT OUTER JOIN anchored_y_position ON anchor_y.val = anchored_y_position.id  WHERE anchor_y.id = first_position_runner_prev.id AND anchored_y_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  position_recurser(id, val) AS  (SELECT y_position.id AS id, y_position.val + CASE WHEN (anchored_y_position.val IS NOT NULL) THEN anchored_y_position.val ELSE 0.0 END AS val  FROM starting_id, y_position LEFT OUTER JOIN anchor_y ON y_position.id = anchor_y.id LEFT OUTER JOIN anchored_y_position ON anchor_y.val = anchored_y_position.id  WHERE starting_id.id = y_position.id UNION ALL SELECT anchor_y.id AS id, local_position_prev.val + y_position.val AS anon_1  FROM anchor_y, position_recurser AS local_position_prev, y_position  WHERE anchor_y.val = local_position_prev.id AND y_position.id = anchor_y.id)  SELECT position_recurser.id, position_recurser.val  FROM position_recurser;       END;     CREATE TRIGGER y_position_update_del_anchored_y_position_ins_anchored_y_position_Fabn AFTER UPDATE ON y_position        BEGIN                      DELETE FROM anchored_y_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT new.id AS id UNION ALL SELECT anchor_y.id AS id  FROM anchor_y, anchors AS stmt_prev  WHERE anchor_y.val = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE anchored_y_position.id = anchors.id);           INSERT INTO anchored_y_position (id, val) WITH RECURSIVE first_position_runner(id, counter, val) AS  (SELECT y_position.id AS id, 0 AS counter, anchored_y_position.val AS val  FROM y_position LEFT OUTER JOIN anchored_y_position ON y_position.id = anchored_y_position.id  WHERE y_position.id = new.id AND anchored_y_position.val IS NULL UNION ALL SELECT anchor_y.val AS id, first_position_runner_prev.counter + 1 AS counter, anchored_y_position.val AS val  FROM first_position_runner AS first_position_runner_prev, anchor_y LEFT OUTER JOIN anchored_y_position ON anchor_y.val = anchored_y_position.id  WHERE anchor_y.id = first_position_runner_prev.id AND anchored_y_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  position_recurser(id, val) AS  (SELECT y_position.id AS id, y_position.val + CASE WHEN (anchored_y_position.val IS NOT NULL) THEN anchored_y_position.val ELSE 0.0 END AS val  FROM starting_id, y_position LEFT OUTER JOIN anchor_y ON y_position.id = anchor_y.id LEFT OUTER JOIN anchored_y_position ON anchor_y.val = anchored_y_position.id  WHERE starting_id.id = y_position.id UNION ALL SELECT anchor_y.id AS id, local_position_prev.val + y_position.val AS anon_1  FROM anchor_y, position_recurser AS local_position_prev, y_position  WHERE anchor_y.val = local_position_prev.id AND y_position.id = anchor_y.id)  SELECT position_recurser.id, position_recurser.val  FROM position_recurser;       END;     CREATE TRIGGER anchor_y_delete_del_anchored_y_position_ins_anchored_y_position_SATH AFTER DELETE ON anchor_y        BEGIN                      DELETE FROM anchored_y_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT old.id AS id UNION ALL SELECT anchor_y.id AS id  FROM anchor_y, anchors AS stmt_prev  WHERE anchor_y.val = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE anchored_y_position.id = anchors.id);           INSERT INTO anchored_y_position (id, val) WITH RECURSIVE first_position_runner(id, counter, val) AS  (SELECT y_position.id AS id, 0 AS counter, anchored_y_position.val AS val  FROM y_position LEFT OUTER JOIN anchored_y_position ON y_position.id = anchored_y_position.id  WHERE y_position.id = old.id AND anchored_y_position.val IS NULL UNION ALL SELECT anchor_y.val AS id, first_position_runner_prev.counter + 1 AS counter, anchored_y_position.val AS val  FROM first_position_runner AS first_position_runner_prev, anchor_y LEFT OUTER JOIN anchored_y_position ON anchor_y.val = anchored_y_position.id  WHERE anchor_y.id = first_position_runner_prev.id AND anchored_y_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  position_recurser(id, val) AS  (SELECT y_position.id AS id, y_position.val + CASE WHEN (anchored_y_position.val IS NOT NULL) THEN anchored_y_position.val ELSE 0.0 END AS val  FROM starting_id, y_position LEFT OUTER JOIN anchor_y ON y_position.id = anchor_y.id LEFT OUTER JOIN anchored_y_position ON anchor_y.val = anchored_y_position.id  WHERE starting_id.id = y_position.id UNION ALL SELECT anchor_y.id AS id, local_position_prev.val + y_position.val AS anon_1  FROM anchor_y, position_recurser AS local_position_prev, y_position  WHERE anchor_y.val = local_position_prev.id AND y_position.id = anchor_y.id)  SELECT position_recurser.id, position_recurser.val  FROM position_recurser;       END;     CREATE TRIGGER y_position_delete_del_anchored_y_position_ins_anchored_y_position_WewW AFTER DELETE ON y_position        BEGIN                      DELETE FROM anchored_y_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT old.id AS id UNION ALL SELECT anchor_y.id AS id  FROM anchor_y, anchors AS stmt_prev  WHERE anchor_y.val = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE anchored_y_position.id = anchors.id);           INSERT INTO anchored_y_position (id, val) WITH RECURSIVE first_position_runner(id, counter, val) AS  (SELECT y_position.id AS id, 0 AS counter, anchored_y_position.val AS val  FROM y_position LEFT OUTER JOIN anchored_y_position ON y_position.id = anchored_y_position.id  WHERE y_position.id = old.id AND anchored_y_position.val IS NULL UNION ALL SELECT anchor_y.val AS id, first_position_runner_prev.counter + 1 AS counter, anchored_y_position.val AS val  FROM first_position_runner AS first_position_runner_prev, anchor_y LEFT OUTER JOIN anchored_y_position ON anchor_y.val = anchored_y_position.id  WHERE anchor_y.id = first_position_runner_prev.id AND anchored_y_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  position_recurser(id, val) AS  (SELECT y_position.id AS id, y_position.val + CASE WHEN (anchored_y_position.val IS NOT NULL) THEN anchored_y_position.val ELSE 0.0 END AS val  FROM starting_id, y_position LEFT OUTER JOIN anchor_y ON y_position.id = anchor_y.id LEFT OUTER JOIN anchored_y_position ON anchor_y.val = anchored_y_position.id  WHERE starting_id.id = y_position.id UNION ALL SELECT anchor_y.id AS id, local_position_prev.val + y_position.val AS anon_1  FROM anchor_y, position_recurser AS local_position_prev, y_position  WHERE anchor_y.val = local_position_prev.id AND y_position.id = anchor_y.id)  SELECT position_recurser.id, position_recurser.val  FROM position_recurser;       END;     CREATE TRIGGER dynamic_direction_insert_del_alignment_directive_ins_alignment_directive_YXrW AFTER INSERT ON dynamic_direction        BEGIN                      DELETE FROM alignment_directive WHERE alignment_directive.id = new.id;           INSERT INTO alignment_directive (id, y) SELECT dynamic_direction.id AS id, (dynamic_direction.val + 1.0) / 2.0 AS y  FROM dynamic_direction  WHERE dynamic_direction.id = new.id;       END;     CREATE TRIGGER dynamic_direction_update_del_alignment_directive_ins_alignment_directive_HsPF AFTER UPDATE ON dynamic_direction        BEGIN                      DELETE FROM alignment_directive WHERE alignment_directive.id = new.id;           INSERT INTO alignment_directive (id, y) SELECT dynamic_direction.id AS id, (dynamic_direction.val + 1.0) / 2.0 AS y  FROM dynamic_direction  WHERE dynamic_direction.id = new.id;       END;     CREATE TRIGGER dynamic_direction_delete_del_alignment_directive_ins_alignment_directive_CHGl AFTER DELETE ON dynamic_direction        BEGIN                      DELETE FROM alignment_directive WHERE alignment_directive.id = old.id;           INSERT INTO alignment_directive (id, y) SELECT dynamic_direction.id AS id, (dynamic_direction.val + 1.0) / 2.0 AS y  FROM dynamic_direction  WHERE dynamic_direction.id = old.id;       END;     CREATE TRIGGER dynamic_insert_del_unicode_ins_unicode_GZFZ AFTER INSERT ON dynamic        BEGIN                      DELETE FROM unicode WHERE unicode.id = new.id;           INSERT INTO unicode (id, val) WITH dynamic_to_unicode AS  (SELECT dynamic.id AS id, CASE WHEN (dynamic.val = \'pppppp\') THEN \'U+E527\' WHEN (dynamic.val = \'ppppp\') THEN \'U+E528\' WHEN (dynamic.val = \'pppp\') THEN \'U+E529\' WHEN (dynamic.val = \'ppp\') THEN \'U+E52A\' WHEN (dynamic.val = \'pp\') THEN \'U+E52B\' WHEN (dynamic.val = \'p\') THEN \'U+E520\' WHEN (dynamic.val = \'mp\') THEN \'U+E52C\' WHEN (dynamic.val = \'mf\') THEN \'U+E52D\' WHEN (dynamic.val = \'p\') THEN \'U+E522\' WHEN (dynamic.val = \'pf\') THEN \'U+E52E\' WHEN (dynamic.val = \'f\') THEN \'U+E522\' WHEN (dynamic.val = \'ff\') THEN \'U+E52F\' WHEN (dynamic.val = \'fff\') THEN \'U+E530\' WHEN (dynamic.val = \'ffff\') THEN \'U+E531\' WHEN (dynamic.val = \'fffff\') THEN \'U+E532\' WHEN (dynamic.val = \'ffffff\') THEN \'U+E533\' WHEN (dynamic.val = \'fp\') THEN \'U+E534\' WHEN (dynamic.val = \'fz\') THEN \'U+E535\' WHEN (dynamic.val = \'sf\') THEN \'U+E536\' WHEN (dynamic.val = \'sfp\') THEN \'U+E537\' WHEN (dynamic.val = \'sfpp\') THEN \'U+E538\' WHEN (dynamic.val = \'sfz\') THEN \'U+E539\' END AS anon_1  FROM dynamic  WHERE dynamic.id = new.id)  SELECT dynamic_to_unicode.id, dynamic_to_unicode.anon_1  FROM dynamic_to_unicode;       END;     CREATE TRIGGER dynamic_update_del_unicode_ins_unicode_NOOl AFTER UPDATE ON dynamic        BEGIN                      DELETE FROM unicode WHERE unicode.id = new.id;           INSERT INTO unicode (id, val) WITH dynamic_to_unicode AS  (SELECT dynamic.id AS id, CASE WHEN (dynamic.val = \'pppppp\') THEN \'U+E527\' WHEN (dynamic.val = \'ppppp\') THEN \'U+E528\' WHEN (dynamic.val = \'pppp\') THEN \'U+E529\' WHEN (dynamic.val = \'ppp\') THEN \'U+E52A\' WHEN (dynamic.val = \'pp\') THEN \'U+E52B\' WHEN (dynamic.val = \'p\') THEN \'U+E520\' WHEN (dynamic.val = \'mp\') THEN \'U+E52C\' WHEN (dynamic.val = \'mf\') THEN \'U+E52D\' WHEN (dynamic.val = \'p\') THEN \'U+E522\' WHEN (dynamic.val = \'pf\') THEN \'U+E52E\' WHEN (dynamic.val = \'f\') THEN \'U+E522\' WHEN (dynamic.val = \'ff\') THEN \'U+E52F\' WHEN (dynamic.val = \'fff\') THEN \'U+E530\' WHEN (dynamic.val = \'ffff\') THEN \'U+E531\' WHEN (dynamic.val = \'fffff\') THEN \'U+E532\' WHEN (dynamic.val = \'ffffff\') THEN \'U+E533\' WHEN (dynamic.val = \'fp\') THEN \'U+E534\' WHEN (dynamic.val = \'fz\') THEN \'U+E535\' WHEN (dynamic.val = \'sf\') THEN \'U+E536\' WHEN (dynamic.val = \'sfp\') THEN \'U+E537\' WHEN (dynamic.val = \'sfpp\') THEN \'U+E538\' WHEN (dynamic.val = \'sfz\') THEN \'U+E539\' END AS anon_1  FROM dynamic  WHERE dynamic.id = new.id)  SELECT dynamic_to_unicode.id, dynamic_to_unicode.anon_1  FROM dynamic_to_unicode;       END;     CREATE TRIGGER dynamic_delete_del_unicode_ins_unicode_ZQZU AFTER DELETE ON dynamic        BEGIN                      DELETE FROM unicode WHERE unicode.id = old.id;           INSERT INTO unicode (id, val) WITH dynamic_to_unicode AS  (SELECT dynamic.id AS id, CASE WHEN (dynamic.val = \'pppppp\') THEN \'U+E527\' WHEN (dynamic.val = \'ppppp\') THEN \'U+E528\' WHEN (dynamic.val = \'pppp\') THEN \'U+E529\' WHEN (dynamic.val = \'ppp\') THEN \'U+E52A\' WHEN (dynamic.val = \'pp\') THEN \'U+E52B\' WHEN (dynamic.val = \'p\') THEN \'U+E520\' WHEN (dynamic.val = \'mp\') THEN \'U+E52C\' WHEN (dynamic.val = \'mf\') THEN \'U+E52D\' WHEN (dynamic.val = \'p\') THEN \'U+E522\' WHEN (dynamic.val = \'pf\') THEN \'U+E52E\' WHEN (dynamic.val = \'f\') THEN \'U+E522\' WHEN (dynamic.val = \'ff\') THEN \'U+E52F\' WHEN (dynamic.val = \'fff\') THEN \'U+E530\' WHEN (dynamic.val = \'ffff\') THEN \'U+E531\' WHEN (dynamic.val = \'fffff\') THEN \'U+E532\' WHEN (dynamic.val = \'ffffff\') THEN \'U+E533\' WHEN (dynamic.val = \'fp\') THEN \'U+E534\' WHEN (dynamic.val = \'fz\') THEN \'U+E535\' WHEN (dynamic.val = \'sf\') THEN \'U+E536\' WHEN (dynamic.val = \'sfp\') THEN \'U+E537\' WHEN (dynamic.val = \'sfpp\') THEN \'U+E538\' WHEN (dynamic.val = \'sfz\') THEN \'U+E539\' END AS anon_1  FROM dynamic  WHERE dynamic.id = old.id)  SELECT dynamic_to_unicode.id, dynamic_to_unicode.anon_1  FROM dynamic_to_unicode;       END;     CREATE TRIGGER dynamic_insert_del_staff_position_ins_staff_position_ORsw AFTER INSERT ON dynamic WHEN (EXISTS (SELECT dynamic.id  FROM dynamic JOIN dynamic_direction ON dynamic.id = dynamic_direction.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT dynamic.id  FROM dynamic  WHERE staff_position.id = new.id AND dynamic.id = new.id);           INSERT INTO staff_position (id, val) WITH dynamic_to_staff_position AS  (SELECT dynamic.id AS id, dynamic_direction.val * CASE WHEN (dynamic_padding.val IS NOT NULL) THEN dynamic_padding.val ELSE dynamic_padding_default.val END + CASE WHEN (dynamic_direction.val = 1) THEN CASE WHEN (note_box.y + note_box.height >= 2.0) THEN note_box.y + note_box.height WHEN (note_box.y + note_box.height <= 2.0 OR note_box.y + note_box.height IS NULL) THEN 2.0 END WHEN (dynamic_direction.val = -1) THEN CASE WHEN (note_box.y <= -2.0 OR note_box.y IS NULL) THEN note_box.y WHEN (note_box.y >= -2.0) THEN -2.0 END END AS val  FROM dynamic_direction, dynamic_padding AS dynamic_padding_default, note_box, anchor_x, dynamic LEFT OUTER JOIN dynamic_padding ON dynamic.id = dynamic_padding.id  WHERE dynamic.id = new.id AND anchor_x.id = dynamic.id AND note_box.id = anchor_x.val AND dynamic_padding_default.id = -1 AND dynamic.id = dynamic_direction.id)  SELECT dynamic_to_staff_position.id, dynamic_to_staff_position.val  FROM dynamic_to_staff_position;       END;     CREATE TRIGGER dynamic_direction_insert_del_staff_position_ins_staff_position_KbEp AFTER INSERT ON dynamic_direction WHEN (EXISTS (SELECT dynamic.id  FROM dynamic JOIN dynamic_direction ON dynamic.id = dynamic_direction.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT dynamic.id  FROM dynamic  WHERE staff_position.id = new.id AND dynamic.id = new.id);           INSERT INTO staff_position (id, val) WITH dynamic_to_staff_position AS  (SELECT dynamic.id AS id, dynamic_direction.val * CASE WHEN (dynamic_padding.val IS NOT NULL) THEN dynamic_padding.val ELSE dynamic_padding_default.val END + CASE WHEN (dynamic_direction.val = 1) THEN CASE WHEN (note_box.y + note_box.height >= 2.0) THEN note_box.y + note_box.height WHEN (note_box.y + note_box.height <= 2.0 OR note_box.y + note_box.height IS NULL) THEN 2.0 END WHEN (dynamic_direction.val = -1) THEN CASE WHEN (note_box.y <= -2.0 OR note_box.y IS NULL) THEN note_box.y WHEN (note_box.y >= -2.0) THEN -2.0 END END AS val  FROM dynamic_direction, dynamic_padding AS dynamic_padding_default, note_box, anchor_x, dynamic LEFT OUTER JOIN dynamic_padding ON dynamic.id = dynamic_padding.id  WHERE dynamic.id = new.id AND anchor_x.id = dynamic.id AND note_box.id = anchor_x.val AND dynamic_padding_default.id = -1 AND dynamic.id = dynamic_direction.id)  SELECT dynamic_to_staff_position.id, dynamic_to_staff_position.val  FROM dynamic_to_staff_position;       END;     CREATE TRIGGER dynamic_padding_insert_del_staff_position_ins_staff_position_LobL AFTER INSERT ON dynamic_padding WHEN (EXISTS (SELECT dynamic.id  FROM dynamic JOIN dynamic_direction ON dynamic.id = dynamic_direction.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT dynamic.id  FROM dynamic  WHERE staff_position.id = new.id AND dynamic.id = new.id);           INSERT INTO staff_position (id, val) WITH dynamic_to_staff_position AS  (SELECT dynamic.id AS id, dynamic_direction.val * CASE WHEN (dynamic_padding.val IS NOT NULL) THEN dynamic_padding.val ELSE dynamic_padding_default.val END + CASE WHEN (dynamic_direction.val = 1) THEN CASE WHEN (note_box.y + note_box.height >= 2.0) THEN note_box.y + note_box.height WHEN (note_box.y + note_box.height <= 2.0 OR note_box.y + note_box.height IS NULL) THEN 2.0 END WHEN (dynamic_direction.val = -1) THEN CASE WHEN (note_box.y <= -2.0 OR note_box.y IS NULL) THEN note_box.y WHEN (note_box.y >= -2.0) THEN -2.0 END END AS val  FROM dynamic_direction, dynamic_padding AS dynamic_padding_default, note_box, anchor_x, dynamic LEFT OUTER JOIN dynamic_padding ON dynamic.id = dynamic_padding.id  WHERE dynamic.id = new.id AND anchor_x.id = dynamic.id AND note_box.id = anchor_x.val AND dynamic_padding_default.id = -1 AND dynamic.id = dynamic_direction.id)  SELECT dynamic_to_staff_position.id, dynamic_to_staff_position.val  FROM dynamic_to_staff_position;       END;     CREATE TRIGGER dynamic_update_del_staff_position_ins_staff_position_FlfG AFTER UPDATE ON dynamic WHEN (EXISTS (SELECT dynamic.id  FROM dynamic JOIN dynamic_direction ON dynamic.id = dynamic_direction.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT dynamic.id  FROM dynamic  WHERE staff_position.id = new.id AND dynamic.id = new.id);           INSERT INTO staff_position (id, val) WITH dynamic_to_staff_position AS  (SELECT dynamic.id AS id, dynamic_direction.val * CASE WHEN (dynamic_padding.val IS NOT NULL) THEN dynamic_padding.val ELSE dynamic_padding_default.val END + CASE WHEN (dynamic_direction.val = 1) THEN CASE WHEN (note_box.y + note_box.height >= 2.0) THEN note_box.y + note_box.height WHEN (note_box.y + note_box.height <= 2.0 OR note_box.y + note_box.height IS NULL) THEN 2.0 END WHEN (dynamic_direction.val = -1) THEN CASE WHEN (note_box.y <= -2.0 OR note_box.y IS NULL) THEN note_box.y WHEN (note_box.y >= -2.0) THEN -2.0 END END AS val  FROM dynamic_direction, dynamic_padding AS dynamic_padding_default, note_box, anchor_x, dynamic LEFT OUTER JOIN dynamic_padding ON dynamic.id = dynamic_padding.id  WHERE dynamic.id = new.id AND anchor_x.id = dynamic.id AND note_box.id = anchor_x.val AND dynamic_padding_default.id = -1 AND dynamic.id = dynamic_direction.id)  SELECT dynamic_to_staff_position.id, dynamic_to_staff_position.val  FROM dynamic_to_staff_position;       END;     CREATE TRIGGER dynamic_direction_update_del_staff_position_ins_staff_position_MtZh AFTER UPDATE ON dynamic_direction WHEN (EXISTS (SELECT dynamic.id  FROM dynamic JOIN dynamic_direction ON dynamic.id = dynamic_direction.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT dynamic.id  FROM dynamic  WHERE staff_position.id = new.id AND dynamic.id = new.id);           INSERT INTO staff_position (id, val) WITH dynamic_to_staff_position AS  (SELECT dynamic.id AS id, dynamic_direction.val * CASE WHEN (dynamic_padding.val IS NOT NULL) THEN dynamic_padding.val ELSE dynamic_padding_default.val END + CASE WHEN (dynamic_direction.val = 1) THEN CASE WHEN (note_box.y + note_box.height >= 2.0) THEN note_box.y + note_box.height WHEN (note_box.y + note_box.height <= 2.0 OR note_box.y + note_box.height IS NULL) THEN 2.0 END WHEN (dynamic_direction.val = -1) THEN CASE WHEN (note_box.y <= -2.0 OR note_box.y IS NULL) THEN note_box.y WHEN (note_box.y >= -2.0) THEN -2.0 END END AS val  FROM dynamic_direction, dynamic_padding AS dynamic_padding_default, note_box, anchor_x, dynamic LEFT OUTER JOIN dynamic_padding ON dynamic.id = dynamic_padding.id  WHERE dynamic.id = new.id AND anchor_x.id = dynamic.id AND note_box.id = anchor_x.val AND dynamic_padding_default.id = -1 AND dynamic.id = dynamic_direction.id)  SELECT dynamic_to_staff_position.id, dynamic_to_staff_position.val  FROM dynamic_to_staff_position;       END;     CREATE TRIGGER dynamic_padding_update_del_staff_position_ins_staff_position_RgiN AFTER UPDATE ON dynamic_padding WHEN (EXISTS (SELECT dynamic.id  FROM dynamic JOIN dynamic_direction ON dynamic.id = dynamic_direction.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT dynamic.id  FROM dynamic  WHERE staff_position.id = new.id AND dynamic.id = new.id);           INSERT INTO staff_position (id, val) WITH dynamic_to_staff_position AS  (SELECT dynamic.id AS id, dynamic_direction.val * CASE WHEN (dynamic_padding.val IS NOT NULL) THEN dynamic_padding.val ELSE dynamic_padding_default.val END + CASE WHEN (dynamic_direction.val = 1) THEN CASE WHEN (note_box.y + note_box.height >= 2.0) THEN note_box.y + note_box.height WHEN (note_box.y + note_box.height <= 2.0 OR note_box.y + note_box.height IS NULL) THEN 2.0 END WHEN (dynamic_direction.val = -1) THEN CASE WHEN (note_box.y <= -2.0 OR note_box.y IS NULL) THEN note_box.y WHEN (note_box.y >= -2.0) THEN -2.0 END END AS val  FROM dynamic_direction, dynamic_padding AS dynamic_padding_default, note_box, anchor_x, dynamic LEFT OUTER JOIN dynamic_padding ON dynamic.id = dynamic_padding.id  WHERE dynamic.id = new.id AND anchor_x.id = dynamic.id AND note_box.id = anchor_x.val AND dynamic_padding_default.id = -1 AND dynamic.id = dynamic_direction.id)  SELECT dynamic_to_staff_position.id, dynamic_to_staff_position.val  FROM dynamic_to_staff_position;       END;     CREATE TRIGGER dynamic_delete_del_staff_position_ins_staff_position_VlMq AFTER DELETE ON dynamic WHEN (EXISTS (SELECT dynamic.id  FROM dynamic JOIN dynamic_direction ON dynamic.id = dynamic_direction.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT dynamic.id  FROM dynamic  WHERE staff_position.id = old.id AND dynamic.id = old.id);           INSERT INTO staff_position (id, val) WITH dynamic_to_staff_position AS  (SELECT dynamic.id AS id, dynamic_direction.val * CASE WHEN (dynamic_padding.val IS NOT NULL) THEN dynamic_padding.val ELSE dynamic_padding_default.val END + CASE WHEN (dynamic_direction.val = 1) THEN CASE WHEN (note_box.y + note_box.height >= 2.0) THEN note_box.y + note_box.height WHEN (note_box.y + note_box.height <= 2.0 OR note_box.y + note_box.height IS NULL) THEN 2.0 END WHEN (dynamic_direction.val = -1) THEN CASE WHEN (note_box.y <= -2.0 OR note_box.y IS NULL) THEN note_box.y WHEN (note_box.y >= -2.0) THEN -2.0 END END AS val  FROM dynamic_direction, dynamic_padding AS dynamic_padding_default, note_box, anchor_x, dynamic LEFT OUTER JOIN dynamic_padding ON dynamic.id = dynamic_padding.id  WHERE dynamic.id = old.id AND anchor_x.id = dynamic.id AND note_box.id = anchor_x.val AND dynamic_padding_default.id = -1 AND dynamic.id = dynamic_direction.id)  SELECT dynamic_to_staff_position.id, dynamic_to_staff_position.val  FROM dynamic_to_staff_position;       END;     CREATE TRIGGER dynamic_direction_delete_del_staff_position_ins_staff_position_QKvm AFTER DELETE ON dynamic_direction WHEN (EXISTS (SELECT dynamic.id  FROM dynamic JOIN dynamic_direction ON dynamic.id = dynamic_direction.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT dynamic.id  FROM dynamic  WHERE staff_position.id = old.id AND dynamic.id = old.id);           INSERT INTO staff_position (id, val) WITH dynamic_to_staff_position AS  (SELECT dynamic.id AS id, dynamic_direction.val * CASE WHEN (dynamic_padding.val IS NOT NULL) THEN dynamic_padding.val ELSE dynamic_padding_default.val END + CASE WHEN (dynamic_direction.val = 1) THEN CASE WHEN (note_box.y + note_box.height >= 2.0) THEN note_box.y + note_box.height WHEN (note_box.y + note_box.height <= 2.0 OR note_box.y + note_box.height IS NULL) THEN 2.0 END WHEN (dynamic_direction.val = -1) THEN CASE WHEN (note_box.y <= -2.0 OR note_box.y IS NULL) THEN note_box.y WHEN (note_box.y >= -2.0) THEN -2.0 END END AS val  FROM dynamic_direction, dynamic_padding AS dynamic_padding_default, note_box, anchor_x, dynamic LEFT OUTER JOIN dynamic_padding ON dynamic.id = dynamic_padding.id  WHERE dynamic.id = old.id AND anchor_x.id = dynamic.id AND note_box.id = anchor_x.val AND dynamic_padding_default.id = -1 AND dynamic.id = dynamic_direction.id)  SELECT dynamic_to_staff_position.id, dynamic_to_staff_position.val  FROM dynamic_to_staff_position;       END;     CREATE TRIGGER dynamic_padding_delete_del_staff_position_ins_staff_position_RJMZ AFTER DELETE ON dynamic_padding WHEN (EXISTS (SELECT dynamic.id  FROM dynamic JOIN dynamic_direction ON dynamic.id = dynamic_direction.id))       BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT dynamic.id  FROM dynamic  WHERE staff_position.id = old.id AND dynamic.id = old.id);           INSERT INTO staff_position (id, val) WITH dynamic_to_staff_position AS  (SELECT dynamic.id AS id, dynamic_direction.val * CASE WHEN (dynamic_padding.val IS NOT NULL) THEN dynamic_padding.val ELSE dynamic_padding_default.val END + CASE WHEN (dynamic_direction.val = 1) THEN CASE WHEN (note_box.y + note_box.height >= 2.0) THEN note_box.y + note_box.height WHEN (note_box.y + note_box.height <= 2.0 OR note_box.y + note_box.height IS NULL) THEN 2.0 END WHEN (dynamic_direction.val = -1) THEN CASE WHEN (note_box.y <= -2.0 OR note_box.y IS NULL) THEN note_box.y WHEN (note_box.y >= -2.0) THEN -2.0 END END AS val  FROM dynamic_direction, dynamic_padding AS dynamic_padding_default, note_box, anchor_x, dynamic LEFT OUTER JOIN dynamic_padding ON dynamic.id = dynamic_padding.id  WHERE dynamic.id = old.id AND anchor_x.id = dynamic.id AND note_box.id = anchor_x.val AND dynamic_padding_default.id = -1 AND dynamic.id = dynamic_direction.id)  SELECT dynamic_to_staff_position.id, dynamic_to_staff_position.val  FROM dynamic_to_staff_position;       END;     CREATE TRIGGER note_box_insert_del_staff_position_ins_staff_position_KPOe AFTER INSERT ON note_box        BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT dynamic.id  FROM dynamic, anchor_x  WHERE staff_position.id = dynamic.id AND dynamic.id = anchor_x.id AND anchor_x.val = new.id);           INSERT INTO staff_position (id, val) WITH dynamic_to_staff_position AS  (SELECT dynamic.id AS id, dynamic_direction.val * CASE WHEN (dynamic_padding.val IS NOT NULL) THEN dynamic_padding.val ELSE dynamic_padding_default.val END + CASE WHEN (dynamic_direction.val = 1) THEN CASE WHEN (note_box.y + note_box.height >= 2.0) THEN note_box.y + note_box.height WHEN (note_box.y + note_box.height <= 2.0 OR note_box.y + note_box.height IS NULL) THEN 2.0 END WHEN (dynamic_direction.val = -1) THEN CASE WHEN (note_box.y <= -2.0 OR note_box.y IS NULL) THEN note_box.y WHEN (note_box.y >= -2.0) THEN -2.0 END END AS val  FROM dynamic_direction, dynamic_padding AS dynamic_padding_default, note_box, anchor_x, dynamic LEFT OUTER JOIN dynamic_padding ON dynamic.id = dynamic_padding.id  WHERE note_box.id = new.id AND anchor_x.id = dynamic.id AND note_box.id = anchor_x.val AND dynamic_padding_default.id = -1 AND dynamic.id = dynamic_direction.id)  SELECT dynamic_to_staff_position.id, dynamic_to_staff_position.val  FROM dynamic_to_staff_position;       END;     CREATE TRIGGER note_box_update_del_staff_position_ins_staff_position_LRUb AFTER UPDATE ON note_box        BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT dynamic.id  FROM dynamic, anchor_x  WHERE staff_position.id = dynamic.id AND dynamic.id = anchor_x.id AND anchor_x.val = new.id);           INSERT INTO staff_position (id, val) WITH dynamic_to_staff_position AS  (SELECT dynamic.id AS id, dynamic_direction.val * CASE WHEN (dynamic_padding.val IS NOT NULL) THEN dynamic_padding.val ELSE dynamic_padding_default.val END + CASE WHEN (dynamic_direction.val = 1) THEN CASE WHEN (note_box.y + note_box.height >= 2.0) THEN note_box.y + note_box.height WHEN (note_box.y + note_box.height <= 2.0 OR note_box.y + note_box.height IS NULL) THEN 2.0 END WHEN (dynamic_direction.val = -1) THEN CASE WHEN (note_box.y <= -2.0 OR note_box.y IS NULL) THEN note_box.y WHEN (note_box.y >= -2.0) THEN -2.0 END END AS val  FROM dynamic_direction, dynamic_padding AS dynamic_padding_default, note_box, anchor_x, dynamic LEFT OUTER JOIN dynamic_padding ON dynamic.id = dynamic_padding.id  WHERE note_box.id = new.id AND anchor_x.id = dynamic.id AND note_box.id = anchor_x.val AND dynamic_padding_default.id = -1 AND dynamic.id = dynamic_direction.id)  SELECT dynamic_to_staff_position.id, dynamic_to_staff_position.val  FROM dynamic_to_staff_position;       END;     CREATE TRIGGER note_box_delete_del_staff_position_ins_staff_position_WLel AFTER DELETE ON note_box        BEGIN                      DELETE FROM staff_position WHERE EXISTS (SELECT dynamic.id  FROM dynamic, anchor_x  WHERE staff_position.id = dynamic.id AND dynamic.id = anchor_x.id AND anchor_x.val = old.id);           INSERT INTO staff_position (id, val) WITH dynamic_to_staff_position AS  (SELECT dynamic.id AS id, dynamic_direction.val * CASE WHEN (dynamic_padding.val IS NOT NULL) THEN dynamic_padding.val ELSE dynamic_padding_default.val END + CASE WHEN (dynamic_direction.val = 1) THEN CASE WHEN (note_box.y + note_box.height >= 2.0) THEN note_box.y + note_box.height WHEN (note_box.y + note_box.height <= 2.0 OR note_box.y + note_box.height IS NULL) THEN 2.0 END WHEN (dynamic_direction.val = -1) THEN CASE WHEN (note_box.y <= -2.0 OR note_box.y IS NULL) THEN note_box.y WHEN (note_box.y >= -2.0) THEN -2.0 END END AS val  FROM dynamic_direction, dynamic_padding AS dynamic_padding_default, note_box, anchor_x, dynamic LEFT OUTER JOIN dynamic_padding ON dynamic.id = dynamic_padding.id  WHERE note_box.id = old.id AND anchor_x.id = dynamic.id AND note_box.id = anchor_x.val AND dynamic_padding_default.id = -1 AND dynamic.id = dynamic_direction.id)  SELECT dynamic_to_staff_position.id, dynamic_to_staff_position.val  FROM dynamic_to_staff_position;       END;     CREATE TRIGGER width_insert_del_space_prev_ins_space_prev_QSkB AFTER INSERT ON width        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = new.id OR space_prev.prev = new.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = new.id OR graphical_next.prev = new.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER name_insert_del_space_prev_ins_space_prev_NRQp AFTER INSERT ON name        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = new.id OR space_prev.prev = new.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = new.id OR graphical_next.prev = new.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER left_width_insert_del_space_prev_ins_space_prev_UgVG AFTER INSERT ON left_width        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = new.id OR space_prev.prev = new.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = new.id OR graphical_next.prev = new.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER right_width_insert_del_space_prev_ins_space_prev_SofM AFTER INSERT ON right_width        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = new.id OR space_prev.prev = new.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = new.id OR graphical_next.prev = new.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER duration_insert_del_space_prev_ins_space_prev_JSdf AFTER INSERT ON duration        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = new.id OR space_prev.prev = new.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = new.id OR graphical_next.prev = new.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER graphical_next_insert_del_space_prev_ins_space_prev_BvFw AFTER INSERT ON graphical_next        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = new.id OR space_prev.prev = new.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = new.id OR graphical_next.prev = new.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER width_update_del_space_prev_ins_space_prev_YzWs AFTER UPDATE ON width        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = new.id OR space_prev.prev = new.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = new.id OR graphical_next.prev = new.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER name_update_del_space_prev_ins_space_prev_EOjq AFTER UPDATE ON name        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = new.id OR space_prev.prev = new.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = new.id OR graphical_next.prev = new.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER left_width_update_del_space_prev_ins_space_prev_ZraD AFTER UPDATE ON left_width        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = new.id OR space_prev.prev = new.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = new.id OR graphical_next.prev = new.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER right_width_update_del_space_prev_ins_space_prev_RJam AFTER UPDATE ON right_width        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = new.id OR space_prev.prev = new.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = new.id OR graphical_next.prev = new.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER duration_update_del_space_prev_ins_space_prev_EzrX AFTER UPDATE ON duration        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = new.id OR space_prev.prev = new.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = new.id OR graphical_next.prev = new.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER graphical_next_update_del_space_prev_ins_space_prev_UGTh AFTER UPDATE ON graphical_next        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = new.id OR space_prev.prev = new.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = new.id OR graphical_next.prev = new.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER width_delete_del_space_prev_ins_space_prev_HtNI AFTER DELETE ON width        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = old.id OR space_prev.prev = old.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = old.id OR graphical_next.prev = old.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER name_delete_del_space_prev_ins_space_prev_RsAP AFTER DELETE ON name        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = old.id OR space_prev.prev = old.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = old.id OR graphical_next.prev = old.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER left_width_delete_del_space_prev_ins_space_prev_DVXV AFTER DELETE ON left_width        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = old.id OR space_prev.prev = old.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = old.id OR graphical_next.prev = old.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER right_width_delete_del_space_prev_ins_space_prev_IXZm AFTER DELETE ON right_width        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = old.id OR space_prev.prev = old.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = old.id OR graphical_next.prev = old.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER duration_delete_del_space_prev_ins_space_prev_PAfq AFTER DELETE ON duration        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = old.id OR space_prev.prev = old.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = old.id OR graphical_next.prev = old.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER graphical_next_delete_del_space_prev_ins_space_prev_XMQD AFTER DELETE ON graphical_next        BEGIN                      DELETE FROM space_prev WHERE space_prev.id = old.id OR space_prev.prev = old.id;           INSERT INTO space_prev (id, prev, val) WITH all_space_prev AS  (SELECT graphical_next.id AS id, graphical_next.prev AS prev, CASE WHEN (name_left.val = \'time_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'time_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 2.0 OR right_width.val + 1.0 IS NULL) THEN 2.0 WHEN (right_width.val + 1.0 >= 2.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'time_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'time_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'clef\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'clef\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'clef\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'clef\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND name_right.val = \'bar_line\') THEN 2.0 + width_left.val WHEN (name_left.val = \'bar_line\' AND name_right.val = \'key_signature\') THEN 2.0 + width_left.val WHEN (name_left.val = \'key_signature\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'key_signature\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN (name_left.val = \'bar_line\' AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (left_width.val + 1.0 <= 4.0 OR left_width.val + 1.0 IS NULL) THEN 4.0 WHEN (left_width.val + 1.0 >= 4.0) THEN left_width.val + 1.0 END + width_left.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND name_right.val = \'bar_line\') THEN CASE WHEN (right_width.val + 1.0 <= 4.0 OR right_width.val + 1.0 IS NULL) THEN 4.0 WHEN (right_width.val + 1.0 >= 4.0) THEN right_width.val + 1.0 END + right_width.val WHEN ((name_left.val = \'note\' OR name_left.val = \'rest\') AND (name_right.val = \'note\' OR name_right.val = \'rest\')) THEN CASE WHEN (CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END >= left_width.val + 2.0 OR left_width.val + 2.0 IS NULL) THEN CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END WHEN (left_width.val + 2.0 >= CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END OR CASE WHEN (duration.val > 0.24) THEN 10.0 WHEN (duration.val > 0.124) THEN duration.val ELSE 5.0 END IS NULL) THEN left_width.val + 2.0 END + right_width.val ELSE 0.0 END AS val  FROM graphical_next LEFT OUTER JOIN name AS name_left ON name_left.id = graphical_next.prev LEFT OUTER JOIN name AS name_right ON name_right.id = graphical_next.id LEFT OUTER JOIN width AS width_left ON width_left.id = graphical_next.prev LEFT OUTER JOIN width AS width_right ON width_right.id = graphical_next.id LEFT OUTER JOIN right_width ON right_width.id = graphical_next.prev LEFT OUTER JOIN left_width ON left_width.id = graphical_next.id LEFT OUTER JOIN duration ON duration.id = graphical_next.prev  WHERE graphical_next.id = old.id OR graphical_next.prev = old.id)  SELECT all_space_prev.id, all_space_prev.prev, all_space_prev.val  FROM all_space_prev;       END;     CREATE TRIGGER space_prev_insert_del_x_position_ins_x_position_NSpa AFTER INSERT ON space_prev        BEGIN                      DELETE FROM x_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT new.id AS id UNION ALL SELECT space_prev.id AS id  FROM space_prev, anchors AS stmt_prev  WHERE space_prev.prev = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE x_position.id = anchors.id);           INSERT INTO x_position (id, val) WITH RECURSIVE first_position_runner(id, prev, counter, val) AS  (SELECT space_prev.id AS id, space_prev.prev AS prev, 0 AS counter, x_position.val AS val  FROM space_prev LEFT OUTER JOIN x_position ON space_prev.id = x_position.id  WHERE space_prev.id = new.id AND x_position.val IS NULL UNION ALL SELECT space_prev.id AS id, space_prev.prev AS prev, first_position_runner_prev.counter + 1 AS counter, x_position.val AS val  FROM first_position_runner AS first_position_runner_prev, space_prev LEFT OUTER JOIN x_position ON space_prev.id = x_position.id  WHERE space_prev.id = first_position_runner_prev.prev AND x_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  all_x_position(id, val) AS  (SELECT starting_id.id AS id, space_prev.val + CASE WHEN (x_position.val IS NOT NULL) THEN x_position.val ELSE 0 END AS val  FROM starting_id, space_prev LEFT OUTER JOIN x_position ON space_prev.prev = x_position.id  WHERE space_prev.id = starting_id.id UNION ALL SELECT space_prev.id AS id, x_position_prev.val + space_prev.val AS anon_1  FROM space_prev, all_x_position AS x_position_prev  WHERE space_prev.prev = x_position_prev.id)  SELECT all_x_position.id, all_x_position.val  FROM all_x_position;       END;     CREATE TRIGGER space_prev_update_del_x_position_ins_x_position_DXhR AFTER UPDATE ON space_prev        BEGIN                      DELETE FROM x_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT new.id AS id UNION ALL SELECT space_prev.id AS id  FROM space_prev, anchors AS stmt_prev  WHERE space_prev.prev = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE x_position.id = anchors.id);           INSERT INTO x_position (id, val) WITH RECURSIVE first_position_runner(id, prev, counter, val) AS  (SELECT space_prev.id AS id, space_prev.prev AS prev, 0 AS counter, x_position.val AS val  FROM space_prev LEFT OUTER JOIN x_position ON space_prev.id = x_position.id  WHERE space_prev.id = new.id AND x_position.val IS NULL UNION ALL SELECT space_prev.id AS id, space_prev.prev AS prev, first_position_runner_prev.counter + 1 AS counter, x_position.val AS val  FROM first_position_runner AS first_position_runner_prev, space_prev LEFT OUTER JOIN x_position ON space_prev.id = x_position.id  WHERE space_prev.id = first_position_runner_prev.prev AND x_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  all_x_position(id, val) AS  (SELECT starting_id.id AS id, space_prev.val + CASE WHEN (x_position.val IS NOT NULL) THEN x_position.val ELSE 0 END AS val  FROM starting_id, space_prev LEFT OUTER JOIN x_position ON space_prev.prev = x_position.id  WHERE space_prev.id = starting_id.id UNION ALL SELECT space_prev.id AS id, x_position_prev.val + space_prev.val AS anon_1  FROM space_prev, all_x_position AS x_position_prev  WHERE space_prev.prev = x_position_prev.id)  SELECT all_x_position.id, all_x_position.val  FROM all_x_position;       END;     CREATE TRIGGER space_prev_delete_del_x_position_ins_x_position_YyZh AFTER DELETE ON space_prev        BEGIN                      DELETE FROM x_position WHERE EXISTS (WITH RECURSIVE anchors(id) AS  (SELECT old.id AS id UNION ALL SELECT space_prev.id AS id  FROM space_prev, anchors AS stmt_prev  WHERE space_prev.prev = stmt_prev.id)  SELECT anchors.id  FROM anchors  WHERE x_position.id = anchors.id);           INSERT INTO x_position (id, val) WITH RECURSIVE first_position_runner(id, prev, counter, val) AS  (SELECT space_prev.id AS id, space_prev.prev AS prev, 0 AS counter, x_position.val AS val  FROM space_prev LEFT OUTER JOIN x_position ON space_prev.id = x_position.id  WHERE space_prev.id = old.id AND x_position.val IS NULL UNION ALL SELECT space_prev.id AS id, space_prev.prev AS prev, first_position_runner_prev.counter + 1 AS counter, x_position.val AS val  FROM first_position_runner AS first_position_runner_prev, space_prev LEFT OUTER JOIN x_position ON space_prev.id = x_position.id  WHERE space_prev.id = first_position_runner_prev.prev AND x_position.val IS NULL),  max_counter AS  (SELECT max(first_position_runner.counter) AS max  FROM first_position_runner),  starting_id AS  (SELECT first_position_runner.id AS id  FROM first_position_runner, max_counter  WHERE first_position_runner.counter = max_counter.max),  all_x_position(id, val) AS  (SELECT starting_id.id AS id, space_prev.val + CASE WHEN (x_position.val IS NOT NULL) THEN x_position.val ELSE 0 END AS val  FROM starting_id, space_prev LEFT OUTER JOIN x_position ON space_prev.prev = x_position.id  WHERE space_prev.id = starting_id.id UNION ALL SELECT space_prev.id AS id, x_position_prev.val + space_prev.val AS anon_1  FROM space_prev, all_x_position AS x_position_prev  WHERE space_prev.prev = x_position_prev.id)  SELECT all_x_position.id, all_x_position.val  FROM all_x_position;       END;     CREATE TRIGGER font_name_insert_del_glyph_stencil_ins_glyph_stencil_Rjtv AFTER INSERT ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'clef_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'clef_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, name, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND name.val = \'clef\' AND name.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER font_size_insert_del_glyph_stencil_ins_glyph_stencil_MYBQ AFTER INSERT ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'clef_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'clef_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, name, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND name.val = \'clef\' AND name.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER unicode_insert_del_glyph_stencil_ins_glyph_stencil_Jwpn AFTER INSERT ON unicode WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'clef_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'clef_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, name, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND name.val = \'clef\' AND name.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER alignment_directive_insert_del_glyph_stencil_ins_glyph_stencil_ECgh AFTER INSERT ON alignment_directive WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'clef_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'clef_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, name, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND name.val = \'clef\' AND name.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER font_name_update_del_glyph_stencil_ins_glyph_stencil_LtEB AFTER UPDATE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'clef_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'clef_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, name, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND name.val = \'clef\' AND name.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER font_size_update_del_glyph_stencil_ins_glyph_stencil_PBGi AFTER UPDATE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'clef_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'clef_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, name, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND name.val = \'clef\' AND name.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER unicode_update_del_glyph_stencil_ins_glyph_stencil_IPun AFTER UPDATE ON unicode WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'clef_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'clef_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, name, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND name.val = \'clef\' AND name.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER alignment_directive_update_del_glyph_stencil_ins_glyph_stencil_WMRd AFTER UPDATE ON alignment_directive WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'clef_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'clef_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, name, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND name.val = \'clef\' AND name.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER font_name_delete_del_glyph_stencil_ins_glyph_stencil_Ewgc AFTER DELETE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'clef_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'clef_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, name, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = old.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND name.val = \'clef\' AND name.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER font_size_delete_del_glyph_stencil_ins_glyph_stencil_OOix AFTER DELETE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'clef_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'clef_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, name, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = old.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND name.val = \'clef\' AND name.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER unicode_delete_del_glyph_stencil_ins_glyph_stencil_VGTG AFTER DELETE ON unicode WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'clef_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'clef_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, name, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = old.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND name.val = \'clef\' AND name.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER alignment_directive_delete_del_glyph_stencil_ins_glyph_stencil_LZfx AFTER DELETE ON alignment_directive WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'clef_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'clef_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, name, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = old.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND name.val = \'clef\' AND name.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER font_name_insert_del_glyph_stencil_ins_glyph_stencil_QbvL AFTER INSERT ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dynamic_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'dynamic_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, dynamic, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND dynamic.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER font_size_insert_del_glyph_stencil_ins_glyph_stencil_GIuc AFTER INSERT ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dynamic_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'dynamic_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, dynamic, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND dynamic.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER unicode_insert_del_glyph_stencil_ins_glyph_stencil_UAkg AFTER INSERT ON unicode WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dynamic_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'dynamic_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, dynamic, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND dynamic.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER alignment_directive_insert_del_glyph_stencil_ins_glyph_stencil_XUSI AFTER INSERT ON alignment_directive WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dynamic_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'dynamic_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, dynamic, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND dynamic.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER font_name_update_del_glyph_stencil_ins_glyph_stencil_XHXP AFTER UPDATE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dynamic_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'dynamic_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, dynamic, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND dynamic.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER font_size_update_del_glyph_stencil_ins_glyph_stencil_THkg AFTER UPDATE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dynamic_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'dynamic_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, dynamic, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND dynamic.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER unicode_update_del_glyph_stencil_ins_glyph_stencil_YUgA AFTER UPDATE ON unicode WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dynamic_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'dynamic_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, dynamic, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND dynamic.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER alignment_directive_update_del_glyph_stencil_ins_glyph_stencil_SEaZ AFTER UPDATE ON alignment_directive WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dynamic_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'dynamic_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, dynamic, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = new.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND dynamic.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER font_name_delete_del_glyph_stencil_ins_glyph_stencil_PfXd AFTER DELETE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'dynamic_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'dynamic_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, dynamic, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = old.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND dynamic.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER font_size_delete_del_glyph_stencil_ins_glyph_stencil_DayE AFTER DELETE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'dynamic_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'dynamic_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, dynamic, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = old.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND dynamic.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER unicode_delete_del_glyph_stencil_ins_glyph_stencil_KsOo AFTER DELETE ON unicode WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'dynamic_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'dynamic_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, dynamic, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = old.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND dynamic.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER alignment_directive_delete_del_glyph_stencil_ins_glyph_stencil_BCDO AFTER DELETE ON alignment_directive WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN unicode ON font_name.id = unicode.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'dynamic_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH generics_to_stencils AS  (SELECT font_name.id AS id, \'dynamic_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, unicode.val AS unicode, CASE WHEN (alignment_directive.x IS NOT NULL) THEN glyph_box.x + alignment_directive.x * glyph_box.width ELSE 0 END AS x, CASE WHEN (alignment_directive.y IS NOT NULL) THEN (glyph_box.y + glyph_box.height) - alignment_directive.y * glyph_box.height ELSE 0 END AS y  FROM font_size, unicode, glyph_box, dynamic, font_name LEFT OUTER JOIN alignment_directive ON alignment_directive.id = font_name.id  WHERE font_name.id = old.id AND glyph_box.name = font_name.val AND glyph_box.unicode = unicode.val AND font_name.id = font_size.id AND font_name.id = unicode.id AND dynamic.id = font_name.id)  SELECT generics_to_stencils.id, generics_to_stencils.writer, generics_to_stencils.sub_id, generics_to_stencils.font_name, generics_to_stencils.font_size, generics_to_stencils.unicode, generics_to_stencils.x, generics_to_stencils.y  FROM generics_to_stencils;       END;     CREATE TRIGGER name_insert_del_glyph_stencil_ins_glyph_stencil_Veus AFTER INSERT ON name        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = new.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER font_name_insert_del_glyph_stencil_ins_glyph_stencil_DrdK AFTER INSERT ON font_name        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = new.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER font_size_insert_del_glyph_stencil_ins_glyph_stencil_KYST AFTER INSERT ON font_size        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = new.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER time_signature_insert_del_glyph_stencil_ins_glyph_stencil_OXBd AFTER INSERT ON time_signature        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = new.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER width_insert_del_glyph_stencil_ins_glyph_stencil_SzOz AFTER INSERT ON width        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = new.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER staff_symbol_insert_del_glyph_stencil_ins_glyph_stencil_XUeN AFTER INSERT ON staff_symbol        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = new.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER name_update_del_glyph_stencil_ins_glyph_stencil_SNSt AFTER UPDATE ON name        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = new.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER font_name_update_del_glyph_stencil_ins_glyph_stencil_SIlR AFTER UPDATE ON font_name        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = new.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER font_size_update_del_glyph_stencil_ins_glyph_stencil_PHsS AFTER UPDATE ON font_size        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = new.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER time_signature_update_del_glyph_stencil_ins_glyph_stencil_Juaj AFTER UPDATE ON time_signature        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = new.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER width_update_del_glyph_stencil_ins_glyph_stencil_UAni AFTER UPDATE ON width        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = new.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER staff_symbol_update_del_glyph_stencil_ins_glyph_stencil_Icdi AFTER UPDATE ON staff_symbol        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = new.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER name_delete_del_glyph_stencil_ins_glyph_stencil_ROcD AFTER DELETE ON name        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = old.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER font_name_delete_del_glyph_stencil_ins_glyph_stencil_BYBz AFTER DELETE ON font_name        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = old.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER font_size_delete_del_glyph_stencil_ins_glyph_stencil_NxTd AFTER DELETE ON font_size        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = old.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER time_signature_delete_del_glyph_stencil_ins_glyph_stencil_TWrV AFTER DELETE ON time_signature        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = old.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER width_delete_del_glyph_stencil_ins_glyph_stencil_NAIg AFTER DELETE ON width        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = old.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER staff_symbol_delete_del_glyph_stencil_ins_glyph_stencil_EdnZ AFTER DELETE ON staff_symbol        BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'time_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH time_signatures_to_xy_info AS  (SELECT name.id AS id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END AS num_str, CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END AS den_str, (width.val - (glyph_box_a_1.width * font_size.val) / 20.0) / 2.0 AS num_x, (width.val - (glyph_box_a_2.width * font_size.val) / 20.0) / 2.0 AS den_x, staff_space.val * 1.0 AS num_y, staff_space.val * 3.0 AS den_y  FROM name, font_name, font_size, time_signature, width, glyph_box AS glyph_box_a_1, glyph_box AS glyph_box_a_2, staff_space, staff_symbol  WHERE name.val = \'time_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = time_signature.id AND name.id = width.id AND font_name.val = glyph_box_a_1.name AND font_name.val = glyph_box_a_2.name AND CASE WHEN (time_signature.num = 0) THEN \'U+E080\' WHEN (time_signature.num = 1) THEN \'U+E081\' WHEN (time_signature.num = 2) THEN \'U+E082\' WHEN (time_signature.num = 3) THEN \'U+E083\' WHEN (time_signature.num = 4) THEN \'U+E084\' WHEN (time_signature.num = 5) THEN \'U+E085\' WHEN (time_signature.num = 6) THEN \'U+E086\' WHEN (time_signature.num = 7) THEN \'U+E087\' WHEN (time_signature.num = 8) THEN \'U+E088\' WHEN (time_signature.num = 9) THEN \'U+E089\' END = glyph_box_a_1.unicode AND CASE WHEN (time_signature.den = 0) THEN \'U+E080\' WHEN (time_signature.den = 1) THEN \'U+E081\' WHEN (time_signature.den = 2) THEN \'U+E082\' WHEN (time_signature.den = 3) THEN \'U+E083\' WHEN (time_signature.den = 4) THEN \'U+E084\' WHEN (time_signature.den = 5) THEN \'U+E085\' WHEN (time_signature.den = 6) THEN \'U+E086\' WHEN (time_signature.den = 7) THEN \'U+E087\' WHEN (time_signature.den = 8) THEN \'U+E088\' WHEN (time_signature.den = 9) THEN \'U+E089\' END = glyph_box_a_2.unicode AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND name.id = old.id),  time_signatures_to_stencils AS  (SELECT time_signatures_to_xy_info.id AS id, \'time_signature_to_stencil\' AS writer, 0 AS sub_id, time_signatures_to_xy_info_num.font_name AS font_name, time_signatures_to_xy_info_num.font_size AS font_size, time_signatures_to_xy_info_num.num_str AS unicode, time_signatures_to_xy_info_num.num_x AS x, time_signatures_to_xy_info_num.num_y AS y  FROM time_signatures_to_xy_info, time_signatures_to_xy_info AS time_signatures_to_xy_info_num UNION ALL SELECT time_signatures_to_xy_info_den.id AS id, \'time_signature_to_stencil\' AS anon_1, 1 AS sub_id, time_signatures_to_xy_info_den.font_name AS font_name, time_signatures_to_xy_info_den.font_size AS font_size, time_signatures_to_xy_info_den.den_str AS unicode, time_signatures_to_xy_info_den.den_x AS x, time_signatures_to_xy_info_den.den_y AS y  FROM time_signatures_to_xy_info AS time_signatures_to_xy_info_den)  SELECT time_signatures_to_stencils.id, time_signatures_to_stencils.writer, time_signatures_to_stencils.sub_id, time_signatures_to_stencils.font_name, time_signatures_to_stencils.font_size, time_signatures_to_stencils.unicode, time_signatures_to_stencils.x, time_signatures_to_stencils.y  FROM time_signatures_to_stencils;       END;     CREATE TRIGGER name_insert_del_line_stencil_ins_line_stencil_MATo AFTER INSERT ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN bar_thickness ON name.id = bar_thickness.id JOIN staff_symbol ON name.id = staff_symbol.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'bar_line_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH bar_lines_to_stencils AS  (SELECT name.id AS id, \'bar_line_to_stencil\' AS writer, 0 AS sub_id, 0.0 AS x0, 0.0 AS y0, 0.0 AS x1, staff_space.val * (n_lines.val - 1) AS y1, bar_thickness.val AS thickness  FROM name, staff_space, n_lines, bar_thickness, staff_symbol  WHERE name.id = new.id AND name.val = \'bar_line\' AND name.id = bar_thickness.id AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND staff_symbol.val = n_lines.id)  SELECT bar_lines_to_stencils.id, bar_lines_to_stencils.writer, bar_lines_to_stencils.sub_id, bar_lines_to_stencils.x0, bar_lines_to_stencils.y0, bar_lines_to_stencils.x1, bar_lines_to_stencils.y1, bar_lines_to_stencils.thickness  FROM bar_lines_to_stencils;       END;     CREATE TRIGGER bar_thickness_insert_del_line_stencil_ins_line_stencil_IJim AFTER INSERT ON bar_thickness WHEN (EXISTS (SELECT name.id  FROM name JOIN bar_thickness ON name.id = bar_thickness.id JOIN staff_symbol ON name.id = staff_symbol.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'bar_line_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH bar_lines_to_stencils AS  (SELECT name.id AS id, \'bar_line_to_stencil\' AS writer, 0 AS sub_id, 0.0 AS x0, 0.0 AS y0, 0.0 AS x1, staff_space.val * (n_lines.val - 1) AS y1, bar_thickness.val AS thickness  FROM name, staff_space, n_lines, bar_thickness, staff_symbol  WHERE name.id = new.id AND name.val = \'bar_line\' AND name.id = bar_thickness.id AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND staff_symbol.val = n_lines.id)  SELECT bar_lines_to_stencils.id, bar_lines_to_stencils.writer, bar_lines_to_stencils.sub_id, bar_lines_to_stencils.x0, bar_lines_to_stencils.y0, bar_lines_to_stencils.x1, bar_lines_to_stencils.y1, bar_lines_to_stencils.thickness  FROM bar_lines_to_stencils;       END;     CREATE TRIGGER staff_symbol_insert_del_line_stencil_ins_line_stencil_HbKi AFTER INSERT ON staff_symbol WHEN (EXISTS (SELECT name.id  FROM name JOIN bar_thickness ON name.id = bar_thickness.id JOIN staff_symbol ON name.id = staff_symbol.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'bar_line_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH bar_lines_to_stencils AS  (SELECT name.id AS id, \'bar_line_to_stencil\' AS writer, 0 AS sub_id, 0.0 AS x0, 0.0 AS y0, 0.0 AS x1, staff_space.val * (n_lines.val - 1) AS y1, bar_thickness.val AS thickness  FROM name, staff_space, n_lines, bar_thickness, staff_symbol  WHERE name.id = new.id AND name.val = \'bar_line\' AND name.id = bar_thickness.id AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND staff_symbol.val = n_lines.id)  SELECT bar_lines_to_stencils.id, bar_lines_to_stencils.writer, bar_lines_to_stencils.sub_id, bar_lines_to_stencils.x0, bar_lines_to_stencils.y0, bar_lines_to_stencils.x1, bar_lines_to_stencils.y1, bar_lines_to_stencils.thickness  FROM bar_lines_to_stencils;       END;     CREATE TRIGGER staff_space_insert_del_line_stencil_ins_line_stencil_QOgl AFTER INSERT ON staff_space WHEN (EXISTS (SELECT name.id  FROM name JOIN bar_thickness ON name.id = bar_thickness.id JOIN staff_symbol ON name.id = staff_symbol.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'bar_line_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH bar_lines_to_stencils AS  (SELECT name.id AS id, \'bar_line_to_stencil\' AS writer, 0 AS sub_id, 0.0 AS x0, 0.0 AS y0, 0.0 AS x1, staff_space.val * (n_lines.val - 1) AS y1, bar_thickness.val AS thickness  FROM name, staff_space, n_lines, bar_thickness, staff_symbol  WHERE name.id = new.id AND name.val = \'bar_line\' AND name.id = bar_thickness.id AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND staff_symbol.val = n_lines.id)  SELECT bar_lines_to_stencils.id, bar_lines_to_stencils.writer, bar_lines_to_stencils.sub_id, bar_lines_to_stencils.x0, bar_lines_to_stencils.y0, bar_lines_to_stencils.x1, bar_lines_to_stencils.y1, bar_lines_to_stencils.thickness  FROM bar_lines_to_stencils;       END;     CREATE TRIGGER name_update_del_line_stencil_ins_line_stencil_EILU AFTER UPDATE ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN bar_thickness ON name.id = bar_thickness.id JOIN staff_symbol ON name.id = staff_symbol.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'bar_line_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH bar_lines_to_stencils AS  (SELECT name.id AS id, \'bar_line_to_stencil\' AS writer, 0 AS sub_id, 0.0 AS x0, 0.0 AS y0, 0.0 AS x1, staff_space.val * (n_lines.val - 1) AS y1, bar_thickness.val AS thickness  FROM name, staff_space, n_lines, bar_thickness, staff_symbol  WHERE name.id = new.id AND name.val = \'bar_line\' AND name.id = bar_thickness.id AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND staff_symbol.val = n_lines.id)  SELECT bar_lines_to_stencils.id, bar_lines_to_stencils.writer, bar_lines_to_stencils.sub_id, bar_lines_to_stencils.x0, bar_lines_to_stencils.y0, bar_lines_to_stencils.x1, bar_lines_to_stencils.y1, bar_lines_to_stencils.thickness  FROM bar_lines_to_stencils;       END;     CREATE TRIGGER bar_thickness_update_del_line_stencil_ins_line_stencil_GPAs AFTER UPDATE ON bar_thickness WHEN (EXISTS (SELECT name.id  FROM name JOIN bar_thickness ON name.id = bar_thickness.id JOIN staff_symbol ON name.id = staff_symbol.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'bar_line_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH bar_lines_to_stencils AS  (SELECT name.id AS id, \'bar_line_to_stencil\' AS writer, 0 AS sub_id, 0.0 AS x0, 0.0 AS y0, 0.0 AS x1, staff_space.val * (n_lines.val - 1) AS y1, bar_thickness.val AS thickness  FROM name, staff_space, n_lines, bar_thickness, staff_symbol  WHERE name.id = new.id AND name.val = \'bar_line\' AND name.id = bar_thickness.id AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND staff_symbol.val = n_lines.id)  SELECT bar_lines_to_stencils.id, bar_lines_to_stencils.writer, bar_lines_to_stencils.sub_id, bar_lines_to_stencils.x0, bar_lines_to_stencils.y0, bar_lines_to_stencils.x1, bar_lines_to_stencils.y1, bar_lines_to_stencils.thickness  FROM bar_lines_to_stencils;       END;     CREATE TRIGGER staff_symbol_update_del_line_stencil_ins_line_stencil_VINk AFTER UPDATE ON staff_symbol WHEN (EXISTS (SELECT name.id  FROM name JOIN bar_thickness ON name.id = bar_thickness.id JOIN staff_symbol ON name.id = staff_symbol.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'bar_line_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH bar_lines_to_stencils AS  (SELECT name.id AS id, \'bar_line_to_stencil\' AS writer, 0 AS sub_id, 0.0 AS x0, 0.0 AS y0, 0.0 AS x1, staff_space.val * (n_lines.val - 1) AS y1, bar_thickness.val AS thickness  FROM name, staff_space, n_lines, bar_thickness, staff_symbol  WHERE name.id = new.id AND name.val = \'bar_line\' AND name.id = bar_thickness.id AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND staff_symbol.val = n_lines.id)  SELECT bar_lines_to_stencils.id, bar_lines_to_stencils.writer, bar_lines_to_stencils.sub_id, bar_lines_to_stencils.x0, bar_lines_to_stencils.y0, bar_lines_to_stencils.x1, bar_lines_to_stencils.y1, bar_lines_to_stencils.thickness  FROM bar_lines_to_stencils;       END;     CREATE TRIGGER staff_space_update_del_line_stencil_ins_line_stencil_DvkD AFTER UPDATE ON staff_space WHEN (EXISTS (SELECT name.id  FROM name JOIN bar_thickness ON name.id = bar_thickness.id JOIN staff_symbol ON name.id = staff_symbol.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'bar_line_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH bar_lines_to_stencils AS  (SELECT name.id AS id, \'bar_line_to_stencil\' AS writer, 0 AS sub_id, 0.0 AS x0, 0.0 AS y0, 0.0 AS x1, staff_space.val * (n_lines.val - 1) AS y1, bar_thickness.val AS thickness  FROM name, staff_space, n_lines, bar_thickness, staff_symbol  WHERE name.id = new.id AND name.val = \'bar_line\' AND name.id = bar_thickness.id AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND staff_symbol.val = n_lines.id)  SELECT bar_lines_to_stencils.id, bar_lines_to_stencils.writer, bar_lines_to_stencils.sub_id, bar_lines_to_stencils.x0, bar_lines_to_stencils.y0, bar_lines_to_stencils.x1, bar_lines_to_stencils.y1, bar_lines_to_stencils.thickness  FROM bar_lines_to_stencils;       END;     CREATE TRIGGER name_delete_del_line_stencil_ins_line_stencil_HsSV AFTER DELETE ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN bar_thickness ON name.id = bar_thickness.id JOIN staff_symbol ON name.id = staff_symbol.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = old.id AND line_stencil.writer = \'bar_line_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH bar_lines_to_stencils AS  (SELECT name.id AS id, \'bar_line_to_stencil\' AS writer, 0 AS sub_id, 0.0 AS x0, 0.0 AS y0, 0.0 AS x1, staff_space.val * (n_lines.val - 1) AS y1, bar_thickness.val AS thickness  FROM name, staff_space, n_lines, bar_thickness, staff_symbol  WHERE name.id = old.id AND name.val = \'bar_line\' AND name.id = bar_thickness.id AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND staff_symbol.val = n_lines.id)  SELECT bar_lines_to_stencils.id, bar_lines_to_stencils.writer, bar_lines_to_stencils.sub_id, bar_lines_to_stencils.x0, bar_lines_to_stencils.y0, bar_lines_to_stencils.x1, bar_lines_to_stencils.y1, bar_lines_to_stencils.thickness  FROM bar_lines_to_stencils;       END;     CREATE TRIGGER bar_thickness_delete_del_line_stencil_ins_line_stencil_BLuv AFTER DELETE ON bar_thickness WHEN (EXISTS (SELECT name.id  FROM name JOIN bar_thickness ON name.id = bar_thickness.id JOIN staff_symbol ON name.id = staff_symbol.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = old.id AND line_stencil.writer = \'bar_line_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH bar_lines_to_stencils AS  (SELECT name.id AS id, \'bar_line_to_stencil\' AS writer, 0 AS sub_id, 0.0 AS x0, 0.0 AS y0, 0.0 AS x1, staff_space.val * (n_lines.val - 1) AS y1, bar_thickness.val AS thickness  FROM name, staff_space, n_lines, bar_thickness, staff_symbol  WHERE name.id = old.id AND name.val = \'bar_line\' AND name.id = bar_thickness.id AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND staff_symbol.val = n_lines.id)  SELECT bar_lines_to_stencils.id, bar_lines_to_stencils.writer, bar_lines_to_stencils.sub_id, bar_lines_to_stencils.x0, bar_lines_to_stencils.y0, bar_lines_to_stencils.x1, bar_lines_to_stencils.y1, bar_lines_to_stencils.thickness  FROM bar_lines_to_stencils;       END;     CREATE TRIGGER staff_symbol_delete_del_line_stencil_ins_line_stencil_VSjR AFTER DELETE ON staff_symbol WHEN (EXISTS (SELECT name.id  FROM name JOIN bar_thickness ON name.id = bar_thickness.id JOIN staff_symbol ON name.id = staff_symbol.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = old.id AND line_stencil.writer = \'bar_line_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH bar_lines_to_stencils AS  (SELECT name.id AS id, \'bar_line_to_stencil\' AS writer, 0 AS sub_id, 0.0 AS x0, 0.0 AS y0, 0.0 AS x1, staff_space.val * (n_lines.val - 1) AS y1, bar_thickness.val AS thickness  FROM name, staff_space, n_lines, bar_thickness, staff_symbol  WHERE name.id = old.id AND name.val = \'bar_line\' AND name.id = bar_thickness.id AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND staff_symbol.val = n_lines.id)  SELECT bar_lines_to_stencils.id, bar_lines_to_stencils.writer, bar_lines_to_stencils.sub_id, bar_lines_to_stencils.x0, bar_lines_to_stencils.y0, bar_lines_to_stencils.x1, bar_lines_to_stencils.y1, bar_lines_to_stencils.thickness  FROM bar_lines_to_stencils;       END;     CREATE TRIGGER staff_space_delete_del_line_stencil_ins_line_stencil_FQdo AFTER DELETE ON staff_space WHEN (EXISTS (SELECT name.id  FROM name JOIN bar_thickness ON name.id = bar_thickness.id JOIN staff_symbol ON name.id = staff_symbol.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = old.id AND line_stencil.writer = \'bar_line_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH bar_lines_to_stencils AS  (SELECT name.id AS id, \'bar_line_to_stencil\' AS writer, 0 AS sub_id, 0.0 AS x0, 0.0 AS y0, 0.0 AS x1, staff_space.val * (n_lines.val - 1) AS y1, bar_thickness.val AS thickness  FROM name, staff_space, n_lines, bar_thickness, staff_symbol  WHERE name.id = old.id AND name.val = \'bar_line\' AND name.id = bar_thickness.id AND name.id = staff_symbol.id AND staff_symbol.val = staff_space.id AND staff_symbol.val = n_lines.id)  SELECT bar_lines_to_stencils.id, bar_lines_to_stencils.writer, bar_lines_to_stencils.sub_id, bar_lines_to_stencils.x0, bar_lines_to_stencils.y0, bar_lines_to_stencils.x1, bar_lines_to_stencils.y1, bar_lines_to_stencils.thickness  FROM bar_lines_to_stencils;       END;     CREATE TRIGGER name_insert_del_line_stencil_ins_line_stencil_HraH AFTER INSERT ON name        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER line_thickness_insert_del_line_stencil_ins_line_stencil_TnAY AFTER INSERT ON line_thickness        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER n_lines_insert_del_line_stencil_ins_line_stencil_VPBL AFTER INSERT ON n_lines        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER staff_space_insert_del_line_stencil_ins_line_stencil_LDbu AFTER INSERT ON staff_space        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER name_update_del_line_stencil_ins_line_stencil_NDyz AFTER UPDATE ON name        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER line_thickness_update_del_line_stencil_ins_line_stencil_HUuG AFTER UPDATE ON line_thickness        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER n_lines_update_del_line_stencil_ins_line_stencil_WWXx AFTER UPDATE ON n_lines        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER staff_space_update_del_line_stencil_ins_line_stencil_TfLt AFTER UPDATE ON staff_space        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER name_delete_del_line_stencil_ins_line_stencil_HkoV AFTER DELETE ON name        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER line_thickness_delete_del_line_stencil_ins_line_stencil_DSnE AFTER DELETE ON line_thickness        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER n_lines_delete_del_line_stencil_ins_line_stencil_QCgE AFTER DELETE ON n_lines        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER staff_space_delete_del_line_stencil_ins_line_stencil_GBCK AFTER DELETE ON staff_space        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER x_position_insert_del_line_stencil_ins_line_stencil_OBUK AFTER INSERT ON x_position        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER x_position_update_del_line_stencil_ins_line_stencil_SrAb AFTER UPDATE ON x_position        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER x_position_delete_del_line_stencil_ins_line_stencil_IvGM AFTER DELETE ON x_position        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.writer = \'staff_symbol_to_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE x_position_min_max AS  (SELECT min(x_position.val) AS x_position_min, max(x_position.val) AS x_position_max  FROM x_position),  line_from_staff_symbol(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT name.id AS id, \'staff_symbol_to_stencil\' AS writer, 0 AS sub_id, x_position_min_max.x_position_min AS x0, 0.0 AS y0, x_position_min_max.x_position_max + CASE WHEN (last_elt_name.val = \'bar_line\') THEN 0.0 ELSE 5.5 END AS x1, 0.0 AS y1, line_thickness.val AS thickness  FROM x_position_min_max, name AS last_elt_name, x_position, name JOIN line_thickness ON name.id = line_thickness.id JOIN n_lines ON name.id = n_lines.id JOIN staff_space ON name.id = staff_space.id  WHERE name.val = \'staff_symbol\' AND last_elt_name.id = x_position.id AND x_position.val = x_position_min_max.x_position_max AND x_position_min_max.x_position_min IS NOT NULL AND x_position_min_max.x_position_max IS NOT NULL AND n_lines.val > 0 UNION ALL SELECT prev_line.id AS id, \'staff_symbol_to_stencil\' AS anon_1, prev_line.sub_id + 1 AS anon_2, prev_line.x0 AS x0, prev_line.y0 + staff_space.val AS anon_3, prev_line.x1 AS x1, prev_line.y1 + staff_space.val AS anon_4, prev_line.thickness AS thickness  FROM line_from_staff_symbol AS prev_line JOIN line_thickness ON prev_line.id = line_thickness.id JOIN n_lines ON prev_line.id = n_lines.id JOIN staff_space ON prev_line.id = staff_space.id  WHERE prev_line.sub_id + 1 < n_lines.val)  SELECT line_from_staff_symbol.id, line_from_staff_symbol.writer, line_from_staff_symbol.sub_id, line_from_staff_symbol.x0, line_from_staff_symbol.y0, line_from_staff_symbol.x1, line_from_staff_symbol.y1, line_from_staff_symbol.thickness  FROM line_from_staff_symbol;       END;     CREATE TRIGGER name_insert_del_glyph_stencil_ins_glyph_stencil_VODc AFTER INSERT ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER font_name_insert_del_glyph_stencil_ins_glyph_stencil_KmON AFTER INSERT ON font_name WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER font_size_insert_del_glyph_stencil_ins_glyph_stencil_WeXx AFTER INSERT ON font_size WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER key_signature_insert_del_glyph_stencil_ins_glyph_stencil_ZcVc AFTER INSERT ON key_signature WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER staff_symbol_insert_del_glyph_stencil_ins_glyph_stencil_Yved AFTER INSERT ON staff_symbol WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER width_insert_del_glyph_stencil_ins_glyph_stencil_BSls AFTER INSERT ON width WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER name_update_del_glyph_stencil_ins_glyph_stencil_Npse AFTER UPDATE ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER font_name_update_del_glyph_stencil_ins_glyph_stencil_ZvZf AFTER UPDATE ON font_name WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER font_size_update_del_glyph_stencil_ins_glyph_stencil_VazU AFTER UPDATE ON font_size WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER key_signature_update_del_glyph_stencil_ins_glyph_stencil_OBtg AFTER UPDATE ON key_signature WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER staff_symbol_update_del_glyph_stencil_ins_glyph_stencil_Cccc AFTER UPDATE ON staff_symbol WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER width_update_del_glyph_stencil_ins_glyph_stencil_JOrP AFTER UPDATE ON width WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = new.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER name_delete_del_glyph_stencil_ins_glyph_stencil_KIfk AFTER DELETE ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = old.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER font_name_delete_del_glyph_stencil_ins_glyph_stencil_UYNF AFTER DELETE ON font_name WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = old.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER font_size_delete_del_glyph_stencil_ins_glyph_stencil_GmRY AFTER DELETE ON font_size WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = old.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER key_signature_delete_del_glyph_stencil_ins_glyph_stencil_KMYC AFTER DELETE ON key_signature WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = old.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER staff_symbol_delete_del_glyph_stencil_ins_glyph_stencil_Mvcw AFTER DELETE ON staff_symbol WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = old.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER width_delete_del_glyph_stencil_ins_glyph_stencil_YPvB AFTER DELETE ON width WHEN (EXISTS (SELECT name.id  FROM name JOIN font_name ON name.id = font_name.id JOIN font_size ON name.id = font_size.id JOIN key_signature ON name.id = key_signature.id JOIN staff_symbol ON name.id = staff_symbol.id JOIN width ON name.id = width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'key_signature_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE key_signature_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT key_signature.id AS id, \'key_signature_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (key_signature.val > 0) THEN \'U+E262\' ELSE \'U+E260\' END AS unicode, 0 AS x, CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 0.0 END AS y  FROM key_signature, font_name, font_size, name  WHERE key_signature.id = old.id AND name.val = \'key_signature\' AND name.id = font_name.id AND name.id = font_size.id AND name.id = key_signature.id AND key_signature.val != 0 UNION ALL SELECT key_signature_to_stencil_prev.id AS id, \'key_signature_to_stencil\' AS anon_2, key_signature_to_stencil_prev.sub_id + 1 AS anon_3, key_signature_to_stencil_prev.font_name AS font_name, key_signature_to_stencil_prev.font_size AS font_size, key_signature_to_stencil_prev.unicode AS unicode, (width.val * (key_signature_to_stencil_prev.sub_id + 1.0)) / key_signature.val AS anon_4, CASE WHEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END > 2.0) THEN (key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END) - 3.5 ELSE key_signature_to_stencil_prev.y + CASE WHEN (key_signature.val > 0) THEN 2.0 ELSE 1.5 END END AS anon_5  FROM key_signature_to_stencil AS key_signature_to_stencil_prev, width, key_signature  WHERE width.id = key_signature_to_stencil_prev.id AND key_signature_to_stencil_prev.sub_id + 1 < abs(key_signature.val) AND key_signature_to_stencil_prev.id = key_signature.id),  key_signature_to_stencil_normalized_for_staff_space AS  (SELECT key_signature_to_stencil.id AS id, key_signature_to_stencil.writer AS writer, key_signature_to_stencil.sub_id AS sub_id, key_signature_to_stencil.font_name AS font_name, key_signature_to_stencil.font_size AS font_size, key_signature_to_stencil.unicode AS unicode, key_signature_to_stencil.x AS x, (key_signature_to_stencil.y * -1.0 + 2.0) * staff_space.val AS anon_1  FROM key_signature_to_stencil, staff_space, staff_symbol  WHERE key_signature_to_stencil.id = staff_symbol.id AND staff_symbol.val = staff_space.id)  SELECT key_signature_to_stencil_normalized_for_staff_space.id, key_signature_to_stencil_normalized_for_staff_space.writer, key_signature_to_stencil_normalized_for_staff_space.sub_id, key_signature_to_stencil_normalized_for_staff_space.font_name, key_signature_to_stencil_normalized_for_staff_space.font_size, key_signature_to_stencil_normalized_for_staff_space.unicode, key_signature_to_stencil_normalized_for_staff_space.x, key_signature_to_stencil_normalized_for_staff_space.anon_1  FROM key_signature_to_stencil_normalized_for_staff_space;       END;     CREATE TRIGGER font_name_insert_del_glyph_stencil_ins_glyph_stencil_LLGr AFTER INSERT ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_glyph_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END AS unicode, 0 AS x, 0 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id  WHERE duration_log.id = new.id)  SELECT duration_log_to_glyph_stencils.id, duration_log_to_glyph_stencils.writer, duration_log_to_glyph_stencils.sub_id, duration_log_to_glyph_stencils.font_name, duration_log_to_glyph_stencils.font_size, duration_log_to_glyph_stencils.unicode, duration_log_to_glyph_stencils.x, duration_log_to_glyph_stencils.y  FROM duration_log_to_glyph_stencils;       END;     CREATE TRIGGER font_size_insert_del_glyph_stencil_ins_glyph_stencil_NpBp AFTER INSERT ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_glyph_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END AS unicode, 0 AS x, 0 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id  WHERE duration_log.id = new.id)  SELECT duration_log_to_glyph_stencils.id, duration_log_to_glyph_stencils.writer, duration_log_to_glyph_stencils.sub_id, duration_log_to_glyph_stencils.font_name, duration_log_to_glyph_stencils.font_size, duration_log_to_glyph_stencils.unicode, duration_log_to_glyph_stencils.x, duration_log_to_glyph_stencils.y  FROM duration_log_to_glyph_stencils;       END;     CREATE TRIGGER duration_log_insert_del_glyph_stencil_ins_glyph_stencil_SsXi AFTER INSERT ON duration_log WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_glyph_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END AS unicode, 0 AS x, 0 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id  WHERE duration_log.id = new.id)  SELECT duration_log_to_glyph_stencils.id, duration_log_to_glyph_stencils.writer, duration_log_to_glyph_stencils.sub_id, duration_log_to_glyph_stencils.font_name, duration_log_to_glyph_stencils.font_size, duration_log_to_glyph_stencils.unicode, duration_log_to_glyph_stencils.x, duration_log_to_glyph_stencils.y  FROM duration_log_to_glyph_stencils;       END;     CREATE TRIGGER name_insert_del_glyph_stencil_ins_glyph_stencil_Wuvr AFTER INSERT ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_glyph_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END AS unicode, 0 AS x, 0 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id  WHERE duration_log.id = new.id)  SELECT duration_log_to_glyph_stencils.id, duration_log_to_glyph_stencils.writer, duration_log_to_glyph_stencils.sub_id, duration_log_to_glyph_stencils.font_name, duration_log_to_glyph_stencils.font_size, duration_log_to_glyph_stencils.unicode, duration_log_to_glyph_stencils.x, duration_log_to_glyph_stencils.y  FROM duration_log_to_glyph_stencils;       END;     CREATE TRIGGER font_name_update_del_glyph_stencil_ins_glyph_stencil_UgFW AFTER UPDATE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_glyph_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END AS unicode, 0 AS x, 0 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id  WHERE duration_log.id = new.id)  SELECT duration_log_to_glyph_stencils.id, duration_log_to_glyph_stencils.writer, duration_log_to_glyph_stencils.sub_id, duration_log_to_glyph_stencils.font_name, duration_log_to_glyph_stencils.font_size, duration_log_to_glyph_stencils.unicode, duration_log_to_glyph_stencils.x, duration_log_to_glyph_stencils.y  FROM duration_log_to_glyph_stencils;       END;     CREATE TRIGGER font_size_update_del_glyph_stencil_ins_glyph_stencil_NVTs AFTER UPDATE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_glyph_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END AS unicode, 0 AS x, 0 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id  WHERE duration_log.id = new.id)  SELECT duration_log_to_glyph_stencils.id, duration_log_to_glyph_stencils.writer, duration_log_to_glyph_stencils.sub_id, duration_log_to_glyph_stencils.font_name, duration_log_to_glyph_stencils.font_size, duration_log_to_glyph_stencils.unicode, duration_log_to_glyph_stencils.x, duration_log_to_glyph_stencils.y  FROM duration_log_to_glyph_stencils;       END;     CREATE TRIGGER duration_log_update_del_glyph_stencil_ins_glyph_stencil_WGZI AFTER UPDATE ON duration_log WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_glyph_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END AS unicode, 0 AS x, 0 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id  WHERE duration_log.id = new.id)  SELECT duration_log_to_glyph_stencils.id, duration_log_to_glyph_stencils.writer, duration_log_to_glyph_stencils.sub_id, duration_log_to_glyph_stencils.font_name, duration_log_to_glyph_stencils.font_size, duration_log_to_glyph_stencils.unicode, duration_log_to_glyph_stencils.x, duration_log_to_glyph_stencils.y  FROM duration_log_to_glyph_stencils;       END;     CREATE TRIGGER name_update_del_glyph_stencil_ins_glyph_stencil_OQHg AFTER UPDATE ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_glyph_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END AS unicode, 0 AS x, 0 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id  WHERE duration_log.id = new.id)  SELECT duration_log_to_glyph_stencils.id, duration_log_to_glyph_stencils.writer, duration_log_to_glyph_stencils.sub_id, duration_log_to_glyph_stencils.font_name, duration_log_to_glyph_stencils.font_size, duration_log_to_glyph_stencils.unicode, duration_log_to_glyph_stencils.x, duration_log_to_glyph_stencils.y  FROM duration_log_to_glyph_stencils;       END;     CREATE TRIGGER font_name_delete_del_glyph_stencil_ins_glyph_stencil_Dbwk AFTER DELETE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'duration_log_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_glyph_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END AS unicode, 0 AS x, 0 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id  WHERE duration_log.id = old.id)  SELECT duration_log_to_glyph_stencils.id, duration_log_to_glyph_stencils.writer, duration_log_to_glyph_stencils.sub_id, duration_log_to_glyph_stencils.font_name, duration_log_to_glyph_stencils.font_size, duration_log_to_glyph_stencils.unicode, duration_log_to_glyph_stencils.x, duration_log_to_glyph_stencils.y  FROM duration_log_to_glyph_stencils;       END;     CREATE TRIGGER font_size_delete_del_glyph_stencil_ins_glyph_stencil_WALh AFTER DELETE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'duration_log_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_glyph_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END AS unicode, 0 AS x, 0 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id  WHERE duration_log.id = old.id)  SELECT duration_log_to_glyph_stencils.id, duration_log_to_glyph_stencils.writer, duration_log_to_glyph_stencils.sub_id, duration_log_to_glyph_stencils.font_name, duration_log_to_glyph_stencils.font_size, duration_log_to_glyph_stencils.unicode, duration_log_to_glyph_stencils.x, duration_log_to_glyph_stencils.y  FROM duration_log_to_glyph_stencils;       END;     CREATE TRIGGER duration_log_delete_del_glyph_stencil_ins_glyph_stencil_Hyuw AFTER DELETE ON duration_log WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'duration_log_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_glyph_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END AS unicode, 0 AS x, 0 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id  WHERE duration_log.id = old.id)  SELECT duration_log_to_glyph_stencils.id, duration_log_to_glyph_stencils.writer, duration_log_to_glyph_stencils.sub_id, duration_log_to_glyph_stencils.font_name, duration_log_to_glyph_stencils.font_size, duration_log_to_glyph_stencils.unicode, duration_log_to_glyph_stencils.x, duration_log_to_glyph_stencils.y  FROM duration_log_to_glyph_stencils;       END;     CREATE TRIGGER name_delete_del_glyph_stencil_ins_glyph_stencil_DfjW AFTER DELETE ON name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN name ON font_name.id = name.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'duration_log_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_glyph_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -1 AND name.val = \'note\') THEN \'U+E0A3\' WHEN (duration_log.val = 0 AND name.val = \'note\') THEN \'U+E0A2\' WHEN (duration_log.val = 0 AND name.val = \'rest\') THEN \'U+E4E3\' WHEN (duration_log.val = -1 AND name.val = \'rest\') THEN \'U+E4E4\' WHEN (duration_log.val = -2 AND name.val = \'rest\') THEN \'U+E4E5\' WHEN (duration_log.val = -3 AND name.val = \'rest\') THEN \'U+E4E6\' WHEN (duration_log.val = -4 AND name.val = \'rest\') THEN \'U+E4E7\' WHEN (duration_log.val = -5 AND name.val = \'rest\') THEN \'U+E4E8\' WHEN (duration_log.val = -6 AND name.val = \'rest\') THEN \'U+E4E9\' WHEN (duration_log.val = -7 AND name.val = \'rest\') THEN \'U+E4EA\' WHEN (name.val = \'note\') THEN \'U+E0A4\' ELSE 0 END AS unicode, 0 AS x, 0 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN name ON duration_log.id = name.id JOIN font_size ON duration_log.id = font_size.id  WHERE duration_log.id = old.id)  SELECT duration_log_to_glyph_stencils.id, duration_log_to_glyph_stencils.writer, duration_log_to_glyph_stencils.sub_id, duration_log_to_glyph_stencils.font_name, duration_log_to_glyph_stencils.font_size, duration_log_to_glyph_stencils.unicode, duration_log_to_glyph_stencils.x, duration_log_to_glyph_stencils.y  FROM duration_log_to_glyph_stencils;       END;     CREATE TRIGGER font_name_insert_del_glyph_stencil_ins_glyph_stencil_DqXS AFTER INSERT ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = new.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER font_size_insert_del_glyph_stencil_ins_glyph_stencil_GUKt AFTER INSERT ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = new.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER accidental_insert_del_glyph_stencil_ins_glyph_stencil_PjeX AFTER INSERT ON accidental WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = new.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER accidental_width_insert_del_glyph_stencil_ins_glyph_stencil_Rztr AFTER INSERT ON accidental_width WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = new.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER rhythmic_event_to_accidental_padding_insert_del_glyph_stencil_ins_glyph_stencil_SdcY AFTER INSERT ON rhythmic_event_to_accidental_padding WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = new.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER font_name_update_del_glyph_stencil_ins_glyph_stencil_QJLK AFTER UPDATE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = new.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER font_size_update_del_glyph_stencil_ins_glyph_stencil_XBDo AFTER UPDATE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = new.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER accidental_update_del_glyph_stencil_ins_glyph_stencil_SccF AFTER UPDATE ON accidental WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = new.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER accidental_width_update_del_glyph_stencil_ins_glyph_stencil_GsMT AFTER UPDATE ON accidental_width WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = new.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER rhythmic_event_to_accidental_padding_update_del_glyph_stencil_ins_glyph_stencil_Tqor AFTER UPDATE ON rhythmic_event_to_accidental_padding WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = new.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER font_name_delete_del_glyph_stencil_ins_glyph_stencil_ZHrW AFTER DELETE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = old.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER font_size_delete_del_glyph_stencil_ins_glyph_stencil_DKTc AFTER DELETE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = old.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER accidental_delete_del_glyph_stencil_ins_glyph_stencil_HhqE AFTER DELETE ON accidental WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = old.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER accidental_width_delete_del_glyph_stencil_ins_glyph_stencil_ZkeF AFTER DELETE ON accidental_width WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = old.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER rhythmic_event_to_accidental_padding_delete_del_glyph_stencil_ins_glyph_stencil_MeOE AFTER DELETE ON rhythmic_event_to_accidental_padding WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN accidental ON font_name.id = accidental.id JOIN accidental_width ON font_name.id = accidental_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'accidental_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH accidental_to_stencil AS  (SELECT accidental.id AS id, \'accidental_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (accidental.val = -1) THEN \'U+E260\' WHEN (accidental.val = 0) THEN \'U+E261\' WHEN (accidental.val = 1) THEN \'U+E262\' END AS unicode, -1 * (CASE WHEN (rhythmic_event_to_accidental_padding.val IS NOT NULL) THEN rhythmic_event_to_accidental_padding.val ELSE rhythmic_event_to_accidental_padding_default.val END + accidental_width.val) AS x, 0 AS y  FROM font_name, font_size, rhythmic_event_to_accidental_padding AS rhythmic_event_to_accidental_padding_default, accidental_width, accidental LEFT OUTER JOIN rhythmic_event_to_accidental_padding ON rhythmic_event_to_accidental_padding.id = accidental.id  WHERE accidental.id = old.id AND accidental.id = font_name.id AND accidental.id = font_size.id AND accidental.id = accidental_width.id AND rhythmic_event_to_accidental_padding_default.id = -1)  SELECT accidental_to_stencil.id, accidental_to_stencil.writer, accidental_to_stencil.sub_id, accidental_to_stencil.font_name, accidental_to_stencil.font_size, accidental_to_stencil.unicode, accidental_to_stencil.x, accidental_to_stencil.y  FROM accidental_to_stencil;       END;     CREATE TRIGGER font_name_insert_del_glyph_stencil_ins_glyph_stencil_TgVl AFTER INSERT ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = new.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER font_size_insert_del_glyph_stencil_ins_glyph_stencil_RXTX AFTER INSERT ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = new.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER dots_insert_del_glyph_stencil_ins_glyph_stencil_IsPV AFTER INSERT ON dots WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = new.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER dot_width_insert_del_glyph_stencil_ins_glyph_stencil_DQea AFTER INSERT ON dot_width WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = new.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER rhythmic_head_width_insert_del_glyph_stencil_ins_glyph_stencil_DYUN AFTER INSERT ON rhythmic_head_width WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = new.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER rhythmic_event_to_dot_padding_insert_del_glyph_stencil_ins_glyph_stencil_VSRT AFTER INSERT ON rhythmic_event_to_dot_padding WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = new.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER font_name_update_del_glyph_stencil_ins_glyph_stencil_GzWv AFTER UPDATE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = new.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER font_size_update_del_glyph_stencil_ins_glyph_stencil_Njgz AFTER UPDATE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = new.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER dots_update_del_glyph_stencil_ins_glyph_stencil_CUcZ AFTER UPDATE ON dots WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = new.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER dot_width_update_del_glyph_stencil_ins_glyph_stencil_RzOT AFTER UPDATE ON dot_width WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = new.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER rhythmic_head_width_update_del_glyph_stencil_ins_glyph_stencil_JmEY AFTER UPDATE ON rhythmic_head_width WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = new.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER rhythmic_event_to_dot_padding_update_del_glyph_stencil_ins_glyph_stencil_Dngf AFTER UPDATE ON rhythmic_event_to_dot_padding WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = new.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER font_name_delete_del_glyph_stencil_ins_glyph_stencil_IeHL AFTER DELETE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = old.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER font_size_delete_del_glyph_stencil_ins_glyph_stencil_Mjmk AFTER DELETE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = old.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER dots_delete_del_glyph_stencil_ins_glyph_stencil_WxIq AFTER DELETE ON dots WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = old.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER dot_width_delete_del_glyph_stencil_ins_glyph_stencil_VQiC AFTER DELETE ON dot_width WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = old.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER rhythmic_head_width_delete_del_glyph_stencil_ins_glyph_stencil_Sjgr AFTER DELETE ON rhythmic_head_width WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = old.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER rhythmic_event_to_dot_padding_delete_del_glyph_stencil_ins_glyph_stencil_ANgN AFTER DELETE ON rhythmic_event_to_dot_padding WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN dots ON font_name.id = dots.id JOIN dot_width ON font_name.id = dot_width.id JOIN rhythmic_head_width ON font_name.id = rhythmic_head_width.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'dots_to_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH RECURSIVE dots_to_stencil(id, writer, sub_id, font_name, font_size, unicode, x, y) AS  (SELECT dots.id AS id, \'dots_to_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, \'U+E1E7\' AS unicode, rhythmic_head_width.val + CASE WHEN (rhythmic_event_to_dot_padding.val IS NOT NULL) THEN rhythmic_event_to_dot_padding.val ELSE rhythmic_event_to_dot_padding_default.val END AS x, 0 AS y  FROM font_name, font_size, rhythmic_head_width, rhythmic_event_to_dot_padding AS rhythmic_event_to_dot_padding_default, dots LEFT OUTER JOIN rhythmic_event_to_dot_padding ON rhythmic_event_to_dot_padding.id = dots.id  WHERE dots.id = old.id AND dots.id = font_name.id AND dots.id = font_size.id AND dots.id = rhythmic_head_width.id AND dots.val > 0 AND rhythmic_event_to_dot_padding_default.id = -1 UNION ALL SELECT dots_to_stencil_left.id AS id, dots_to_stencil_left.writer AS writer, dots_to_stencil_left.sub_id + 1 AS anon_1, dots_to_stencil_left.font_name AS font_name, dots_to_stencil_left.font_size AS font_size, dots_to_stencil_left.unicode AS unicode, dots_to_stencil_left.x + (1.0 * dot_width.val) / dots.val AS anon_2, 0 AS y  FROM dots_to_stencil AS dots_to_stencil_left, dot_width, dots  WHERE dots.id = dot_width.id AND dots.id = dots_to_stencil_left.id AND dots.val > dots_to_stencil_left.sub_id + 1)  SELECT dots_to_stencil.id, dots_to_stencil.writer, dots_to_stencil.sub_id, dots_to_stencil.font_name, dots_to_stencil.font_size, dots_to_stencil.unicode, dots_to_stencil.x, dots_to_stencil.y  FROM dots_to_stencil;       END;     CREATE TRIGGER beam_insert_del_glyph_stencil_ins_glyph_stencil_SuIt AFTER INSERT ON beam WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER font_name_insert_del_glyph_stencil_ins_glyph_stencil_BGSL AFTER INSERT ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER font_size_insert_del_glyph_stencil_ins_glyph_stencil_IOsB AFTER INSERT ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER duration_log_insert_del_glyph_stencil_ins_glyph_stencil_DkSh AFTER INSERT ON duration_log WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER stem_x_offset_insert_del_glyph_stencil_ins_glyph_stencil_ScmF AFTER INSERT ON stem_x_offset WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER natural_stem_end_insert_del_glyph_stencil_ins_glyph_stencil_TaAG AFTER INSERT ON natural_stem_end WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER stem_direction_insert_del_glyph_stencil_ins_glyph_stencil_GaVy AFTER INSERT ON stem_direction WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER beam_update_del_glyph_stencil_ins_glyph_stencil_ZcBb AFTER UPDATE ON beam WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER font_name_update_del_glyph_stencil_ins_glyph_stencil_RduU AFTER UPDATE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER font_size_update_del_glyph_stencil_ins_glyph_stencil_UaZb AFTER UPDATE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER duration_log_update_del_glyph_stencil_ins_glyph_stencil_Oiql AFTER UPDATE ON duration_log WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER stem_x_offset_update_del_glyph_stencil_ins_glyph_stencil_WerZ AFTER UPDATE ON stem_x_offset WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER natural_stem_end_update_del_glyph_stencil_ins_glyph_stencil_UHrC AFTER UPDATE ON natural_stem_end WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER stem_direction_update_del_glyph_stencil_ins_glyph_stencil_ZmoX AFTER UPDATE ON stem_direction WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = new.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = new.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER beam_delete_del_glyph_stencil_ins_glyph_stencil_PIvX AFTER DELETE ON beam WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = old.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER font_name_delete_del_glyph_stencil_ins_glyph_stencil_GGun AFTER DELETE ON font_name WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = old.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER font_size_delete_del_glyph_stencil_ins_glyph_stencil_HSeQ AFTER DELETE ON font_size WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = old.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER duration_log_delete_del_glyph_stencil_ins_glyph_stencil_VMnB AFTER DELETE ON duration_log WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = old.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER stem_x_offset_delete_del_glyph_stencil_ins_glyph_stencil_Lxyy AFTER DELETE ON stem_x_offset WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = old.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER natural_stem_end_delete_del_glyph_stencil_ins_glyph_stencil_DfZH AFTER DELETE ON natural_stem_end WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = old.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER stem_direction_delete_del_glyph_stencil_ins_glyph_stencil_SbPG AFTER DELETE ON stem_direction WHEN (EXISTS (SELECT font_name.id  FROM font_name JOIN font_size ON font_name.id = font_size.id JOIN duration_log ON font_name.id = duration_log.id JOIN stem_x_offset ON font_name.id = stem_x_offset.id JOIN natural_stem_end ON font_name.id = natural_stem_end.id JOIN stem_direction ON font_name.id = stem_direction.id))       BEGIN                      DELETE FROM glyph_stencil WHERE glyph_stencil.id = old.id AND glyph_stencil.writer = \'duration_log_to_flag_stencil\';           INSERT INTO glyph_stencil (id, writer, sub_id, font_name, font_size, unicode, x, y) WITH duration_log_to_flag_stencils AS  (SELECT duration_log.id AS id, \'duration_log_to_flag_stencil\' AS writer, 0 AS sub_id, font_name.val AS font_name, font_size.val AS font_size, CASE WHEN (duration_log.val = -3 AND stem_direction.val = 1) THEN \'U+E240\' WHEN (duration_log.val = -4 AND stem_direction.val = 1) THEN \'U+E242\' WHEN (duration_log.val = -5 AND stem_direction.val = 1) THEN \'U+E244\' WHEN (duration_log.val = -6 AND stem_direction.val = 1) THEN \'U+E246\' WHEN (duration_log.val = -7 AND stem_direction.val = 1) THEN \'U+E248\' WHEN (duration_log.val = -8 AND stem_direction.val = 1) THEN \'U+E24A\' WHEN (duration_log.val = -3 AND stem_direction.val = -1) THEN \'U+E241\' WHEN (duration_log.val = -4 AND stem_direction.val = -1) THEN \'U+E243\' WHEN (duration_log.val = -5 AND stem_direction.val = -1) THEN \'U+E245\' WHEN (duration_log.val = -6 AND stem_direction.val = -1) THEN \'U+E247\' WHEN (duration_log.val = -7 AND stem_direction.val = -1) THEN \'U+E249\' WHEN (duration_log.val = -8 AND stem_direction.val = -1) THEN \'U+E24B\' END AS unicode, stem_x_offset.val + CASE WHEN (stem_direction.val > 0) THEN 0.1 ELSE 0.0 END AS x, natural_stem_end.val * -1 AS y  FROM duration_log JOIN font_name ON duration_log.id = font_name.id JOIN font_size ON duration_log.id = font_size.id JOIN stem_x_offset ON duration_log.id = stem_x_offset.id JOIN natural_stem_end ON duration_log.id = natural_stem_end.id JOIN stem_direction ON duration_log.id = stem_direction.id LEFT OUTER JOIN beam ON beam.id = duration_log.id  WHERE duration_log.id = old.id AND beam.val IS NULL AND duration_log.val < -2)  SELECT duration_log_to_flag_stencils.id, duration_log_to_flag_stencils.writer, duration_log_to_flag_stencils.sub_id, duration_log_to_flag_stencils.font_name, duration_log_to_flag_stencils.font_size, duration_log_to_flag_stencils.unicode, duration_log_to_flag_stencils.x, duration_log_to_flag_stencils.y  FROM duration_log_to_flag_stencils;       END;     CREATE TRIGGER stem_x_offset_insert_del_line_stencil_ins_line_stencil_Anbu AFTER INSERT ON stem_x_offset WHEN (EXISTS (SELECT stem_x_offset.id  FROM stem_x_offset JOIN stem_end ON stem_x_offset.id = stem_end.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'stem_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH stem_to_line_stencil AS  (SELECT stem_x_offset.id AS id, \'stem_to_line_stencil\' AS writer, 0 AS sub_id, stem_x_offset.val + CASE WHEN (stem_end.val > 0) THEN 0.25 ELSE 0.12 END AS x0, 0.0 AS y0, stem_x_offset.val + CASE WHEN (stem_end.val > 0) THEN 0.25 ELSE 0.12 END AS x1, stem_end.val * -1 AS y1, 0.16 AS thickness  FROM stem_x_offset, stem_end  WHERE stem_x_offset.id = stem_end.id AND stem_end.id = stem_x_offset.id AND stem_end.id = new.id)  SELECT stem_to_line_stencil.id, stem_to_line_stencil.writer, stem_to_line_stencil.sub_id, stem_to_line_stencil.x0, stem_to_line_stencil.y0, stem_to_line_stencil.x1, stem_to_line_stencil.y1, stem_to_line_stencil.thickness  FROM stem_to_line_stencil;       END;     CREATE TRIGGER stem_end_insert_del_line_stencil_ins_line_stencil_XRjr AFTER INSERT ON stem_end WHEN (EXISTS (SELECT stem_x_offset.id  FROM stem_x_offset JOIN stem_end ON stem_x_offset.id = stem_end.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'stem_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH stem_to_line_stencil AS  (SELECT stem_x_offset.id AS id, \'stem_to_line_stencil\' AS writer, 0 AS sub_id, stem_x_offset.val + CASE WHEN (stem_end.val > 0) THEN 0.25 ELSE 0.12 END AS x0, 0.0 AS y0, stem_x_offset.val + CASE WHEN (stem_end.val > 0) THEN 0.25 ELSE 0.12 END AS x1, stem_end.val * -1 AS y1, 0.16 AS thickness  FROM stem_x_offset, stem_end  WHERE stem_x_offset.id = stem_end.id AND stem_end.id = stem_x_offset.id AND stem_end.id = new.id)  SELECT stem_to_line_stencil.id, stem_to_line_stencil.writer, stem_to_line_stencil.sub_id, stem_to_line_stencil.x0, stem_to_line_stencil.y0, stem_to_line_stencil.x1, stem_to_line_stencil.y1, stem_to_line_stencil.thickness  FROM stem_to_line_stencil;       END;     CREATE TRIGGER stem_x_offset_update_del_line_stencil_ins_line_stencil_XzlC AFTER UPDATE ON stem_x_offset WHEN (EXISTS (SELECT stem_x_offset.id  FROM stem_x_offset JOIN stem_end ON stem_x_offset.id = stem_end.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'stem_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH stem_to_line_stencil AS  (SELECT stem_x_offset.id AS id, \'stem_to_line_stencil\' AS writer, 0 AS sub_id, stem_x_offset.val + CASE WHEN (stem_end.val > 0) THEN 0.25 ELSE 0.12 END AS x0, 0.0 AS y0, stem_x_offset.val + CASE WHEN (stem_end.val > 0) THEN 0.25 ELSE 0.12 END AS x1, stem_end.val * -1 AS y1, 0.16 AS thickness  FROM stem_x_offset, stem_end  WHERE stem_x_offset.id = stem_end.id AND stem_end.id = stem_x_offset.id AND stem_end.id = new.id)  SELECT stem_to_line_stencil.id, stem_to_line_stencil.writer, stem_to_line_stencil.sub_id, stem_to_line_stencil.x0, stem_to_line_stencil.y0, stem_to_line_stencil.x1, stem_to_line_stencil.y1, stem_to_line_stencil.thickness  FROM stem_to_line_stencil;       END;     CREATE TRIGGER stem_end_update_del_line_stencil_ins_line_stencil_Hcbx AFTER UPDATE ON stem_end WHEN (EXISTS (SELECT stem_x_offset.id  FROM stem_x_offset JOIN stem_end ON stem_x_offset.id = stem_end.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'stem_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH stem_to_line_stencil AS  (SELECT stem_x_offset.id AS id, \'stem_to_line_stencil\' AS writer, 0 AS sub_id, stem_x_offset.val + CASE WHEN (stem_end.val > 0) THEN 0.25 ELSE 0.12 END AS x0, 0.0 AS y0, stem_x_offset.val + CASE WHEN (stem_end.val > 0) THEN 0.25 ELSE 0.12 END AS x1, stem_end.val * -1 AS y1, 0.16 AS thickness  FROM stem_x_offset, stem_end  WHERE stem_x_offset.id = stem_end.id AND stem_end.id = stem_x_offset.id AND stem_end.id = new.id)  SELECT stem_to_line_stencil.id, stem_to_line_stencil.writer, stem_to_line_stencil.sub_id, stem_to_line_stencil.x0, stem_to_line_stencil.y0, stem_to_line_stencil.x1, stem_to_line_stencil.y1, stem_to_line_stencil.thickness  FROM stem_to_line_stencil;       END;     CREATE TRIGGER stem_x_offset_delete_del_line_stencil_ins_line_stencil_VvhY AFTER DELETE ON stem_x_offset WHEN (EXISTS (SELECT stem_x_offset.id  FROM stem_x_offset JOIN stem_end ON stem_x_offset.id = stem_end.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = old.id AND line_stencil.writer = \'stem_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH stem_to_line_stencil AS  (SELECT stem_x_offset.id AS id, \'stem_to_line_stencil\' AS writer, 0 AS sub_id, stem_x_offset.val + CASE WHEN (stem_end.val > 0) THEN 0.25 ELSE 0.12 END AS x0, 0.0 AS y0, stem_x_offset.val + CASE WHEN (stem_end.val > 0) THEN 0.25 ELSE 0.12 END AS x1, stem_end.val * -1 AS y1, 0.16 AS thickness  FROM stem_x_offset, stem_end  WHERE stem_x_offset.id = stem_end.id AND stem_end.id = stem_x_offset.id AND stem_end.id = old.id)  SELECT stem_to_line_stencil.id, stem_to_line_stencil.writer, stem_to_line_stencil.sub_id, stem_to_line_stencil.x0, stem_to_line_stencil.y0, stem_to_line_stencil.x1, stem_to_line_stencil.y1, stem_to_line_stencil.thickness  FROM stem_to_line_stencil;       END;     CREATE TRIGGER stem_end_delete_del_line_stencil_ins_line_stencil_WBOv AFTER DELETE ON stem_end WHEN (EXISTS (SELECT stem_x_offset.id  FROM stem_x_offset JOIN stem_end ON stem_x_offset.id = stem_end.id))       BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = old.id AND line_stencil.writer = \'stem_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH stem_to_line_stencil AS  (SELECT stem_x_offset.id AS id, \'stem_to_line_stencil\' AS writer, 0 AS sub_id, stem_x_offset.val + CASE WHEN (stem_end.val > 0) THEN 0.25 ELSE 0.12 END AS x0, 0.0 AS y0, stem_x_offset.val + CASE WHEN (stem_end.val > 0) THEN 0.25 ELSE 0.12 END AS x1, stem_end.val * -1 AS y1, 0.16 AS thickness  FROM stem_x_offset, stem_end  WHERE stem_x_offset.id = stem_end.id AND stem_end.id = stem_x_offset.id AND stem_end.id = old.id)  SELECT stem_to_line_stencil.id, stem_to_line_stencil.writer, stem_to_line_stencil.sub_id, stem_to_line_stencil.x0, stem_to_line_stencil.y0, stem_to_line_stencil.x1, stem_to_line_stencil.y1, stem_to_line_stencil.thickness  FROM stem_to_line_stencil;       END;     CREATE TRIGGER ledger_line_insert_del_line_stencil_ins_line_stencil_IrqB AFTER INSERT ON ledger_line        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'ledger_line_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE ledger_line_to_line_stencil(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT ledger_line.id AS id, \'ledger_line_to_line_stencil\' AS writer, 0 AS sub_id, -0.6 AS x0, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y0, rhythmic_head_width.val + 1.0 AS x1, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y1, 0.13 AS thickness  FROM ledger_line, staff_space, n_lines, y_position, rhythmic_head_width, staff_symbol  WHERE ledger_line.id = new.id AND abs(ledger_line.val) > 0 AND n_lines.id = staff_symbol.val AND staff_space.id = staff_symbol.val AND y_position.id = ledger_line.id AND staff_symbol.id = ledger_line.id AND rhythmic_head_width.id = staff_symbol.id UNION ALL SELECT ledger_line_to_line_stencil_prev.id AS id, \'ledger_line_to_line_stencil\' AS anon_1, ledger_line_to_line_stencil_prev.sub_id + 1 AS anon_2, ledger_line_to_line_stencil_prev.x0 AS x0, ledger_line_to_line_stencil_prev.y0 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_3, ledger_line_to_line_stencil_prev.x1 AS x1, ledger_line_to_line_stencil_prev.y1 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_4, ledger_line_to_line_stencil_prev.thickness AS thickness  FROM ledger_line_to_line_stencil AS ledger_line_to_line_stencil_prev, staff_space, ledger_line, staff_symbol  WHERE staff_space.id = staff_symbol.val AND staff_symbol.id = ledger_line_to_line_stencil_prev.id AND ledger_line_to_line_stencil_prev.id = ledger_line.id AND ledger_line_to_line_stencil_prev.sub_id < abs(ledger_line.val) - 1)  SELECT ledger_line_to_line_stencil.id, ledger_line_to_line_stencil.writer, ledger_line_to_line_stencil.sub_id, ledger_line_to_line_stencil.x0, ledger_line_to_line_stencil.y0, ledger_line_to_line_stencil.x1, ledger_line_to_line_stencil.y1, ledger_line_to_line_stencil.thickness  FROM ledger_line_to_line_stencil;       END;     CREATE TRIGGER rhythmic_head_width_insert_del_line_stencil_ins_line_stencil_CoAS AFTER INSERT ON rhythmic_head_width        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'ledger_line_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE ledger_line_to_line_stencil(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT ledger_line.id AS id, \'ledger_line_to_line_stencil\' AS writer, 0 AS sub_id, -0.6 AS x0, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y0, rhythmic_head_width.val + 1.0 AS x1, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y1, 0.13 AS thickness  FROM ledger_line, staff_space, n_lines, y_position, rhythmic_head_width, staff_symbol  WHERE ledger_line.id = new.id AND abs(ledger_line.val) > 0 AND n_lines.id = staff_symbol.val AND staff_space.id = staff_symbol.val AND y_position.id = ledger_line.id AND staff_symbol.id = ledger_line.id AND rhythmic_head_width.id = staff_symbol.id UNION ALL SELECT ledger_line_to_line_stencil_prev.id AS id, \'ledger_line_to_line_stencil\' AS anon_1, ledger_line_to_line_stencil_prev.sub_id + 1 AS anon_2, ledger_line_to_line_stencil_prev.x0 AS x0, ledger_line_to_line_stencil_prev.y0 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_3, ledger_line_to_line_stencil_prev.x1 AS x1, ledger_line_to_line_stencil_prev.y1 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_4, ledger_line_to_line_stencil_prev.thickness AS thickness  FROM ledger_line_to_line_stencil AS ledger_line_to_line_stencil_prev, staff_space, ledger_line, staff_symbol  WHERE staff_space.id = staff_symbol.val AND staff_symbol.id = ledger_line_to_line_stencil_prev.id AND ledger_line_to_line_stencil_prev.id = ledger_line.id AND ledger_line_to_line_stencil_prev.sub_id < abs(ledger_line.val) - 1)  SELECT ledger_line_to_line_stencil.id, ledger_line_to_line_stencil.writer, ledger_line_to_line_stencil.sub_id, ledger_line_to_line_stencil.x0, ledger_line_to_line_stencil.y0, ledger_line_to_line_stencil.x1, ledger_line_to_line_stencil.y1, ledger_line_to_line_stencil.thickness  FROM ledger_line_to_line_stencil;       END;     CREATE TRIGGER staff_symbol_insert_del_line_stencil_ins_line_stencil_BWae AFTER INSERT ON staff_symbol        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'ledger_line_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE ledger_line_to_line_stencil(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT ledger_line.id AS id, \'ledger_line_to_line_stencil\' AS writer, 0 AS sub_id, -0.6 AS x0, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y0, rhythmic_head_width.val + 1.0 AS x1, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y1, 0.13 AS thickness  FROM ledger_line, staff_space, n_lines, y_position, rhythmic_head_width, staff_symbol  WHERE ledger_line.id = new.id AND abs(ledger_line.val) > 0 AND n_lines.id = staff_symbol.val AND staff_space.id = staff_symbol.val AND y_position.id = ledger_line.id AND staff_symbol.id = ledger_line.id AND rhythmic_head_width.id = staff_symbol.id UNION ALL SELECT ledger_line_to_line_stencil_prev.id AS id, \'ledger_line_to_line_stencil\' AS anon_1, ledger_line_to_line_stencil_prev.sub_id + 1 AS anon_2, ledger_line_to_line_stencil_prev.x0 AS x0, ledger_line_to_line_stencil_prev.y0 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_3, ledger_line_to_line_stencil_prev.x1 AS x1, ledger_line_to_line_stencil_prev.y1 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_4, ledger_line_to_line_stencil_prev.thickness AS thickness  FROM ledger_line_to_line_stencil AS ledger_line_to_line_stencil_prev, staff_space, ledger_line, staff_symbol  WHERE staff_space.id = staff_symbol.val AND staff_symbol.id = ledger_line_to_line_stencil_prev.id AND ledger_line_to_line_stencil_prev.id = ledger_line.id AND ledger_line_to_line_stencil_prev.sub_id < abs(ledger_line.val) - 1)  SELECT ledger_line_to_line_stencil.id, ledger_line_to_line_stencil.writer, ledger_line_to_line_stencil.sub_id, ledger_line_to_line_stencil.x0, ledger_line_to_line_stencil.y0, ledger_line_to_line_stencil.x1, ledger_line_to_line_stencil.y1, ledger_line_to_line_stencil.thickness  FROM ledger_line_to_line_stencil;       END;     CREATE TRIGGER y_position_insert_del_line_stencil_ins_line_stencil_DZZT AFTER INSERT ON y_position        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'ledger_line_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE ledger_line_to_line_stencil(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT ledger_line.id AS id, \'ledger_line_to_line_stencil\' AS writer, 0 AS sub_id, -0.6 AS x0, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y0, rhythmic_head_width.val + 1.0 AS x1, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y1, 0.13 AS thickness  FROM ledger_line, staff_space, n_lines, y_position, rhythmic_head_width, staff_symbol  WHERE ledger_line.id = new.id AND abs(ledger_line.val) > 0 AND n_lines.id = staff_symbol.val AND staff_space.id = staff_symbol.val AND y_position.id = ledger_line.id AND staff_symbol.id = ledger_line.id AND rhythmic_head_width.id = staff_symbol.id UNION ALL SELECT ledger_line_to_line_stencil_prev.id AS id, \'ledger_line_to_line_stencil\' AS anon_1, ledger_line_to_line_stencil_prev.sub_id + 1 AS anon_2, ledger_line_to_line_stencil_prev.x0 AS x0, ledger_line_to_line_stencil_prev.y0 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_3, ledger_line_to_line_stencil_prev.x1 AS x1, ledger_line_to_line_stencil_prev.y1 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_4, ledger_line_to_line_stencil_prev.thickness AS thickness  FROM ledger_line_to_line_stencil AS ledger_line_to_line_stencil_prev, staff_space, ledger_line, staff_symbol  WHERE staff_space.id = staff_symbol.val AND staff_symbol.id = ledger_line_to_line_stencil_prev.id AND ledger_line_to_line_stencil_prev.id = ledger_line.id AND ledger_line_to_line_stencil_prev.sub_id < abs(ledger_line.val) - 1)  SELECT ledger_line_to_line_stencil.id, ledger_line_to_line_stencil.writer, ledger_line_to_line_stencil.sub_id, ledger_line_to_line_stencil.x0, ledger_line_to_line_stencil.y0, ledger_line_to_line_stencil.x1, ledger_line_to_line_stencil.y1, ledger_line_to_line_stencil.thickness  FROM ledger_line_to_line_stencil;       END;     CREATE TRIGGER ledger_line_update_del_line_stencil_ins_line_stencil_DlVq AFTER UPDATE ON ledger_line        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'ledger_line_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE ledger_line_to_line_stencil(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT ledger_line.id AS id, \'ledger_line_to_line_stencil\' AS writer, 0 AS sub_id, -0.6 AS x0, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y0, rhythmic_head_width.val + 1.0 AS x1, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y1, 0.13 AS thickness  FROM ledger_line, staff_space, n_lines, y_position, rhythmic_head_width, staff_symbol  WHERE ledger_line.id = new.id AND abs(ledger_line.val) > 0 AND n_lines.id = staff_symbol.val AND staff_space.id = staff_symbol.val AND y_position.id = ledger_line.id AND staff_symbol.id = ledger_line.id AND rhythmic_head_width.id = staff_symbol.id UNION ALL SELECT ledger_line_to_line_stencil_prev.id AS id, \'ledger_line_to_line_stencil\' AS anon_1, ledger_line_to_line_stencil_prev.sub_id + 1 AS anon_2, ledger_line_to_line_stencil_prev.x0 AS x0, ledger_line_to_line_stencil_prev.y0 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_3, ledger_line_to_line_stencil_prev.x1 AS x1, ledger_line_to_line_stencil_prev.y1 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_4, ledger_line_to_line_stencil_prev.thickness AS thickness  FROM ledger_line_to_line_stencil AS ledger_line_to_line_stencil_prev, staff_space, ledger_line, staff_symbol  WHERE staff_space.id = staff_symbol.val AND staff_symbol.id = ledger_line_to_line_stencil_prev.id AND ledger_line_to_line_stencil_prev.id = ledger_line.id AND ledger_line_to_line_stencil_prev.sub_id < abs(ledger_line.val) - 1)  SELECT ledger_line_to_line_stencil.id, ledger_line_to_line_stencil.writer, ledger_line_to_line_stencil.sub_id, ledger_line_to_line_stencil.x0, ledger_line_to_line_stencil.y0, ledger_line_to_line_stencil.x1, ledger_line_to_line_stencil.y1, ledger_line_to_line_stencil.thickness  FROM ledger_line_to_line_stencil;       END;     CREATE TRIGGER rhythmic_head_width_update_del_line_stencil_ins_line_stencil_TlXF AFTER UPDATE ON rhythmic_head_width        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'ledger_line_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE ledger_line_to_line_stencil(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT ledger_line.id AS id, \'ledger_line_to_line_stencil\' AS writer, 0 AS sub_id, -0.6 AS x0, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y0, rhythmic_head_width.val + 1.0 AS x1, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y1, 0.13 AS thickness  FROM ledger_line, staff_space, n_lines, y_position, rhythmic_head_width, staff_symbol  WHERE ledger_line.id = new.id AND abs(ledger_line.val) > 0 AND n_lines.id = staff_symbol.val AND staff_space.id = staff_symbol.val AND y_position.id = ledger_line.id AND staff_symbol.id = ledger_line.id AND rhythmic_head_width.id = staff_symbol.id UNION ALL SELECT ledger_line_to_line_stencil_prev.id AS id, \'ledger_line_to_line_stencil\' AS anon_1, ledger_line_to_line_stencil_prev.sub_id + 1 AS anon_2, ledger_line_to_line_stencil_prev.x0 AS x0, ledger_line_to_line_stencil_prev.y0 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_3, ledger_line_to_line_stencil_prev.x1 AS x1, ledger_line_to_line_stencil_prev.y1 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_4, ledger_line_to_line_stencil_prev.thickness AS thickness  FROM ledger_line_to_line_stencil AS ledger_line_to_line_stencil_prev, staff_space, ledger_line, staff_symbol  WHERE staff_space.id = staff_symbol.val AND staff_symbol.id = ledger_line_to_line_stencil_prev.id AND ledger_line_to_line_stencil_prev.id = ledger_line.id AND ledger_line_to_line_stencil_prev.sub_id < abs(ledger_line.val) - 1)  SELECT ledger_line_to_line_stencil.id, ledger_line_to_line_stencil.writer, ledger_line_to_line_stencil.sub_id, ledger_line_to_line_stencil.x0, ledger_line_to_line_stencil.y0, ledger_line_to_line_stencil.x1, ledger_line_to_line_stencil.y1, ledger_line_to_line_stencil.thickness  FROM ledger_line_to_line_stencil;       END;     CREATE TRIGGER staff_symbol_update_del_line_stencil_ins_line_stencil_ObwG AFTER UPDATE ON staff_symbol        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'ledger_line_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE ledger_line_to_line_stencil(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT ledger_line.id AS id, \'ledger_line_to_line_stencil\' AS writer, 0 AS sub_id, -0.6 AS x0, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y0, rhythmic_head_width.val + 1.0 AS x1, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y1, 0.13 AS thickness  FROM ledger_line, staff_space, n_lines, y_position, rhythmic_head_width, staff_symbol  WHERE ledger_line.id = new.id AND abs(ledger_line.val) > 0 AND n_lines.id = staff_symbol.val AND staff_space.id = staff_symbol.val AND y_position.id = ledger_line.id AND staff_symbol.id = ledger_line.id AND rhythmic_head_width.id = staff_symbol.id UNION ALL SELECT ledger_line_to_line_stencil_prev.id AS id, \'ledger_line_to_line_stencil\' AS anon_1, ledger_line_to_line_stencil_prev.sub_id + 1 AS anon_2, ledger_line_to_line_stencil_prev.x0 AS x0, ledger_line_to_line_stencil_prev.y0 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_3, ledger_line_to_line_stencil_prev.x1 AS x1, ledger_line_to_line_stencil_prev.y1 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_4, ledger_line_to_line_stencil_prev.thickness AS thickness  FROM ledger_line_to_line_stencil AS ledger_line_to_line_stencil_prev, staff_space, ledger_line, staff_symbol  WHERE staff_space.id = staff_symbol.val AND staff_symbol.id = ledger_line_to_line_stencil_prev.id AND ledger_line_to_line_stencil_prev.id = ledger_line.id AND ledger_line_to_line_stencil_prev.sub_id < abs(ledger_line.val) - 1)  SELECT ledger_line_to_line_stencil.id, ledger_line_to_line_stencil.writer, ledger_line_to_line_stencil.sub_id, ledger_line_to_line_stencil.x0, ledger_line_to_line_stencil.y0, ledger_line_to_line_stencil.x1, ledger_line_to_line_stencil.y1, ledger_line_to_line_stencil.thickness  FROM ledger_line_to_line_stencil;       END;     CREATE TRIGGER y_position_update_del_line_stencil_ins_line_stencil_PiwE AFTER UPDATE ON y_position        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = new.id AND line_stencil.writer = \'ledger_line_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE ledger_line_to_line_stencil(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT ledger_line.id AS id, \'ledger_line_to_line_stencil\' AS writer, 0 AS sub_id, -0.6 AS x0, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y0, rhythmic_head_width.val + 1.0 AS x1, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y1, 0.13 AS thickness  FROM ledger_line, staff_space, n_lines, y_position, rhythmic_head_width, staff_symbol  WHERE ledger_line.id = new.id AND abs(ledger_line.val) > 0 AND n_lines.id = staff_symbol.val AND staff_space.id = staff_symbol.val AND y_position.id = ledger_line.id AND staff_symbol.id = ledger_line.id AND rhythmic_head_width.id = staff_symbol.id UNION ALL SELECT ledger_line_to_line_stencil_prev.id AS id, \'ledger_line_to_line_stencil\' AS anon_1, ledger_line_to_line_stencil_prev.sub_id + 1 AS anon_2, ledger_line_to_line_stencil_prev.x0 AS x0, ledger_line_to_line_stencil_prev.y0 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_3, ledger_line_to_line_stencil_prev.x1 AS x1, ledger_line_to_line_stencil_prev.y1 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_4, ledger_line_to_line_stencil_prev.thickness AS thickness  FROM ledger_line_to_line_stencil AS ledger_line_to_line_stencil_prev, staff_space, ledger_line, staff_symbol  WHERE staff_space.id = staff_symbol.val AND staff_symbol.id = ledger_line_to_line_stencil_prev.id AND ledger_line_to_line_stencil_prev.id = ledger_line.id AND ledger_line_to_line_stencil_prev.sub_id < abs(ledger_line.val) - 1)  SELECT ledger_line_to_line_stencil.id, ledger_line_to_line_stencil.writer, ledger_line_to_line_stencil.sub_id, ledger_line_to_line_stencil.x0, ledger_line_to_line_stencil.y0, ledger_line_to_line_stencil.x1, ledger_line_to_line_stencil.y1, ledger_line_to_line_stencil.thickness  FROM ledger_line_to_line_stencil;       END;     CREATE TRIGGER ledger_line_delete_del_line_stencil_ins_line_stencil_XVGt AFTER DELETE ON ledger_line        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = old.id AND line_stencil.writer = \'ledger_line_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE ledger_line_to_line_stencil(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT ledger_line.id AS id, \'ledger_line_to_line_stencil\' AS writer, 0 AS sub_id, -0.6 AS x0, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y0, rhythmic_head_width.val + 1.0 AS x1, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y1, 0.13 AS thickness  FROM ledger_line, staff_space, n_lines, y_position, rhythmic_head_width, staff_symbol  WHERE ledger_line.id = old.id AND abs(ledger_line.val) > 0 AND n_lines.id = staff_symbol.val AND staff_space.id = staff_symbol.val AND y_position.id = ledger_line.id AND staff_symbol.id = ledger_line.id AND rhythmic_head_width.id = staff_symbol.id UNION ALL SELECT ledger_line_to_line_stencil_prev.id AS id, \'ledger_line_to_line_stencil\' AS anon_1, ledger_line_to_line_stencil_prev.sub_id + 1 AS anon_2, ledger_line_to_line_stencil_prev.x0 AS x0, ledger_line_to_line_stencil_prev.y0 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_3, ledger_line_to_line_stencil_prev.x1 AS x1, ledger_line_to_line_stencil_prev.y1 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_4, ledger_line_to_line_stencil_prev.thickness AS thickness  FROM ledger_line_to_line_stencil AS ledger_line_to_line_stencil_prev, staff_space, ledger_line, staff_symbol  WHERE staff_space.id = staff_symbol.val AND staff_symbol.id = ledger_line_to_line_stencil_prev.id AND ledger_line_to_line_stencil_prev.id = ledger_line.id AND ledger_line_to_line_stencil_prev.sub_id < abs(ledger_line.val) - 1)  SELECT ledger_line_to_line_stencil.id, ledger_line_to_line_stencil.writer, ledger_line_to_line_stencil.sub_id, ledger_line_to_line_stencil.x0, ledger_line_to_line_stencil.y0, ledger_line_to_line_stencil.x1, ledger_line_to_line_stencil.y1, ledger_line_to_line_stencil.thickness  FROM ledger_line_to_line_stencil;       END;     CREATE TRIGGER rhythmic_head_width_delete_del_line_stencil_ins_line_stencil_XrlC AFTER DELETE ON rhythmic_head_width        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = old.id AND line_stencil.writer = \'ledger_line_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE ledger_line_to_line_stencil(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT ledger_line.id AS id, \'ledger_line_to_line_stencil\' AS writer, 0 AS sub_id, -0.6 AS x0, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y0, rhythmic_head_width.val + 1.0 AS x1, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y1, 0.13 AS thickness  FROM ledger_line, staff_space, n_lines, y_position, rhythmic_head_width, staff_symbol  WHERE ledger_line.id = old.id AND abs(ledger_line.val) > 0 AND n_lines.id = staff_symbol.val AND staff_space.id = staff_symbol.val AND y_position.id = ledger_line.id AND staff_symbol.id = ledger_line.id AND rhythmic_head_width.id = staff_symbol.id UNION ALL SELECT ledger_line_to_line_stencil_prev.id AS id, \'ledger_line_to_line_stencil\' AS anon_1, ledger_line_to_line_stencil_prev.sub_id + 1 AS anon_2, ledger_line_to_line_stencil_prev.x0 AS x0, ledger_line_to_line_stencil_prev.y0 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_3, ledger_line_to_line_stencil_prev.x1 AS x1, ledger_line_to_line_stencil_prev.y1 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_4, ledger_line_to_line_stencil_prev.thickness AS thickness  FROM ledger_line_to_line_stencil AS ledger_line_to_line_stencil_prev, staff_space, ledger_line, staff_symbol  WHERE staff_space.id = staff_symbol.val AND staff_symbol.id = ledger_line_to_line_stencil_prev.id AND ledger_line_to_line_stencil_prev.id = ledger_line.id AND ledger_line_to_line_stencil_prev.sub_id < abs(ledger_line.val) - 1)  SELECT ledger_line_to_line_stencil.id, ledger_line_to_line_stencil.writer, ledger_line_to_line_stencil.sub_id, ledger_line_to_line_stencil.x0, ledger_line_to_line_stencil.y0, ledger_line_to_line_stencil.x1, ledger_line_to_line_stencil.y1, ledger_line_to_line_stencil.thickness  FROM ledger_line_to_line_stencil;       END;     CREATE TRIGGER staff_symbol_delete_del_line_stencil_ins_line_stencil_GjSS AFTER DELETE ON staff_symbol        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = old.id AND line_stencil.writer = \'ledger_line_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE ledger_line_to_line_stencil(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT ledger_line.id AS id, \'ledger_line_to_line_stencil\' AS writer, 0 AS sub_id, -0.6 AS x0, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y0, rhythmic_head_width.val + 1.0 AS x1, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y1, 0.13 AS thickness  FROM ledger_line, staff_space, n_lines, y_position, rhythmic_head_width, staff_symbol  WHERE ledger_line.id = old.id AND abs(ledger_line.val) > 0 AND n_lines.id = staff_symbol.val AND staff_space.id = staff_symbol.val AND y_position.id = ledger_line.id AND staff_symbol.id = ledger_line.id AND rhythmic_head_width.id = staff_symbol.id UNION ALL SELECT ledger_line_to_line_stencil_prev.id AS id, \'ledger_line_to_line_stencil\' AS anon_1, ledger_line_to_line_stencil_prev.sub_id + 1 AS anon_2, ledger_line_to_line_stencil_prev.x0 AS x0, ledger_line_to_line_stencil_prev.y0 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_3, ledger_line_to_line_stencil_prev.x1 AS x1, ledger_line_to_line_stencil_prev.y1 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_4, ledger_line_to_line_stencil_prev.thickness AS thickness  FROM ledger_line_to_line_stencil AS ledger_line_to_line_stencil_prev, staff_space, ledger_line, staff_symbol  WHERE staff_space.id = staff_symbol.val AND staff_symbol.id = ledger_line_to_line_stencil_prev.id AND ledger_line_to_line_stencil_prev.id = ledger_line.id AND ledger_line_to_line_stencil_prev.sub_id < abs(ledger_line.val) - 1)  SELECT ledger_line_to_line_stencil.id, ledger_line_to_line_stencil.writer, ledger_line_to_line_stencil.sub_id, ledger_line_to_line_stencil.x0, ledger_line_to_line_stencil.y0, ledger_line_to_line_stencil.x1, ledger_line_to_line_stencil.y1, ledger_line_to_line_stencil.thickness  FROM ledger_line_to_line_stencil;       END;     CREATE TRIGGER y_position_delete_del_line_stencil_ins_line_stencil_ETWk AFTER DELETE ON y_position        BEGIN                      DELETE FROM line_stencil WHERE line_stencil.id = old.id AND line_stencil.writer = \'ledger_line_to_line_stencil\';           INSERT INTO line_stencil (id, writer, sub_id, x0, y0, x1, y1, thickness) WITH RECURSIVE ledger_line_to_line_stencil(id, writer, sub_id, x0, y0, x1, y1, thickness) AS  (SELECT ledger_line.id AS id, \'ledger_line_to_line_stencil\' AS writer, 0 AS sub_id, -0.6 AS x0, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y0, rhythmic_head_width.val + 1.0 AS x1, CASE WHEN (ledger_line.val < 0) THEN staff_space.val * n_lines.val ELSE -staff_space.val END - y_position.val AS y1, 0.13 AS thickness  FROM ledger_line, staff_space, n_lines, y_position, rhythmic_head_width, staff_symbol  WHERE ledger_line.id = old.id AND abs(ledger_line.val) > 0 AND n_lines.id = staff_symbol.val AND staff_space.id = staff_symbol.val AND y_position.id = ledger_line.id AND staff_symbol.id = ledger_line.id AND rhythmic_head_width.id = staff_symbol.id UNION ALL SELECT ledger_line_to_line_stencil_prev.id AS id, \'ledger_line_to_line_stencil\' AS anon_1, ledger_line_to_line_stencil_prev.sub_id + 1 AS anon_2, ledger_line_to_line_stencil_prev.x0 AS x0, ledger_line_to_line_stencil_prev.y0 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_3, ledger_line_to_line_stencil_prev.x1 AS x1, ledger_line_to_line_stencil_prev.y1 + (staff_space.val * -1.0 * ledger_line.val) / abs(ledger_line.val) AS anon_4, ledger_line_to_line_stencil_prev.thickness AS thickness  FROM ledger_line_to_line_stencil AS ledger_line_to_line_stencil_prev, staff_space, ledger_line, staff_symbol  WHERE staff_space.id = staff_symbol.val AND staff_symbol.id = ledger_line_to_line_stencil_prev.id AND ledger_line_to_line_stencil_prev.id = ledger_line.id AND ledger_line_to_line_stencil_prev.sub_id < abs(ledger_line.val) - 1)  SELECT ledger_line_to_line_stencil.id, ledger_line_to_line_stencil.writer, ledger_line_to_line_stencil.sub_id, ledger_line_to_line_stencil.x0, ledger_line_to_line_stencil.y0, ledger_line_to_line_stencil.x1, ledger_line_to_line_stencil.y1, ledger_line_to_line_stencil.thickness  FROM ledger_line_to_line_stencil;       END;     CREATE TRIGGER name_insert_del_ledger_line_ins_ledger_line_VHUW AFTER INSERT ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN staff_position ON name.id = staff_position.id))       BEGIN                      DELETE FROM ledger_line WHERE EXISTS (SELECT name.id  FROM name  WHERE ledger_line.id = new.id AND name.id = new.id AND name.val = \'note\');           INSERT INTO ledger_line (id, val) WITH note_to_ledger_line AS  (SELECT name.id AS id, CASE WHEN (abs(staff_position.val) >= 3.0) THEN (staff_position.val / abs(staff_position.val)) * round((abs(staff_position.val) - 2.0) - 0.3) ELSE 0 END AS anon_1  FROM name, staff_position  WHERE name.val = \'note\' AND name.id = new.id AND staff_position.id = name.id)  SELECT note_to_ledger_line.id, note_to_ledger_line.anon_1  FROM note_to_ledger_line;       END;     CREATE TRIGGER staff_position_insert_del_ledger_line_ins_ledger_line_MYhi AFTER INSERT ON staff_position WHEN (EXISTS (SELECT name.id  FROM name JOIN staff_position ON name.id = staff_position.id))       BEGIN                      DELETE FROM ledger_line WHERE EXISTS (SELECT name.id  FROM name  WHERE ledger_line.id = new.id AND name.id = new.id AND name.val = \'note\');           INSERT INTO ledger_line (id, val) WITH note_to_ledger_line AS  (SELECT name.id AS id, CASE WHEN (abs(staff_position.val) >= 3.0) THEN (staff_position.val / abs(staff_position.val)) * round((abs(staff_position.val) - 2.0) - 0.3) ELSE 0 END AS anon_1  FROM name, staff_position  WHERE name.val = \'note\' AND name.id = new.id AND staff_position.id = name.id)  SELECT note_to_ledger_line.id, note_to_ledger_line.anon_1  FROM note_to_ledger_line;       END;     CREATE TRIGGER name_update_del_ledger_line_ins_ledger_line_MzHm AFTER UPDATE ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN staff_position ON name.id = staff_position.id))       BEGIN                      DELETE FROM ledger_line WHERE EXISTS (SELECT name.id  FROM name  WHERE ledger_line.id = new.id AND name.id = new.id AND name.val = \'note\');           INSERT INTO ledger_line (id, val) WITH note_to_ledger_line AS  (SELECT name.id AS id, CASE WHEN (abs(staff_position.val) >= 3.0) THEN (staff_position.val / abs(staff_position.val)) * round((abs(staff_position.val) - 2.0) - 0.3) ELSE 0 END AS anon_1  FROM name, staff_position  WHERE name.val = \'note\' AND name.id = new.id AND staff_position.id = name.id)  SELECT note_to_ledger_line.id, note_to_ledger_line.anon_1  FROM note_to_ledger_line;       END;     CREATE TRIGGER staff_position_update_del_ledger_line_ins_ledger_line_NXTn AFTER UPDATE ON staff_position WHEN (EXISTS (SELECT name.id  FROM name JOIN staff_position ON name.id = staff_position.id))       BEGIN                      DELETE FROM ledger_line WHERE EXISTS (SELECT name.id  FROM name  WHERE ledger_line.id = new.id AND name.id = new.id AND name.val = \'note\');           INSERT INTO ledger_line (id, val) WITH note_to_ledger_line AS  (SELECT name.id AS id, CASE WHEN (abs(staff_position.val) >= 3.0) THEN (staff_position.val / abs(staff_position.val)) * round((abs(staff_position.val) - 2.0) - 0.3) ELSE 0 END AS anon_1  FROM name, staff_position  WHERE name.val = \'note\' AND name.id = new.id AND staff_position.id = name.id)  SELECT note_to_ledger_line.id, note_to_ledger_line.anon_1  FROM note_to_ledger_line;       END;     CREATE TRIGGER name_delete_del_ledger_line_ins_ledger_line_QnSV AFTER DELETE ON name WHEN (EXISTS (SELECT name.id  FROM name JOIN staff_position ON name.id = staff_position.id))       BEGIN                      DELETE FROM ledger_line WHERE EXISTS (SELECT name.id  FROM name  WHERE ledger_line.id = old.id AND name.id = old.id AND name.val = \'note\');           INSERT INTO ledger_line (id, val) WITH note_to_ledger_line AS  (SELECT name.id AS id, CASE WHEN (abs(staff_position.val) >= 3.0) THEN (staff_position.val / abs(staff_position.val)) * round((abs(staff_position.val) - 2.0) - 0.3) ELSE 0 END AS anon_1  FROM name, staff_position  WHERE name.val = \'note\' AND name.id = old.id AND staff_position.id = name.id)  SELECT note_to_ledger_line.id, note_to_ledger_line.anon_1  FROM note_to_ledger_line;       END;     CREATE TRIGGER staff_position_delete_del_ledger_line_ins_ledger_line_RBhI AFTER DELETE ON staff_position WHEN (EXISTS (SELECT name.id  FROM name JOIN staff_position ON name.id = staff_position.id))       BEGIN                      DELETE FROM ledger_line WHERE EXISTS (SELECT name.id  FROM name  WHERE ledger_line.id = old.id AND name.id = old.id AND name.val = \'note\');           INSERT INTO ledger_line (id, val) WITH note_to_ledger_line AS  (SELECT name.id AS id, CASE WHEN (abs(staff_position.val) >= 3.0) THEN (staff_position.val / abs(staff_position.val)) * round((abs(staff_position.val) - 2.0) - 0.3) ELSE 0 END AS anon_1  FROM name, staff_position  WHERE name.val = \'note\' AND name.id = old.id AND staff_position.id = name.id)  SELECT note_to_ledger_line.id, note_to_ledger_line.anon_1  FROM note_to_ledger_line;       END;     INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.828,1.892,\'U+E78A\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.612,0.716,\'U+EAD4\',-0.056,-0.092); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.728,0.728,\'U+EA0F\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E154\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8BD\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.448,1.644,\'U+E485\',-1.724,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.88,0.696,\'U+EA64\',-0.012,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.304,1.328,\'U+E1F1\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.928,8.0,\'U+EAF3\',-1.496,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.168,1.188,\'U+E2F3\',-1.392,-0.192); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E7F3\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.292,8.0,\'U+EAF0\',-0.832,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.884,1.328,\'U+E1DE\',-5.32,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,2.068,\'U+E0DF\',-0.58,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.72,2.036,\'U+E7E5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.464,0.788,\'U+EAA0\',0.724,-0.136); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,4.128,\'U+EAB6\',-1.064,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E3BA\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.08,0.944,\'U+EB32\',0.032,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E162\',-0.556,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E19D\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.712,1.824,\'U+E7A8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.996,0.604,\'U+E4CE\',0.008,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.132,\'U+E97E\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.984,0.9,\'U+E68D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.46,0.656,\'U+E284\',-0.776,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E39D\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.748,1.748,\'U+E5FF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.42,4.384,\'U+E659\',-0.056,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.408,2.108,\'U+E0D2\',-0.708,-0.336); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.408,2.108,\'U+E0D1\',-0.708,-0.308); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,1.28,\'U+E79A\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,1.148,\'U+E442\',-0.7,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.072,2.12,\'U+E108\',-1.036,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.432,0.9,\'U+E424\',-1.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.016,0.468,\'U+EA51\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.008,0.86,\'U+EA50\',-0.004,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.008,0.74,\'U+EA54\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.044,1.952,\'U+E2A2\',-0.528,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.032,0.74,\'U+EA57\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.008,0.784,\'U+EA55\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.98,0.788,\'U+EA5D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,0.784,\'U+EA5B\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,0.784,\'U+EA61\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.004,0.768,\'U+EA60\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.596,1.608,\'U+E7EA\',1.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.624,1.124,\'U+E47B\',-0.812,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.188,1.188,\'U+E2ED\',-0.352,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.668,3.128,\'U+E979\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.912,1.196,\'U+EB82\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.608,0.668,\'U+E472\',-1.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.236,1.24,\'U+E292\',-0.696,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.572,2.5,\'U+E551\',-0.572,-0.32); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E7B8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.108,1.848,\'U+E129\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.0,0.48,\'U+E8F6\',-1.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.004,3.268,\'U+EB4C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.484,8.0,\'U+EAF1\',-0.884,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.62,2.94,\'U+E4CB\',-1.62,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E184\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.528,2.62,\'U+E0D5\',-0.784,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.416,\'U+E0B8\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8B8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.528,2.62,\'U+E0D6\',-0.784,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.432,2.144,\'U+E713\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.596,1.004,\'U+E637\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E161\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.232,4.432,\'U+E5B0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E18C\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.128,\'U+E939\',-0.564,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.024,2.796,\'U+E05D\',-3.012,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.048,2.972,\'U+E865\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.564,1.8,\'U+E711\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.916,2.312,\'U+EA7F\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.252,\'U+E379\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,2.0,\'U+E013\',0.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E163\',-0.556,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.108,4.644,\'U+EC44\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.78,3.332,\'U+EAE8\',-0.508,-0.136); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.988,0.736,\'U+E095\',-1.988,-0.232); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,1.656,\'U+E09B\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.748,\'U+E364\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,1.0,\'U+E3B0\',-1.44,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.16,\'U+E83B\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,1.28,\'U+E7A1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.856,0.652,\'U+E420\',-1.452,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.46,1.82,\'U+E451\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.292,0.964,\'U+EC35\',-1.444,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.188,0.376,\'U+E9D5\',-0.476,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,0.264,\'U+EB03\',0.0,-0.136); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.488,0.652,\'U+E9C3\',-0.156,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.824,1.272,\'U+E200\',3.348,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.048,1.044,\'U+EB8F\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.04,1.376,\'U+E142\',-0.54,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.048,3.472,\'U+E809\',-0.52,-1.736); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.416,\'U+E0CB\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.976,1.612,\'U+EA28\',-0.488,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.616,1.128,\'U+E812\',0.388,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.024,1.16,\'U+E270\',-0.708,-0.168); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E16B\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.112,1.028,\'U+E747\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.1,2.428,\'U+EC23\',-0.052,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.256,1.196,\'U+E24B\',-3.284,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.28,1.28,\'U+E960\',-0.736,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.148,1.832,\'U+E65F\',-0.084,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.66,0.764,\'U+E48A\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.196,0.912,\'U+EB78\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.0,3.908,\'U+EBED\',-3.0,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.24,5.864,\'U+E6AD\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.864,3.096,\'U+E517\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8C6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.88,\'U+E942\',-3.128,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,2.652,\'U+E4D2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E1A6\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,1.284,\'U+E211\',0.0,-0.64); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,1.616,\'U+E09A\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E3C7\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.936,1.092,\'U+E245\',-0.928,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E366\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.66,0.552,\'U+E9F8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.22,0.72,\'U+E2B4\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.66,1.18,\'U+E138\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,1.032,\'U+E21D\',0.0,-0.516); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.596,1.668,\'U+E2CA\',-1.848,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E3BE\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.096,1.548,\'U+EC51\',-0.548,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.916,2.288,\'U+EA8B\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.192,2.192,\'U+EB36\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,4.784,\'U+E6A7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E174\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.428,1.428,\'U+E560\',-0.332,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E30D\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.932,0.564,\'U+E581\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.612,1.668,\'U+EADA\',-0.056,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,0.868,\'U+E790\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.316,\'U+E0C6\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.744,\'U+E7B9\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.1,1.328,\'U+E1D8\',-3.536,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.66,4.644,\'U+EC32\',-0.828,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.456,0.936,\'U+E29A\',-2.168,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.912,0.432,\'U+E784\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E3DB\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.836,1.116,\'U+EB8E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.964,2.192,\'U+EB10\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,3.252,\'U+E52F\',-0.672,-0.568); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E343\',-0.688,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.628,3.0,\'U+EBA1\',-0.064,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.756,1.004,\'U+E240\',-2.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.912,2.108,\'U+EB6E\',0.596,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.54,1.544,\'U+EB71\',0.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,3.128,\'U+E4EE\',-1.084,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.364,2.416,\'U+E4C5\',-1.364,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E352\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.892,1.888,\'U+E600\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,1.98,\'U+EB1E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,3.384,\'U+E734\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.328,\'U+E1B1\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.876,\'U+E334\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.328,4.82,\'U+EAEF\',-1.232,-0.148); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.672,1.376,\'U+E126\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.0,\'U+E01D\',1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.94,0.956,\'U+E2D6\',-2.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.852,0.904,\'U+E423\',-1.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.72,1.224,\'U+E471\',-1.336,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,1.524,\'U+E083\',-1.004,0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.96,1.46,\'U+E298\',-2.212,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.048,2.972,\'U+E867\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.228,1.1,\'U+EAC0\',-1.18,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.288,1.364,\'U+EBB0\',0.42,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8AE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.148,\'U+EB83\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.368,0.788,\'U+EACF\',0.0,-0.124); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.588,3.588,\'U+E5DB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E770\',-0.016,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,1.72,\'U+E218\',0.0,-0.86); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E17F\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.692,3.996,\'U+EB3D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.096,1.44,\'U+E850\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.788,2.22,\'U+E476\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.896,1.276,\'U+EC54\',-0.448,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.98,2.288,\'U+EB29\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.92,0.92,\'U+E7B2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.624,\'U+E303\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.78,2.824,\'U+EAE7\',-0.508,-0.128); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.128,3.0,\'U+E01B\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,3.12,\'U+E103\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.716,4.516,\'U+E5B1\',-0.74,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,3.128,\'U+EAB5\',-1.064,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.096,1.576,\'U+EC52\',-0.548,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E7B7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.8,0.888,\'U+EC33\',-0.888,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.024,0.808,\'U+EA52\',-0.012,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,1.588,\'U+EBD2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.876,\'U+E949\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.184,4.44,\'U+EC41\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.616,2.7,\'U+E6E4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.988,5.112,\'U+E5C3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.468,1.5,\'U+E450\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.296,\'U+E0FC\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.8,0.056,\'U+E9B5\',-0.6,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.304,1.368,\'U+E1F5\',-0.496,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,1.356,\'U+E213\',0.0,-0.68); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.244,0.756,\'U+E5A4\',0.228,-0.1); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.956,2.304,\'U+E5F2\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.256,2.256,\'U+E68B\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,1.16,\'U+E657\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.1,1.848,\'U+E0B5\',-0.556,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.436,1.112,\'U+EC00\',-0.048,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E198\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.5,\'U+E350\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.412,4.704,\'U+E6AE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.044,1.008,\'U+E7BC\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.328,2.408,\'U+E4C0\',-0.012,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.572,1.464,\'U+E4BA\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,4.092,\'U+E759\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.484,1.116,\'U+E881\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.5,1.272,\'U+E880\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.5,1.28,\'U+E883\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E77D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.476,1.264,\'U+E885\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.492,1.284,\'U+E884\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.496,1.252,\'U+E887\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.524,1.152,\'U+E886\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.524,1.152,\'U+E889\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.58,2.856,\'U+E763\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.38,\'U+E311\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.072,1.584,\'U+E088\',-1.036,-0.024); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,1.576,\'U+E089\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,1.576,\'U+E086\',-0.996,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.996,1.604,\'U+E087\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.004,1.72,\'U+E084\',-1.0,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.988,1.452,\'U+E085\',-1.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.044,1.624,\'U+E082\',-1.028,0.032); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E30E\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.004,1.72,\'U+E080\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.004,1.176,\'U+E081\',-1.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.376,1.38,\'U+EA98\',1.628,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E3A1\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E186\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E332\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E3C9\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.116,0.684,\'U+E2DF\',-0.508,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.008,1.62,\'U+E09C\',-1.508,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,0.904,\'U+E430\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.028,1.84,\'U+EA84\',-0.872,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E1AE\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,2.84,\'U+E597\',-0.228,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,3.128,\'U+E930\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.888,1.46,\'U+E297\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.18,1.876,\'U+E006\',-1.18,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',8.0,1.244,\'U+E878\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.448,1.644,\'U+E483\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E3A4\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.428,1.292,\'U+E562\',-0.324,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.888,1.54,\'U+E294\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.704,\'U+E0A7\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.936,1.66,\'U+E6D3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,3.128,\'U+E931\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E32F\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.04,2.684,\'U+E050\',-2.632,0.024); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E18B\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.716,1.28,\'U+E4E7\',-2.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.128,\'U+E582\',-0.004,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,0.952,\'U+E2C2\',-1.68,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.728,0.728,\'U+EA0C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.012,4.004,\'U+EB45\',-0.012,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E37C\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.188,1.128,\'U+E95A\',-2.596,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.236,0.56,\'U+E7D4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.0,3.908,\'U+EBEE\',-3.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.572,1.488,\'U+E5FC\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.828,1.528,\'U+E4B9\',-0.828,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E3E7\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.18,2.888,\'U+E746\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.576,2.72,\'U+E715\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.216,1.216,\'U+E5F9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.764,0.68,\'U+E2B6\',-0.388,0.08); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E374\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E322\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,1.648,\'U+E099\',-1.0,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.0,4.5,\'U+EBEA\',-3.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8BC\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.636,0.916,\'U+E444\',-1.348,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.8,\'U+E630\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.556,1.876,\'U+E002\',-1.272,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.988,0.82,\'U+E07D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,1.944,\'U+EAFE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,2.244,\'U+EAFD\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,1.344,\'U+EB00\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,1.644,\'U+EAFF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,0.744,\'U+EB02\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,1.044,\'U+EB01\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,0.912,\'U+EBA8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,2.128,\'U+EAB4\',-1.064,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.228,3.576,\'U+E6FB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.552,1.988,\'U+EA7A\',-0.276,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.9,2.488,\'U+E0EB\',-0.948,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.94,0.852,\'U+EC16\',-0.528,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.328,\'U+E0A4\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E3ED\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.12,1.62,\'U+E1B7\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.904,1.772,\'U+E570\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.692,1.644,\'U+E5E9\',-0.256,-0.216); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.44,\'U+E15A\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.988,0.196,\'U+E037\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.192,1.356,\'U+E4A5\',-0.192,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.896,1.904,\'U+EA78\',-0.06,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.656,6.072,\'U+E529\',-0.536,-0.356); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8BE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.856,1.712,\'U+E618\',0.0,-0.856); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.116,1.504,\'U+EC3D\',-1.556,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E37F\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,2.452,\'U+E477\',-0.704,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.712,1.212,\'U+E2A3\',-2.184,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.132,1.536,\'U+E4D1\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E3C6\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E188\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E35A\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E384\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E358\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.092,1.836,\'U+E1D2\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.628,2.0,\'U+EBA0\',-0.064,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.464,1.64,\'U+EAA6\',0.712,-0.16); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.996,1.54,\'U+E097\',-0.992,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.588,1.216,\'U+EC07\',-0.524,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.004,0.944,\'U+EA56\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,1.0,\'U+E01F\',0.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E81D\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.656,0.616,\'U+E9B0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.804,4.284,\'U+E045\',-0.036,0.044); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.148,\'U+EB87\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.132,2.136,\'U+E687\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.764,1.068,\'U+E2F2\',-1.332,-0.396); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.924,0.92,\'U+EC39\',-0.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.444,0.9,\'U+E486\',-0.696,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.044,1.008,\'U+E7BB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.604,2.02,\'U+E565\',-1.604,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.08,0.944,\'U+EB31\',0.032,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E37B\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.348,5.08,\'U+E760\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.584,2.1,\'U+EC1F\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.032,1.096,\'U+E7A3\',-0.004,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.796,2.904,\'U+E4C3\',-1.796,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.264,1.96,\'U+EACC\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.028,1.872,\'U+EA88\',-0.872,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.916,2.104,\'U+EA87\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.82,0.548,\'U+E2EE\',-0.492,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.16,1.168,\'U+E024\',-0.08,-0.32); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.896,1.896,\'U+EA73\',-0.06,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.748,\'U+E77E\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.596,1.872,\'U+EAC4\',0.516,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.256,0.82,\'U+E9E0\',-0.604,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,3.468,\'U+E537\',-0.672,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,2.24,\'U+E7CE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.976,0.992,\'U+E612\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.06,0.74,\'U+E27B\',-0.508,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.748,\'U+E35C\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.24,5.864,\'U+E6AB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.44,1.256,\'U+EC0C\',-0.036,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.68,1.212,\'U+E291\',-1.932,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.048,1.044,\'U+EB89\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.784,1.552,\'U+E617\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.136,3.564,\'U+E68A\',0.004,-0.056); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.152,0.768,\'U+EA66\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.86,1.544,\'U+E510\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E30C\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E3BF\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.292,2.412,\'U+EA3D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.432,2.272,\'U+EA3E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.02,2.616,\'U+EA3C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.404,2.436,\'U+EA3F\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.444,1.064,\'U+EAA3\',0.732,-0.14); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.272,1.248,\'U+E611\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E18E\',-0.58,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8BF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.252,\'U+E349\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.38,\'U+E310\',-1.436,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,1.328,\'U+E951\',-2.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,1.04,\'U+E1C6\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.212,3.316,\'U+E512\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.876,1.972,\'U+E7C1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E3EF\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.624,3.128,\'U+E970\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.012,1.996,\'U+E56F\',-0.16,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.16,1.128,\'U+E954\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.076,2.704,\'U+E058\',-2.644,0.024); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.04,1.22,\'U+E1C0\',-0.52,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,2.12,\'U+E112\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.156,0.316,\'U+EA69\',-0.08,-0.044); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.744,\'U+E7C9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.164,0.788,\'U+EA5E\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.98,0.908,\'U+EA5F\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.824,1.896,\'U+E796\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.144,\'U+E83E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.544,1.276,\'U+E5D4\',-0.012,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.1,2.012,\'U+EC1B\',-0.044,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.092,1.916,\'U+EC17\',-0.036,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.46,2.172,\'U+EB50\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.684,4.996,\'U+EC42\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.712,1.328,\'U+E1E0\',-6.148,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.148,\'U+EB81\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E39C\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.324,3.488,\'U+E72A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E333\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.94,2.512,\'U+E8CF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.94,3.072,\'U+E8D0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.94,3.752,\'U+E8D1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.94,1.552,\'U+E8CD\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.94,1.832,\'U+E8CE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.62,3.132,\'U+E98A\',-2.092,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,0.868,\'U+E794\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,0.592,\'U+EBA6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.136,4.136,\'U+E118\',-2.068,-1.508); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.796,1.764,\'U+E655\',0.008,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,2.128,\'U+EAB7\',-0.564,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.192,1.0,\'U+E682\',0.368,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.128,\'U+E93F\',-3.128,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,2.0,\'U+E718\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.36,2.208,\'U+EAC3\',-0.048,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,1.28,\'U+E79C\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.104,2.244,\'U+EC18\',-0.036,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.124,1.496,\'U+E122\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.596,0.596,\'U+E859\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.108,0.912,\'U+E847\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.5,0.708,\'U+E9C5\',-0.16,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.272,1.248,\'U+E610\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.112,1.584,\'U+E1BF\',-0.556,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.16,1.18,\'U+E13B\',-0.032,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8A7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.288,0.908,\'U+E061\',-2.156,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.644,2.452,\'U+EA02\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.564,0.564,\'U+E85A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.156,\'U+E91F\',-1.08,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.816,0.996,\'U+E473\',-1.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.12,1.12,\'U+E114\',-0.56,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.82,1.464,\'U+E29B\',-1.388,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.872,2.62,\'U+E0E7\',-0.948,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.208,1.3,\'U+E0D8\',-0.608,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.836,2.112,\'U+EB76\',0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.176,1.544,\'U+E1B8\',-0.588,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,0.868,\'U+E788\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E1A1\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,3.0,\'U+E017\',1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.032,1.096,\'U+E7A2\',-0.004,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.26,0.64,\'U+E2B3\',-0.52,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,3.128,\'U+E98C\',-2.592,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.032,1.096,\'U+E7A7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.12,1.12,\'U+E115\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.136,4.136,\'U+E116\',-2.068,-0.892); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.936,1.152,\'U+EC03\',-0.048,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.352,2.62,\'U+E1D0\',-0.672,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.004,1.588,\'U+E636\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.672,0.904,\'U+E42F\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.5,0.5,\'U+E807\',0.248,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,2.132,\'U+E1D1\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,4.14,\'U+E6E0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E375\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,2.12,\'U+E110\',-0.996,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.996,0.5,\'U+E4E1\',-0.996,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.86,1.692,\'U+E5DD\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E3A3\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.992,4.448,\'U+E5B6\',-1.468,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.272,1.364,\'U+E1D4\',-3.692,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.728,0.728,\'U+EA0E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.624,\'U+E372\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.448,5.452,\'U+E5DC\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,1.584,\'U+E215\',0.0,-0.792); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E356\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E348\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.288,\'U+E455\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.636,2.66,\'U+E764\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.676,3.872,\'U+E755\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,1.28,\'U+E798\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.22,1.22,\'U+E5F5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.116,0.836,\'U+EB88\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,1.584,\'U+E7DD\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.1,1.6,\'U+E893\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.624,\'U+E392\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.416,\'U+E0B9\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.572,\'U+E0DE\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.868,1.188,\'U+E2C6\',-0.728,-0.284); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.004,1.292,\'U+E1CA\',-0.504,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,1.0,\'U+E8F2\',-1.532,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.42,0.804,\'U+EC02\',-0.048,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.288,1.288,\'U+E645\',-0.004,-0.644); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.868,1.08,\'U+E2D2\',-1.392,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.588,1.588,\'U+E840\',-0.224,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8AF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.712,1.212,\'U+E2A0\',-0.412,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.976,2.252,\'U+E1DD\',-0.552,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.476,1.28,\'U+E93C\',-0.736,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.084,2.116,\'U+E5A6\',-0.104,-0.212); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.98,1.216,\'U+EC15\',-0.548,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.148,\'U+EB85\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.62,\'U+E354\',-1.436,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E3D5\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.156,1.668,\'U+E2C0\',-1.408,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.972,0.944,\'U+E4AE\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.8,0.8,\'U+E614\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.148,\'U+EB7D\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.404,2.436,\'U+EA37\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.02,2.616,\'U+EA34\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.292,2.412,\'U+EA35\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.432,1.26,\'U+EA36\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.12,0.6,\'U+E2B1\',-0.06,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.028,\'U+E810\',0.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,1.588,\'U+EBF6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.532,1.108,\'U+E275\',-2.136,-0.112); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,2.128,\'U+E68C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.312,\'U+E0C7\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E324\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.124,\'U+E0B3\',-0.564,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.16,1.968,\'U+E022\',-0.08,-0.32); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E169\',-0.58,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E187\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.22,0.648,\'U+EABE\',0.0,-0.076); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.136,2.552,\'U+E8C9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.196,5.1,\'U+E6DA\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.124,1.328,\'U+E123\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.112,1.328,\'U+E120\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.68,0.988,\'U+E2EA\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E360\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.048,3.472,\'U+E80A\',-0.52,-1.736); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.708,1.824,\'U+E7AD\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,0.904,\'U+E441\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.868,0.936,\'U+E130\',-0.5,0.46); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.136,1.188,\'U+E0AE\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.72,2.252,\'U+E1DF\',-0.552,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E3B3\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.108,0.912,\'U+E846\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.58,5.108,\'U+E5C4\',-0.248,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.376,0.536,\'U+EC08\',-0.452,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.572,3.3,\'U+E552\',-0.572,-0.32); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,1.464,\'U+E040\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.108,0.912,\'U+EB60\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.968,1.356,\'U+E4B3\',-0.968,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.304,1.368,\'U+E1F6\',-0.496,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,2.0,\'U+E3DC\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.928,0.932,\'U+E4B6\',0.02,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.708,3.444,\'U+EB3E\',0.304,0.268); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.116,4.928,\'U+E502\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.488,0.488,\'U+E4A2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.448,1.524,\'U+E59A\',-1.468,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.632,1.648,\'U+EA6E\',0.148,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E3D2\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.392,3.904,\'U+E701\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E378\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.748,\'U+EBD3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.984,4.252,\'U+EB4D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.016,0.944,\'U+E4AC\',-0.004,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.996,0.604,\'U+E805\',0.008,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E315\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.676,1.08,\'U+E2E3\',-1.308,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.78,2.012,\'U+EAE5\',-0.508,-0.14); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.632,3.128,\'U+E971\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.828,1.892,\'U+E78B\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.612,1.224,\'U+EAD8\',-0.056,-0.128); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.432,0.78,\'U+E563\',-2.112,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.544,1.368,\'U+E1F2\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.128,1.0,\'U+E020\',-0.064,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.0,0.064,\'U+E8F5\',-1.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.192,2.192,\'U+EB3A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.54,1.544,\'U+EB73\',0.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.008,2.0,\'U+E4CF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.556,1.592,\'U+E786\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.972,2.9,\'U+E692\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,2.144,\'U+E6D7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.1,1.652,\'U+EC19\',-0.052,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.888,1.316,\'U+EC0E\',-0.52,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.04,1.172,\'U+E1C4\',-0.52,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E18A\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,0.192,\'U+E9F2\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.836,1.908,\'U+EA72\',0.0,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.716,1.764,\'U+E7DC\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.256,4.428,\'U+EC45\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.064,1.564,\'U+E66F\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.536,2.804,\'U+E076\',-2.488,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8AB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.372,1.3,\'U+E95E\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.568,2.144,\'U+EB2B\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.08,2.884,\'U+EC22\',-0.04,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.548,1.404,\'U+E0F2\',-0.548,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.924,1.5,\'U+E642\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.244,0.744,\'U+E9E1\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E17C\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.68,2.44,\'U+E589\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.924,4.476,\'U+E5B2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.624,1.624,\'U+E5DA\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,1.668,\'U+EA86\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.424,0.128,\'U+E9D1\',-0.536,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.884,1.14,\'U+EA01\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.948,1.184,\'U+E277\',-1.46,-0.192); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.264,0.972,\'U+E652\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.944,1.584,\'U+E653\',0.032,-0.596); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.964,0.916,\'U+EADB\',-0.164,-0.088); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.048,1.044,\'U+EB8B\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,0.912,\'U+EBA9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.236,2.136,\'U+E651\',-0.012,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.384,1.656,\'U+E65A\',-0.02,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.864,1.256,\'U+E428\',-1.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E331\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.004,3.784,\'U+E626\',-0.3,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.128,3.0,\'U+E01A\',-0.064,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.24,4.04,\'U+E650\',-0.008,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.968,3.124,\'U+E98B\',-2.28,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,4.344,\'U+E530\',-0.672,-0.568); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.136,1.32,\'U+EA22\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.624,\'U+E305\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.712,1.088,\'U+E2A4\',-2.18,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.96,0.572,\'U+E8F8\',1.04,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.304,1.188,\'U+E2D0\',-0.728,-0.284); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.38,1.384,\'U+E639\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.988,1.204,\'U+EA10\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.632,2.86,\'U+E4C8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.232,2.5,\'U+E95C\',-3.548,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E3D1\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.716,1.136,\'U+E079\',-1.852,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.496,\'U+E3E2\',-1.44,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.612,1.196,\'U+E456\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.444,0.9,\'U+E480\',-0.696,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.0,2.792,\'U+EB2A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.08,0.944,\'U+EB30\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.536,0.536,\'U+E541\',0.636,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.212,3.48,\'U+E513\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.408,3.244,\'U+E5D2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E3CA\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.296,1.296,\'U+E638\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,0.912,\'U+E033\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,0.192,\'U+E4AA\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E775\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E19C\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.376,2.276,\'U+EBCF\',-0.136,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,4.148,\'U+E700\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.376,0.376,\'U+E9D2\',0.312,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.744,\'U+E7B6\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.104,2.104,\'U+E00B\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.512,\'U+E0A8\',-0.564,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.228,1.1,\'U+EAC1\',-0.048,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.064,1.564,\'U+E671\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.144,\'U+E7F5\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.568,1.092,\'U+E249\',-2.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8B4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.448,1.884,\'U+E0CE\',-0.72,-0.292); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.624,\'U+E373\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E382\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.98,1.984,\'U+E808\',-0.992,-0.992); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.888,0.696,\'U+E136\',-0.5,0.32); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.18,2.252,\'U+E1DB\',-0.552,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.068,2.804,\'U+E063\',-3.02,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.496,2.804,\'U+E066\',-2.484,-0.088); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,4.12,\'U+E53B\',-0.672,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.704,2.228,\'U+E7E1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.852,1.584,\'U+E900\',-0.928,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E3C4\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.868,2.64,\'U+E124\',-0.668,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,5.568,\'U+E754\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,1.372,\'U+E948\',-3.128,-0.496); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.668,3.128,\'U+E989\',-2.14,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.004,0.652,\'U+E51B\',-0.068,-0.104); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.468,1.852,\'U+E131\',-0.552,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.476,1.64,\'U+E489\',-0.712,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,4.128,\'U+EAB9\',-0.564,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.524,\'U+E0C9\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.876,\'U+E3D6\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.136,2.136,\'U+E7FF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.012,3.284,\'U+EB47\',-1.016,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.104,3.744,\'U+E6C0\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.128,1.0,\'U+E01C\',1.936,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E31E\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.74,3.128,\'U+E978\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,3.0,\'U+E018\',0.936,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.352,2.62,\'U+E0A0\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.384,2.676,\'U+E05B\',-2.972,0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.048,2.972,\'U+E866\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,3.6,\'U+EB1F\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.52,3.104,\'U+E6D5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E3C2\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.532,1.536,\'U+EB65\',0.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.02,2.024,\'U+E896\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,3.0,\'U+E656\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.08,0.948,\'U+EB2C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.488,0.488,\'U+E4A3\',-0.488,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.836,0.98,\'U+EA71\',0.0,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.748,\'U+E77B\',0.0,-0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.948,5.356,\'U+E710\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.976,1.2,\'U+E223\',-1.48,-0.6); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.272,1.252,\'U+E61B\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.62,1.648,\'U+E782\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.04,1.376,\'U+E144\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.496,1.2,\'U+E221\',-0.748,-0.604); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.232,1.2,\'U+E222\',-1.12,-0.6); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.72,0.984,\'U+E470\',-1.336,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.964,2.24,\'U+EAE1\',-0.164,-0.136); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.448,3.896,\'U+E750\',-0.008,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.136,4.136,\'U+E117\',-2.068,-1.02); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.048,1.044,\'U+EB8D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.004,0.652,\'U+E092\',-1.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,4.784,\'U+E6A2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.876,\'U+E3CF\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.888,0.636,\'U+E571\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,4.864,\'U+EAF4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,4.264,\'U+EAF6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,4.564,\'U+EAF5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,3.744,\'U+EAF8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,4.044,\'U+EAF7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,3.144,\'U+EAFA\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,3.444,\'U+EAF9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,2.544,\'U+EAFC\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,2.844,\'U+EAFB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.88,\'U+E943\',0.0,-0.752); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.712,1.82,\'U+E7A4\',-0.004,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.988,1.764,\'U+E717\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.052,6.204,\'U+E540\',0.372,0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8A1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E30A\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.164,5.476,\'U+E5C0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.996,1.792,\'U+E08F\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.344,1.076,\'U+E2D7\',-2.944,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.632,1.648,\'U+EA6D\',0.148,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.704,1.38,\'U+E590\',0.16,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.996,1.38,\'U+EC06\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,1.248,\'U+E217\',0.0,-0.624); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.808,1.056,\'U+E902\',-0.924,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.732,2.384,\'U+E0F9\',-0.564,-0.324); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.864,1.864,\'U+E0EC\',-0.932,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.512,4.232,\'U+E007\',-0.272,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,0.904,\'U+E9E4\',-0.74,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.892,1.892,\'U+E870\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.108,3.128,\'U+E975\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.984,4.088,\'U+E730\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.492,2.044,\'U+E0CF\',-0.752,-0.36); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.492,2.044,\'U+E0D0\',-0.748,-0.356); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.004,2.432,\'U+E072\',-1.508,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.476,1.28,\'U+E93D\',-0.736,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.12,1.62,\'U+E1B4\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,2.24,\'U+E7CF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.88,1.672,\'U+E08B\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,1.756,\'U+E212\',-0.016,-0.82); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.668,1.292,\'U+E457\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.18,0.912,\'U+EBAC\',-0.036,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.98,\'U+E91A\',-1.068,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,1.98,\'U+E919\',-1.52,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E316\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.828,1.892,\'U+E792\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.256,1.604,\'U+E04B\',-0.132,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.604,1.848,\'U+E125\',-0.552,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.704,0.672,\'U+E482\',-1.34,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,1.388,\'U+E68E\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E16A\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.964,1.204,\'U+EADD\',-0.164,-0.116); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.144,4.388,\'U+EB26\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.06,2.66,\'U+EA83\',-0.072,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.904,2.076,\'U+E57D\',-0.004,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.792,4.004,\'U+EB14\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.236,1.24,\'U+E290\',-0.696,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.62,1.648,\'U+E783\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,4.664,\'U+E6DF\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.112,0.944,\'U+EB2E\',-0.032,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E37E\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.228,1.228,\'U+EBF3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.044,1.008,\'U+E7C4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.416,4.248,\'U+E586\',0.012,0.056); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.9,1.076,\'U+E2CD\',-2.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.04,1.184,\'U+E2D5\',-2.292,-0.28); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.1,0.94,\'U+E1FF\',3.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.108,0.912,\'U+EB68\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.156,1.188,\'U+E2C1\',-1.408,-0.284); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.836,1.116,\'U+EB8A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',8.004,2.66,\'U+E057\',-3.6,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.124,\'U+E0DD\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.188,2.148,\'U+E0BA\',-0.58,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.288,0.288,\'U+EBAE\',0.42,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.552,1.26,\'U+E0EF\',-0.556,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.02,2.616,\'U+EA30\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.432,2.66,\'U+EA32\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.292,2.412,\'U+EA31\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.404,2.436,\'U+EA33\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.796,1.764,\'U+E7F0\',0.008,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.776,0.684,\'U+E2E0\',-0.496,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.988,2.476,\'U+E6F2\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E398\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.66,1.18,\'U+E139\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.876,1.972,\'U+E7C6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.888,1.26,\'U+EC0F\',-0.52,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.42,1.492,\'U+E575\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.4,0.056,\'U+E9B6\',-0.6,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,1.04,\'U+E1C7\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.98,1.612,\'U+E7DF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,1.46,\'U+E100\',-1.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.864,1.864,\'U+E0E9\',-0.932,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.612,1.056,\'U+EAD7\',-0.056,-0.104); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.66,0.556,\'U+E9F7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,7.58,\'U+E533\',-0.672,-0.568); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.52,0.92,\'U+E7AF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E183\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.484,2.248,\'U+EAA8\',0.692,-0.144); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.092,1.836,\'U+E0FA\',-0.544,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.572,0.572,\'U+E1E7\',-0.284,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.616,0.652,\'U+E422\',-1.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.444,1.412,\'U+EAA5\',0.732,-0.172); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.112,1.232,\'U+E81A\',0.172,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.428,1.076,\'U+E2C8\',-1.392,-0.08); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.328,2.088,\'U+EAEA\',-1.232,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.228,2.408,\'U+E5A2\',0.004,-0.288); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.688,4.192,\'U+E92F\',-1.344,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.276,1.368,\'U+E22B\',-0.636,-0.684); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.708,4.004,\'U+EB40\',0.304,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,4.652,\'U+EC62\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.792,1.364,\'U+E447\',-1.4,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.58,1.956,\'U+EAAC\',-0.1,-0.172); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8AD\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E178\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.8,1.2,\'U+E632\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.192,4.464,\'U+EAC5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.956,2.304,\'U+E66B\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,1.28,\'U+E79D\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.088,2.94,\'U+E745\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.512,4.512,\'U+EC61\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.916,4.116,\'U+E742\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.5,0.192,\'U+E9F5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E3CD\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.196,5.1,\'U+E6D8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.62,1.736,\'U+E4CD\',-1.62,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.376,1.836,\'U+EBCE\',-0.136,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.584,1.032,\'U+E646\',0.0,-0.516); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.532,1.536,\'U+EB61\',0.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.624,\'U+E302\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.088,0.736,\'U+EA29\',-0.544,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.22,0.72,\'U+E2B5\',-0.72,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,0.064,\'U+E8F3\',1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E314\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.096,0.852,\'U+E42B\',-1.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',8.16,1.328,\'U+E1E4\',-7.596,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.288,1.392,\'U+E961\',-0.744,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.252,1.328,\'U+E1D6\',-3.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.156,1.184,\'U+E7DA\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E170\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.6,0.056,\'U+E9C1\',-0.6,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.196,1.656,\'U+EA20\',0.0,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.136,2.552,\'U+E8C4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E1AD\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.096,2.18,\'U+EC1D\',-0.04,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.156,3.088,\'U+EA7D\',-1.096,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.896,2.164,\'U+EC57\',-0.448,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,0.144,\'U+E038\',2.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.032,1.096,\'U+E7AA\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.276,1.008,\'U+E553\',-0.136,0.16); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,2.184,\'U+E047\',-0.108,0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.404,1.5,\'U+E640\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.68,1.356,\'U+E4B0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.4,3.124,\'U+E977\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.176,2.804,\'U+E067\',-2.488,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.4,1.324,\'U+E426\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.576,\'U+E0DA\',-0.556,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.328,\'U+E935\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.912,1.196,\'U+EB7E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.5,3.908,\'U+EBEC\',-2.252,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,1.28,\'U+E79E\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.76,8.0,\'U+EAF2\',-1.128,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.256,3.12,\'U+E821\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.448,4.592,\'U+E5B5\',-1.468,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.084,1.392,\'U+EBF5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,0.94,\'U+E488\',-0.696,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.288,1.288,\'U+E80D\',-0.644,-0.644); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.828,1.896,\'U+E78E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E309\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.5,1.5,\'U+EBA4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.008,0.988,\'U+E7FD\',-0.504,-0.496); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.056,1.472,\'U+E474\',-1.396,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.628,5.896,\'U+E5B7\',-0.248,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.568,1.608,\'U+EC1C\',-0.492,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.8,1.528,\'U+E4F0\',-0.416,-0.108); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',8.532,1.328,\'U+E1E6\',-7.968,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E39A\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.192,2.196,\'U+EB38\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,2.0,\'U+E32A\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E160\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E19B\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.66,3.936,\'U+E6D1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.076,\'U+E842\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.876,\'U+E3EB\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E18D\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.704,0.672,\'U+E9E5\',-1.352,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.368,1.024,\'U+EAD1\',0.0,-0.1); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.096,1.576,\'U+EC53\',-0.548,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.792,0.996,\'U+E262\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.94,\'U+EBE9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.204,0.92,\'U+EBE8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8BA\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.432,1.752,\'U+E453\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.552,\'U+EBE1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.204,1.028,\'U+EBE0\',-0.004,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.88,\'U+EBE3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.572,1.06,\'U+EC36\',-1.16,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.488,1.124,\'U+E47C\',-0.744,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.932,\'U+EBE4\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.204,0.968,\'U+EBE7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.94,\'U+EBE6\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.672,1.656,\'U+E435\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.936,0.928,\'U+E4B7\',-0.936,0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E34C\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.416,1.328,\'U+E1E2\',-6.852,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,2.728,\'U+E535\',-0.672,-0.568); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.928,0.616,\'U+E995\',-0.464,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E357\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,1.628,\'U+E7D8\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8C7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.74,3.128,\'U+E988\',-2.212,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.164,2.828,\'U+E7FA\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,2.24,\'U+E7D0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.728,0.728,\'U+EA0D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.096,3.444,\'U+E856\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.04,2.684,\'U+E074\',-2.424,-0.02); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.224,3.376,\'U+EA82\',-1.024,-0.208); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.624,\'U+E383\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.46,1.448,\'U+E843\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.032,1.096,\'U+E7A6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.16,0.144,\'U+EBA7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.468,1.184,\'U+E658\',0.76,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E18F\',-0.58,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E181\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.168,3.448,\'U+E766\',-0.808,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E307\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,3.128,\'U+EAB8\',-0.564,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,3.344,\'U+E52D\',-0.724,-0.152); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.924,\'U+E945\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,6.52,\'U+E532\',-0.672,-0.568); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.084,1.504,\'U+EA24\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.656,3.32,\'U+E52C\',-0.548,-0.14); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.94,2.252,\'U+EAAD\',-0.32,-0.188); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E193\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.072,1.564,\'U+E107\',-1.04,-0.052); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.064,1.564,\'U+E66E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.012,4.004,\'U+EB46\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.008,1.292,\'U+E1CB\',-0.504,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.448,1.884,\'U+E7E9\',1.72,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,1.072,\'U+EA62\',0.0,-0.128); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8AC\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.908,1.28,\'U+EA63\',-0.008,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.012,3.42,\'U+E80B\',-0.512,-1.712); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E353\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E1AB\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8B2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.912,0.96,\'U+E2DB\',-1.328,-0.284); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E3D3\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.08,0.944,\'U+EB2F\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.552,1.26,\'U+E0F3\',-0.556,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.204,1.672,\'U+E47F\',-0.704,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.636,4.0,\'U+EB1B\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,3.92,\'U+E102\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.792,0.448,\'U+E88A\',0.32,0.032); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.628,1.0,\'U+EBA2\',-0.064,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.144,1.66,\'U+E6D6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.904,0.6,\'U+E991\',-0.452,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.98,2.48,\'U+E5E4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.424,2.0,\'U+E59B\',-1.468,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.612,0.924,\'U+EAD6\',-0.056,-0.112); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.36,1.58,\'U+E61A\',-0.184,-0.788); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.896,1.004,\'U+EAB3\',0.0,-0.096); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.5,0.192,\'U+E9F4\',0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.04,1.668,\'U+E2D4\',-2.292,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.136,1.72,\'U+E9E3\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.848,3.124,\'U+E983\',-1.16,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E185\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.376,1.376,\'U+EA97\',1.636,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.096,1.664,\'U+E431\',-1.188,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.12,0.096,\'U+E583\',0.436,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,1.248,\'U+E31C\',-1.444,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.976,1.876,\'U+EA80\',-0.06,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,1.86,\'U+E281\',-0.7,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.128,\'U+E938\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.12,1.616,\'U+E1B3\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.16,1.18,\'U+E13A\',-0.028,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.128,\'U+E0AF\',-0.564,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.644,3.64,\'U+E6DB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.08,0.704,\'U+E9D8\',0.5,-0.024); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.532,1.536,\'U+EB63\',0.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.724,2.392,\'U+E608\',-1.36,-1.196); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.928,0.56,\'U+E7D1\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.372,1.34,\'U+E135\',-0.812,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.44,\'U+E159\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.964,1.908,\'U+EAE0\',-0.164,-0.124); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.66,3.936,\'U+E6D2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E150\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.208,2.08,\'U+E0D7\',-0.604,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.516,0.988,\'U+E273\',-2.172,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.884,1.14,\'U+EA00\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.708,1.824,\'U+E7AC\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.748,\'U+E370\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.148,1.832,\'U+E660\',-0.084,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.876,\'U+E328\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.328,1.86,\'U+E9B9\',-0.912,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.192,2.192,\'U+EB3B\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.624,3.132,\'U+E972\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E7F1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.172,2.804,\'U+E068\',-4.124,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.432,1.116,\'U+E561\',-2.1,-0.336); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.308,1.952,\'U+E2CF\',-0.732,-0.284); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.288,0.836,\'U+E5A1\',0.236,-0.388); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.876,1.972,\'U+E7BD\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.184,0.688,\'U+E624\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.216,0.812,\'U+EA53\',-0.192,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.764,0.744,\'U+EA8F\',-0.848,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.956,1.788,\'U+E669\',0.0,-0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.876,2.64,\'U+E12D\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.624,\'U+E394\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.04,1.172,\'U+E1C5\',-0.52,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.656,1.908,\'U+E520\',-0.536,-0.356); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.66,0.556,\'U+E9F6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.744,\'U+E776\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.544,1.328,\'U+E1F0\',-0.496,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.656,4.684,\'U+E52A\',-0.516,-0.356); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,3.932,\'U+E731\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.752,0.304,\'U+E9B2\',-0.484,-0.248); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.656,8.852,\'U+E527\',-0.54,-0.356); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E3CC\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.896,1.004,\'U+EAB1\',0.0,-0.096); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.476,0.904,\'U+E2E2\',-0.728,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.42,2.112,\'U+E0D3\',-0.736,-0.1); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E34B\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.42,2.112,\'U+E0D4\',-0.72,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.204,2.744,\'U+E732\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.776,0.684,\'U+E2E1\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.372,1.3,\'U+E937\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.744,\'U+E7B5\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8B0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.4,1.6,\'U+E22F\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E774\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.04,5.976,\'U+E5B4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.8,0.956,\'U+E078\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.876,\'U+E327\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.916,0.616,\'U+E99D\',-0.46,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.004,2.432,\'U+E071\',-1.544,-0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8AA\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.628,\'U+E301\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.5,0.5,\'U+E920\',-0.252,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.336,2.412,\'U+E4C6\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.496,1.944,\'U+E580\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.016,0.944,\'U+E4AD\',-1.016,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.14,4.824,\'U+E729\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.056,1.004,\'U+EBC5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.616,\'U+EBC6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.98,1.716,\'U+EBC3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.952,1.252,\'U+EBC4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.876,\'U+EBC1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.06,1.164,\'U+EBC2\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.968,1.104,\'U+EBC0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.208,1.284,\'U+EBCC\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.184,0.524,\'U+EBCA\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.1,1.644,\'U+EBCB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.764,0.872,\'U+EA92\',-0.848,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.196,0.852,\'U+EBC9\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,0.936,\'U+EBC7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.22,0.496,\'U+EBC8\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.02,1.2,\'U+E479\',-0.508,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.748,\'U+E371\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.992,1.2,\'U+E228\',-1.484,-0.6); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.108,0.912,\'U+EB6C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.62,\'U+E32D\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E3B9\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,1.28,\'U+E7A0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.256,1.9,\'U+E874\',0.82,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.18,1.876,\'U+E003\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.864,1.256,\'U+E283\',-1.388,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.248,1.368,\'U+E1F9\',1.8,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.104,2.144,\'U+E11A\',-1.056,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.148,\'U+EB7B\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E3B8\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.432,1.932,\'U+EC0B\',-0.036,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.196,0.912,\'U+EB7C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.748,0.5,\'U+E3F3\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.888,0.864,\'U+E573\',0.008,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.6,1.184,\'U+E2CB\',-1.852,-0.28); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.46,1.448,\'U+E844\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E16C\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,2.24,\'U+E7CC\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E1A3\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.984,3.0,\'U+E690\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E385\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.076,2.104,\'U+EC20\',-0.048,-0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.296,1.296,\'U+E924\',-0.648,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,0.352,\'U+E4A9\',-1.16,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.984,3.996,\'U+EB19\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,2.392,\'U+E21B\',0.0,-1.196); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E172\',-0.588,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.916,0.616,\'U+E99C\',-0.46,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.968,3.124,\'U+E97B\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.98,1.584,\'U+E7E0\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E1AF\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.844,1.044,\'U+E244\',-2.96,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.328,4.06,\'U+EAEE\',-1.232,-0.116); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.664,0.24,\'U+EA04\',-0.404,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.108,2.312,\'U+EA7E\',-0.892,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.804,0.8,\'U+EC3C\',-0.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E359\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.184,0.388,\'U+EA6B\',-0.096,-0.036); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.448,0.436,\'U+E0F6\',-0.724,-0.144); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.096,2.104,\'U+E853\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E317\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.936,1.548,\'U+E8D4\',-0.976,-0.772); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.824,1.548,\'U+E8D6\',-1.4,-0.776); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.488,1.548,\'U+E8D3\',-0.744,-0.768); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.512,\'U+E8D2\',-0.564,-0.76); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.444,0.9,\'U+E2E4\',-0.696,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.596,0.976,\'U+E907\',-1.396,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.876,0.776,\'U+E133\',-0.5,0.3); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.956,2.844,\'U+E66C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.54,2.148,\'U+E566\',-0.008,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.16,3.956,\'U+E752\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.636,2.92,\'U+E05F\',-3.612,-0.124); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E166\',-0.556,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,1.452,\'U+E21F\',0.0,-0.728); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.78,1.1,\'U+EA26\',-0.508,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.44,\'U+E15D\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.196,0.912,\'U+EB80\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.16,\'U+E91D\',-1.076,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E3B5\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,2.972,\'U+E91C\',-1.064,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,5.436,\'U+E531\',-0.672,-0.568); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.612,1.428,\'U+EAD9\',-0.056,-0.14); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.128,2.0,\'U+E014\',-0.064,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.28,1.28,\'U+E95F\',-0.736,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.792,2.076,\'U+E269\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,4.784,\'U+E6A3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.16,\'U+E839\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.16,\'U+E83A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.16,\'U+E837\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.16,\'U+E838\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.16,\'U+E835\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.16,\'U+E836\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.16,\'U+E833\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.16,\'U+E834\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.112,1.584,\'U+E1BE\',-0.564,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.204,0.788,\'U+E579\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E39E\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.16,\'U+E83C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.444,0.9,\'U+E478\',-0.696,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.328,\'U+E934\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.132,2.004,\'U+EA96\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.9,2.488,\'U+E0EA\',-0.948,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.496,1.944,\'U+E57F\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.876,1.972,\'U+E7C5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.372,2.264,\'U+E1E1\',-0.552,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.3,0.92,\'U+E8CB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.104,1.524,\'U+E6D4\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.004,1.892,\'U+E65B\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.004,1.892,\'U+E65C\',0.968,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.712,1.824,\'U+E7A9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.06,1.512,\'U+E5A5\',-0.104,-0.224); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.492,1.408,\'U+EC31\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.34,2.348,\'U+E602\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.736,4.8,\'U+E6F5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E7B4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.6,0.056,\'U+E9B8\',-0.6,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.272,1.252,\'U+E61D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8B6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.96,1.576,\'U+E42A\',-1.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.516,\'U+E5E1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.552,\'U+E780\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',8.76,2.672,\'U+E4ED\',-3.972,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E7F2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.876,\'U+E94B\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.332,4.308,\'U+E6FA\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.548,1.168,\'U+E5D7\',-0.02,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.744,\'U+E777\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,1.192,\'U+E862\',2.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.204,2.188,\'U+E91B\',-1.104,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.972,3.34,\'U+E056\',-2.616,0.028); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.62,\'U+E355\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.62,\'U+E32C\',-1.436,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,2.124,\'U+E219\',0.0,-1.06); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.04,1.172,\'U+E1C9\',-0.52,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.116,3.468,\'U+E6C1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.64,1.952,\'U+E904\',-4.276,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E197\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.896,4.572,\'U+EB25\',-0.476,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.348,2.004,\'U+EAC9\',0.34,-0.212); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.86,1.828,\'U+E568\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.62,2.94,\'U+E4CA\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.376,1.376,\'U+E47D\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,4.0,\'U+EB13\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.424,0.296,\'U+E9D7\',-0.812,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E31F\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.964,1.04,\'U+EADC\',-0.164,-0.108); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.88,0.908,\'U+EC58\',-0.44,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.308,4.328,\'U+E5BA\',-0.784,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.12,1.62,\'U+E1B6\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E152\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.096,2.776,\'U+E854\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E1A4\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,4.784,\'U+E6A6\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.252,1.704,\'U+E666\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.444,1.224,\'U+EAAF\',0.732,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,2.392,\'U+E21C\',0.0,-1.196); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.376,1.188,\'U+E903\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E3E5\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.008,1.7,\'U+E869\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.32,1.596,\'U+EACA\',0.384,-0.396); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.568,2.568,\'U+E81E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,2.212,\'U+E603\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.328,\'U+E952\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.776,1.896,\'U+EA77\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.004,3.276,\'U+E693\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.38,2.804,\'U+E065\',-2.484,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.048,2.804,\'U+E064\',-3.0,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.368,1.372,\'U+EAD3\',0.0,-0.12); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.012,4.004,\'U+EB43\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.992,2.336,\'U+E060\',-1.996,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,4.784,\'U+E6A8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.236,0.56,\'U+E7D3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.088,1.088,\'U+E5E5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,4.392,\'U+E53A\',-0.672,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.116,1.98,\'U+E667\',-1.136,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,5.684,\'U+E685\',0.0,-0.08); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.844,3.128,\'U+E723\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,1.036,\'U+E1C3\',-0.5,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,1.448,\'U+E740\',-0.008,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.54,1.544,\'U+EB75\',0.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.648,0.64,\'U+E622\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E320\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.436,0.512,\'U+EBD5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.912,2.108,\'U+EB6A\',0.596,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.956,2.304,\'U+E5F3\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,0.732,\'U+E105\',-0.504,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.724,1.204,\'U+E229\',-1.856,-0.604); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.192,2.196,\'U+EB39\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.748,1.2,\'U+E225\',-0.372,-0.6); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.496,1.2,\'U+E226\',-0.748,-0.604); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.232,1.2,\'U+E227\',-1.12,-0.6); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.012,1.324,\'U+E927\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.012,1.176,\'U+E928\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.012,0.996,\'U+E926\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.544,2.044,\'U+E95B\',-0.98,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,1.516,\'U+E929\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.14,3.188,\'U+E728\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.44,1.644,\'U+E688\',-0.372,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E35B\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.572,\'U+E0DC\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,0.88,\'U+E341\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.192,1.644,\'U+E278\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.792,2.076,\'U+E265\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.608,0.932,\'U+EC37\',-0.328,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.096,2.928,\'U+E820\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E318\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E376\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.012,1.096,\'U+EA25\',-0.504,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.964,1.616,\'U+EADF\',-0.164,-0.124); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,3.212,\'U+E534\',-0.672,-0.568); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.748,1.952,\'U+E2D9\',-0.732,-0.284); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.8,0.8,\'U+E615\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.468,1.18,\'U+E591\',0.084,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.096,1.44,\'U+E851\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.456,1.072,\'U+E2C3\',-2.056,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8B7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.204,1.76,\'U+EA93\',-1.084,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.888,0.636,\'U+E572\',0.004,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.68,1.22,\'U+E5E2\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.004,0.652,\'U+E51A\',-0.068,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,1.5,\'U+E4EF\',-1.08,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.324,1.5,\'U+E643\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.492,\'U+E4D4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,0.868,\'U+E791\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E16E\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.632,1.828,\'U+E06C\',-0.808,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.536,0.936,\'U+E299\',-1.348,-0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.032,0.976,\'U+E06B\',-2.516,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.128,\'U+E957\',-0.564,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.576,1.128,\'U+E4E4\',-0.008,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.476,1.3,\'U+EAAA\',0.0,-0.132); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.008,2.44,\'U+E895\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.46,2.172,\'U+EB4F\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E3E4\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.06,2.292,\'U+EA89\',-0.072,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.996,1.724,\'U+E592\',0.16,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.136,1.32,\'U+E0A9\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.16,3.128,\'U+E97D\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,2.132,\'U+E0A1\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.612,0.816,\'U+EAD5\',-0.056,-0.1); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.44,0.612,\'U+E99E\',-0.984,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.128,2.0,\'U+E010\',1.936,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.96,1.54,\'U+E295\',-2.212,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.008,0.988,\'U+E263\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E165\',-0.556,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.128,\'U+E953\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,0.956,\'U+E2CC\',-2.128,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E190\',-0.58,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.564,0.564,\'U+E858\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.188,3.0,\'U+EB23\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,2.352,\'U+E6DE\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.3,0.92,\'U+E8CC\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,0.988,\'U+E21E\',0.0,-0.492); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.536,0.988,\'U+E2F4\',-0.5,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E196\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.824,3.86,\'U+E691\',0.148,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.988,4.536,\'U+E6B1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.804,4.284,\'U+E046\',-0.036,0.044); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.192,1.356,\'U+E4A4\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E3BD\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.004,0.652,\'U+E26A\',-1.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.14,1.384,\'U+E526\',-0.02,-0.152); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,2.132,\'U+EABA\',-1.064,-0.072); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.64,0.716,\'U+E282\',-1.412,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.548,0.952,\'U+E272\',-1.36,-0.104); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.988,0.32,\'U+E001\',0.0,0.032); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.508,1.1,\'U+E274\',-1.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.88,\'U+E944\',-3.128,-0.752); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.96,1.188,\'U+E596\',-0.024,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.164,4.424,\'U+E5BE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.188,2.148,\'U+E0C3\',-0.58,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E34E\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,2.24,\'U+E7CD\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.252,1.328,\'U+E1D5\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.6,0.808,\'U+EC3E\',-0.852,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.976,1.472,\'U+E876\',0.0,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.44,1.892,\'U+E279\',-1.672,-0.24); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.748,\'U+E347\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.108,0.912,\'U+EB64\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.388,3.764,\'U+E6D0\',-0.036,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,2.144,\'U+E522\',-0.672,-0.568); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8C0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.824,1.272,\'U+E1FE\',3.348,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.1,2.128,\'U+E831\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.792,2.196,\'U+E475\',-1.392,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,0.904,\'U+E280\',-0.7,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.004,\'U+E3B2\',-1.436,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.148,1.272,\'U+E0CD\',-0.572,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.248,1.368,\'U+E1FA\',2.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.144,3.836,\'U+EB27\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.516,1.512,\'U+E08E\',-0.76,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.936,0.616,\'U+E994\',-0.468,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8C8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,2.0,\'U+E012\',0.936,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.888,0.864,\'U+E574\',0.012,0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.136,4.136,\'U+E119\',-2.068,-1.504); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,0.88,\'U+E340\',-1.436,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.336,1.912,\'U+E07C\',-1.656,-0.06); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.224,1.736,\'U+E816\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.096,1.904,\'U+EA8E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.44,1.16,\'U+E271\',-1.672,-0.156); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.18,0.396,\'U+E4A6\',-0.008,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E377\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E164\',-0.556,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,0.144,\'U+E036\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.576,1.128,\'U+E4E3\',-0.54,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E362\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,2.24,\'U+E7CB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.756,0.304,\'U+E9B3\',-0.256,-0.248); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.3,5.468,\'U+E7E7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.512,1.312,\'U+E882\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,0.5,\'U+E4E2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,2.176,\'U+E7DB\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.0,4.5,\'U+EBEB\',-3.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.128,\'U+E93B\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.14,1.316,\'U+E0E2\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.828,1.892,\'U+E793\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.824,1.272,\'U+E203\',4.172,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.632,3.128,\'U+E981\',-1.104,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.52,0.92,\'U+E7AE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.476,1.3,\'U+EAA9\',0.0,-0.132); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.584,1.832,\'U+E569\',-0.36,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.784,2.164,\'U+E4EB\',-4.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.552,\'U+E781\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.508,1.248,\'U+E888\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.704,1.452,\'U+E4E8\',-2.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.7,0.988,\'U+E4E6\',-1.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.504,2.144,\'U+E59C\',-0.784,-0.14); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.144,\'U+E83F\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.128,\'U+E0D9\',-0.556,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.924,\'U+E946\',-3.128,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E321\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E306\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E34D\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.104,1.26,\'U+E0BC\',-0.556,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.4,3.124,\'U+E987\',-1.712,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.716,2.42,\'U+E5A8\',-0.736,-0.212); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.748,1.2,\'U+EA23\',-0.372,-0.6); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.208,0.792,\'U+E57A\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.04,1.376,\'U+E146\',-0.52,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E7B3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.616,3.02,\'U+EA40\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.412,2.292,\'U+EA41\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.468,1.852,\'U+E12F\',-0.92,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.38,1.36,\'U+E4B4\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.1,3.132,\'U+E986\',-1.572,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,0.192,\'U+E9F1\',-2.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.912,0.432,\'U+E785\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.128,\'U+E93A\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.332,3.128,\'U+E721\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E16D\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.448,0.436,\'U+E0F5\',-0.724,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E168\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,2.228,\'U+E21A\',0.0,-1.112); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.076,1.328,\'U+E1DC\',-4.512,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E194\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.4,0.976,\'U+E909\',-3.2,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,0.912,\'U+E032\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.844,0.608,\'U+E9A0\',-0.468,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.096,1.836,\'U+E267\',-1.34,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E3B1\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.516,1.2,\'U+E460\',-1.888,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.824,1.272,\'U+E201\',4.172,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.984,1.564,\'U+E098\',-0.992,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.124,\'U+E0DB\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.036,4.012,\'U+EB18\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E37D\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.364,\'U+E141\',-0.444,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.216,1.72,\'U+E63B\',0.0,-0.256); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.44,1.04,\'U+EACB\',1.136,-0.468); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.752,1.188,\'U+E2DA\',-0.728,-0.284); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.364,\'U+E13F\',-0.7,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E367\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,1.264,\'U+E070\',-0.996,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.036,2.152,\'U+E71A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.828,0.86,\'U+E56A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.58,3.96,\'U+E5BD\',-0.248,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E771\',-0.016,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.768,0.536,\'U+E906\',-0.884,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.048,1.1,\'U+E06E\',-2.032,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.012,0.944,\'U+E4AF\',-2.012,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.452,0.984,\'U+EC05\',-0.496,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.688,1.764,\'U+E5E8\',-0.28,-0.296); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.664,1.664,\'U+E5EB\',-0.232,-0.232); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.336,2.412,\'U+E4C7\',-1.332,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,1.752,\'U+E664\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.124,\'U+E3F0\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.856,0.652,\'U+E421\',-1.452,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.688,0.792,\'U+E606\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.48,1.34,\'U+E137\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E19E\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.18,1.188,\'U+E2EC\',0.152,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.908,1.252,\'U+E57C\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.988,0.32,\'U+E000\',0.0,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.368,0.696,\'U+EACE\',0.0,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E3A2\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,4.784,\'U+E6A4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.204,2.744,\'U+E733\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,0.744,\'U+EB2D\',-0.032,0.1); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.524,\'U+E0C1\',-0.56,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.048,0.512,\'U+E819\',0.176,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.78,1.1,\'U+EA27\',-1.272,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.98,1.08,\'U+E61E\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.416,2.644,\'U+E12C\',-0.732,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.732,\'U+E0F8\',-0.564,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.712,1.088,\'U+E2A1\',-0.528,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.212,0.956,\'U+EBE2\',-0.012,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.148,\'U+EB79\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.812,0.64,\'U+E990\',-0.404,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.144,2.64,\'U+EB1A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.12,1.62,\'U+E1B5\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.364,2.416,\'U+E4C4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E7C8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.116,0.836,\'U+EB8C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E16F\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.62,2.16,\'U+EB34\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.86,\'U+EBE5\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.448,1.644,\'U+E264\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.004,1.2,\'U+E24D\',-4.04,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,2.124,\'U+E911\',-1.064,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.58,2.16,\'U+E0F1\',-0.58,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.4,2.2,\'U+E230\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,1.6,\'U+E231\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.08,2.692,\'U+EBF4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.096,0.796,\'U+E891\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.044,1.008,\'U+E7C0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.044,1.008,\'U+E7BF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E363\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.648,1.76,\'U+E07A\',-1.82,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.292,3.06,\'U+E6E3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.724,2.392,\'U+E609\',-1.352,-1.196); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.756,0.792,\'U+E2E8\',-0.496,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.912,2.108,\'U+EB66\',0.54,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.916,1.916,\'U+E813\',0.092,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.076,0.672,\'U+EC0A\',-0.04,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,1.764,\'U+E63A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.848,3.124,\'U+E973\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.012,4.004,\'U+EB44\',-0.012,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.012,4.004,\'U+EB42\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E3E8\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,1.372,\'U+E035\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.288,0.824,\'U+EBF2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.368,0.896,\'U+EAD0\',0.0,-0.104); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.608,0.932,\'U+EC38\',-2.28,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.212,1.128,\'U+E958\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.408,3.244,\'U+E5DE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.86,1.864,\'U+E0E8\',-0.932,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.0,2.828,\'U+E860\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.288,0.952,\'U+EA7B\',0.96,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E3BB\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,0.128,\'U+EBAD\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.448,4.188,\'U+E6C2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E3E1\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.632,2.86,\'U+E4C9\',-1.632,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.532,1.832,\'U+E712\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,2.872,\'U+E53C\',-0.672,-0.052); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,3.472,\'U+E53D\',-0.672,-0.052); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.856,3.412,\'U+EAC6\',0.068,-0.456); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.352,1.532,\'U+E0AB\',-0.676,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.288,0.824,\'U+EBAF\',0.42,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.58,2.16,\'U+E0ED\',-0.58,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,1.376,\'U+E487\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.364,\'U+E0A3\',-0.58,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.124,2.296,\'U+E684\',0.0,-0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.328,\'U+E936\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.704,1.248,\'U+E06A\',-1.86,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.116,0.684,\'U+E2DE\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,0.868,\'U+E78D\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.408,0.4,\'U+E043\',1.272,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.144,\'U+E7F8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,1.0,\'U+E01E\',0.936,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.672,2.128,\'U+E81F\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,4.784,\'U+E6B2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.872,3.436,\'U+E5C8\',-0.888,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.988,4.052,\'U+E5C1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.564,3.864,\'U+E725\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.612,4.448,\'U+E757\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.596,0.976,\'U+E90B\',-3.18,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.916,2.28,\'U+EA85\',0.0,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.568,0.12,\'U+E59F\',-0.244,-0.056); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.256,2.256,\'U+E689\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E387\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E3E9\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.208,5.048,\'U+E726\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.976,3.936,\'U+E56E\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,2.6,\'U+E905\',-2.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.62,1.736,\'U+E4CC\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.536,2.772,\'U+E5C5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.016,2.02,\'U+E5A0\',0.004,-0.276); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,1.628,\'U+E7D7\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.46,2.896,\'U+E845\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,2.456,\'U+E536\',-0.672,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.128,2.0,\'U+E015\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.8,\'U+E631\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.62,\'U+E1BB\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.928,0.56,\'U+E7D2\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.82,1.576,\'U+E47E\',-1.404,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.004,0.652,\'U+E26B\',-1.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,0.868,\'U+E795\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.64,1.42,\'U+E127\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.572,1.46,\'U+E4BB\',-0.572,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.836,1.912,\'U+EA75\',-0.06,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.524,\'U+E0C2\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,3.132,\'U+E932\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.628,1.904,\'U+EBF1\',-2.836,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.112,1.328,\'U+E121\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.136,2.552,\'U+E8C3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,3.128,\'U+E6F0\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.876,\'U+E344\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.896,2.076,\'U+E57E\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.868,1.948,\'U+E2C5\',-0.732,-0.28); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.52,1.536,\'U+E0E4\',-0.76,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.58,\'U+EBD4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.792,0.996,\'U+E445\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.84,1.472,\'U+E29C\',-2.364,-0.204); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.216,1.216,\'U+E5F4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.376,0.376,\'U+E9D3\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.692,1.128,\'U+E815\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.548,1.168,\'U+E5E0\',-0.02,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.044,2.68,\'U+E059\',-2.628,0.028); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.104,1.412,\'U+E0BB\',-0.548,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.744,\'U+E7CA\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.756,1.94,\'U+E4EA\',-3.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,3.0,\'U+E539\',-0.672,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.78,1.724,\'U+EAE4\',-0.508,-0.124); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E3A8\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.364,\'U+E0FB\',-0.58,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E17A\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,0.632,\'U+E140\',-0.5,0.388); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E3B7\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.876,\'U+E3CE\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E7C7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.076,0.992,\'U+EC09\',-0.036,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',8.0,1.244,\'U+E877\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.644,1.356,\'U+E4B1\',-1.644,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.092,1.06,\'U+E242\',-3.028,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.14,0.888,\'U+E524\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.636,1.36,\'U+E446\',-1.352,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.58,4.424,\'U+E5BF\',-0.248,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.46,2.068,\'U+EAC8\',0.296,-0.38); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E3C0\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.744,\'U+E77A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.932,1.868,\'U+EA0B\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E381\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.8,0.056,\'U+E9BE\',-0.6,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.052,1.596,\'U+E1BD\',-0.528,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.148,\'U+EB7F\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.048,1.644,\'U+E06D\',-2.992,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.052,1.596,\'U+E1BC\',-0.524,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.036,3.644,\'U+E6F7\',-0.004,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,1.036,\'U+E1C2\',-0.5,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.36,2.64,\'U+E0B4\',-0.68,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.064,1.564,\'U+E670\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.896,2.164,\'U+EC56\',-0.448,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E167\',-0.556,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8A5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.744,\'U+E773\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.792,0.996,\'U+E425\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.16,1.38,\'U+E955\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.824,1.08,\'U+E2E5\',-1.3,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,3.128,\'U+EABB\',-1.068,-0.068); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E17D\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.9,1.9,\'U+E872\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.956,3.74,\'U+E762\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.828,4.14,\'U+EC43\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.98,2.9,\'U+E56C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,2.12,\'U+E101\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E3C3\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.216,1.216,\'U+E5F7\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.052,2.928,\'U+E53F\',0.372,0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.624,1.276,\'U+E22C\',-1.312,-0.636); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E1AA\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,0.868,\'U+E78C\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.4,2.192,\'U+EB28\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.02,2.616,\'U+EA38\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.292,2.412,\'U+EA39\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,1.072,\'U+EA3A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.404,2.436,\'U+EA3B\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.072,2.104,\'U+E00D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.168,1.376,\'U+E0B6\',-0.588,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E3D9\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.376,1.576,\'U+E429\',-1.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E3D4\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.24,1.416,\'U+E0AD\',-0.62,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.56,2.308,\'U+EAAB\',0.0,-0.2); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,0.192,\'U+E9F3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.556,1.592,\'U+E787\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.992,3.388,\'U+E09D\',-0.992,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.624,\'U+E304\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,4.44,\'U+E6DC\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.452,0.984,\'U+EC11\',-0.496,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.004,3.268,\'U+EB4B\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,3.448,\'U+EB15\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,4.784,\'U+E6A9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.144,\'U+E83D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.724,0.908,\'U+EC12\',-0.032,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.944,4.78,\'U+E5DF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.004,0.652,\'U+E093\',-1.004,0.068); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.536,0.536,\'U+EA6C\',0.24,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.004,0.648,\'U+E13D\',-0.5,0.372); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.792,2.808,\'U+E4D6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.484,1.92,\'U+EAA7\',0.692,-0.228); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.044,1.172,\'U+E1C8\',-0.524,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.048,1.656,\'U+E811\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.444,1.364,\'U+EABD\',0.0,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.232,0.652,\'U+EABF\',0.0,-0.076); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E313\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.328,2.444,\'U+EAEB\',-1.232,-0.096); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.916,2.46,\'U+EA8D\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E3A5\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.876,\'U+E326\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,3.38,\'U+E761\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E1A5\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8B1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.572,1.78,\'U+E550\',-0.572,-0.16); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.216,1.376,\'U+E134\',-0.592,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,1.192,\'U+E863\',2.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.256,0.264,\'U+E9D9\',0.2,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.18,0.396,\'U+E4A7\',-1.18,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,0.12,\'U+E210\',0.0,-0.06); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E19F\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.024,2.796,\'U+E05C\',-2.012,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.036,1.0,\'U+EA5A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.22,0.752,\'U+EA59\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.22,0.752,\'U+EA58\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E176\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.892,1.888,\'U+E5FE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.448,1.144,\'U+E440\',-0.696,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.44,\'U+E158\',-0.58,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.676,0.996,\'U+E454\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.912,1.196,\'U+EB86\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,1.5,\'U+E4F1\',-1.08,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.896,1.856,\'U+EA70\',-0.06,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.2,\'U+E756\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.216,1.216,\'U+E5E7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',8.58,2.268,\'U+E1E5\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.6,0.976,\'U+E908\',-2.4,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.836,1.968,\'U+EA74\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.296,0.296,\'U+E654\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.02,1.2,\'U+E47A\',-0.508,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,3.784,\'U+EB17\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.764,0.872,\'U+EA91\',-0.848,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.82,0.548,\'U+E2EF\',-0.492,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.628,2.924,\'U+E05E\',-2.0,-0.128); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.416,\'U+E0CA\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.996,4.14,\'U+E055\',-2.6,0.032); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.116,4.008,\'U+EB4A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.0,1.0,\'U+E683\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.672,1.656,\'U+E434\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E19A\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.984,4.088,\'U+E744\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.312,\'U+E0BE\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,1.28,\'U+E79F\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.016,0.912,\'U+E634\',0.028,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.196,5.1,\'U+E6D9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.024,2.796,\'U+E075\',-2.012,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.124,1.136,\'U+EC3A\',-2.744,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.104,1.412,\'U+E0C4\',-0.548,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.448,3.124,\'U+E97F\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.876,\'U+E94C\',-3.128,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E77C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.156,1.176,\'U+E4F3\',-0.1,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.088,1.088,\'U+E633\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.036,1.012,\'U+EA67\',-0.02,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.16,1.128,\'U+E959\',-2.596,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.896,1.88,\'U+EA76\',-0.06,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.912,2.108,\'U+EB62\',0.54,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.82,0.988,\'U+E2C9\',-0.496,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.892,1.888,\'U+E5FD\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.54,1.544,\'U+EB77\',0.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.372,2.5,\'U+E933\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E3C8\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,4.92,\'U+E6DD\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E319\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.5,1.568,\'U+E578\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.008,1.7,\'U+E868\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.84,2.068,\'U+E7E4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.856,0.852,\'U+E42D\',-1.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.364,1.92,\'U+E0B0\',-0.676,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.58,4.052,\'U+E5C2\',-0.248,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.528,2.136,\'U+E623\',-1.28,-1.068); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.796,0.988,\'U+E2C4\',-1.288,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.464,0.828,\'U+EAA1\',0.724,-0.172); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E177\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.996,1.072,\'U+EA5C\',0.0,-0.144); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,2.136,\'U+EB1D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.992,1.188,\'U+E6F9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.636,0.872,\'U+E584\',0.256,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.016,2.016,\'U+E7F4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.688,4.192,\'U+E92C\',-1.344,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.048,0.512,\'U+E818\',0.176,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.148,1.276,\'U+E523\',0.0,-0.052); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.192,\'U+E925\',-1.484,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.448,3.124,\'U+E98F\',-2.76,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.62,2.16,\'U+EB35\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.98,1.84,\'U+E59E\',0.0,-0.216); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.256,1.52,\'U+E7B1\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.568,\'U+E5E3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.704,0.672,\'U+E261\',-1.34,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.224,3.836,\'U+E048\',-0.632,-0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.464,1.704,\'U+EA95\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.656,3.296,\'U+E52B\',-0.54,-0.356); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.008,0.988,\'U+E0AA\',-0.504,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.672,0.904,\'U+E42E\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.096,1.548,\'U+EC50\',-0.548,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.316,\'U+E0BD\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8A0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.532,1.536,\'U+EB6D\',0.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,3.444,\'U+E52E\',-0.672,-0.356); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8A3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,0.576,\'U+E031\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.636,1.044,\'U+E246\',-2.952,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.92,0.616,\'U+E99B\',-0.46,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.824,1.896,\'U+E797\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.524,\'U+E0C0\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.928,2.676,\'U+E514\',-0.02,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.668,2.712,\'U+EAC7\',0.096,-0.412); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.816,2.232,\'U+EA0A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.976,\'U+E914\',-1.064,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,2.124,\'U+E913\',-1.52,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.98,\'U+E916\',-1.0,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.976,\'U+E915\',-1.064,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,2.124,\'U+E910\',-1.064,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,2.124,\'U+E912\',-1.52,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.876,\'U+E329\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,1.976,\'U+E918\',-1.52,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,1.976,\'U+E917\',-1.52,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.98,1.464,\'U+E04C\',0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.1,2.016,\'U+E830\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,0.5,\'U+E034\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E191\',-0.58,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.552,4.596,\'U+E5D9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.092,3.128,\'U+E974\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.508,1.892,\'U+EC1E\',-0.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.08,1.192,\'U+EC01\',-0.044,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.988,0.736,\'U+E094\',-1.988,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.228,2.316,\'U+E9BC\',-2.812,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.536,2.804,\'U+E062\',-2.488,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.46,0.364,\'U+E9A1\',-0.228,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.54,1.544,\'U+E940\',-0.772,-0.776); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.476,0.724,\'U+EAB2\',0.0,-0.056); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E37A\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.5,\'U+E390\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.912,1.028,\'U+EC14\',-0.472,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E173\',-0.588,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.688,4.192,\'U+E92D\',-1.344,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.368,2.64,\'U+E128\',-0.68,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.376,\'U+E13E\',-0.456,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.136,1.312,\'U+E0E3\',-0.568,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,1.464,\'U+E041\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E3CB\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.26,0.988,\'U+E2D3\',-0.496,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E39B\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.98,0.364,\'U+E8F7\',1.02,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E35F\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,2.12,\'U+E111\',-1.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.148,1.832,\'U+E65E\',-0.084,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.744,\'U+E772\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.728,1.996,\'U+EA21\',0.016,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.836,2.112,\'U+EB72\',0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,1.752,\'U+E665\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.808,4.888,\'U+E5C7\',-0.248,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.4,1.0,\'U+E22E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.016,1.808,\'U+E5A3\',0.0,-0.204); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.116,2.128,\'U+E500\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.38,1.044,\'U+E248\',-2.928,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.416,2.212,\'U+E1D7\',-0.552,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.564,1.06,\'U+E24E\',-2.888,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.792,1.924,\'U+E268\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.796,2.904,\'U+E4C2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,0.064,\'U+E8F4\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.652,0.796,\'U+E48D\',-2.148,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E361\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.532,1.532,\'U+E0E5\',-0.764,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.14,1.116,\'U+E525\',-0.02,-0.116); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,2.12,\'U+E214\',0.0,-1.06); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,4.784,\'U+E6B0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8B3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.164,0.24,\'U+EA05\',-0.404,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.136,2.508,\'U+E801\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.136,2.136,\'U+E802\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.136,2.136,\'U+E803\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.876,\'U+E345\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.328,1.788,\'U+EAE9\',-1.232,-0.12); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E3B4\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,2.848,\'U+E751\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.444,1.224,\'U+EAA4\',0.732,-0.144); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.032,1.096,\'U+E7AB\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.68,0.988,\'U+E2EB\',-0.66,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.752,\'U+E397\',-0.688,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.828,1.896,\'U+E78F\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.92,0.676,\'U+E9C4\',-0.148,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.096,3.444,\'U+E857\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.104,1.26,\'U+E0C5\',-0.556,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.18,0.388,\'U+EA6A\',-0.084,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.248,\'U+E3C5\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.324,1.328,\'U+E1DA\',-3.76,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E351\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E325\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E1A7\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,4.784,\'U+E6A1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.304,1.368,\'U+E1F3\',-0.496,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.056,\'U+E9B4\',-0.6,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.216,1.216,\'U+E5E6\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.792,0.564,\'U+E9B1\',-0.012,-0.508); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.748,\'U+E77F\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E155\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.544,1.956,\'U+E5D5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.376,\'U+E13C\',-0.704,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.944,4.78,\'U+E5D3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E3E6\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.152,0.7,\'U+E096\',-0.6,0.036); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E192\',-0.576,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,3.0,\'U+E8F1\',-1.532,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.964,0.984,\'U+E61C\',0.004,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,0.904,\'U+E260\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.008,0.144,\'U+E039\',3.472,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.5,0.912,\'U+EBA5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.688,0.796,\'U+E604\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E1A2\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,2.916,\'U+E6E2\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.956,1.788,\'U+E5F1\',0.0,-0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.656,2.024,\'U+E07B\',-1.328,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.156,1.184,\'U+E7D9\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.628,2.316,\'U+E9BB\',-2.212,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.948,1.184,\'U+E276\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.724,1.5,\'U+E641\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.68,1.212,\'U+E293\',-1.932,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.86,1.692,\'U+E5D1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.656,7.464,\'U+E528\',-0.536,-0.356); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.38,1.36,\'U+E4B5\',-1.38,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.62,\'U+E1BA\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.568,2.912,\'U+E56D\',-0.292,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E153\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.12,1.616,\'U+E1B2\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E17B\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.584,1.684,\'U+E461\',-1.272,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.492,4.08,\'U+E6C3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,2.428,\'U+E042\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E323\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,1.676,\'U+E08A\',-0.996,0.02); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.536,1.292,\'U+E2F1\',-0.728,-0.388); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.092,1.836,\'U+E0A2\',-0.544,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.264,2.808,\'U+E68F\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.128,3.0,\'U+E016\',1.936,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,1.872,\'U+EB1C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.844,3.128,\'U+E722\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.976,1.356,\'U+E4A1\',-0.976,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,1.28,\'U+E79B\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.384,0.792,\'U+E2E7\',-0.504,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.876,\'U+E3EA\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.308,1.08,\'U+E2DC\',-1.392,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.124,\'U+E0F7\',-0.564,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.112,1.616,\'U+E743\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.544,1.276,\'U+E5D0\',-0.012,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.552,4.596,\'U+E5D6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E380\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.156,0.316,\'U+EA68\',-0.08,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.288,1.488,\'U+E0B7\',-0.644,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.748,\'U+E346\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,4.784,\'U+E6A0\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.096,1.596,\'U+E890\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.912,1.196,\'U+EB7A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.976,0.992,\'U+E613\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.4,0.056,\'U+E9BF\',-0.6,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.64,4.572,\'U+E587\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.888,\'U+E92A\',-1.488,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.416,4.248,\'U+E585\',0.008,0.112); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.976,2.068,\'U+E7E3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E35E\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.136,2.552,\'U+E8C1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.62,2.064,\'U+E4F5\',-0.052,-0.468); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.776,2.416,\'U+E4EC\',-4.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.24,6.284,\'U+E6AC\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.04,2.684,\'U+E073\',-2.632,-0.02); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.1,3.132,\'U+E976\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.112,0.944,\'U+EB33\',0.032,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.984,0.512,\'U+E81C\',0.176,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8A2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.644,2.452,\'U+EA03\',-0.656,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.416,1.34,\'U+EC13\',-0.032,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.452,3.944,\'U+EC40\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.0,\'U+E019\',0.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.328,2.876,\'U+EAEC\',-1.232,-0.128); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.532,3.992,\'U+E6F3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.896,1.764,\'U+EC55\',-0.448,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.62,2.064,\'U+E4F4\',-0.54,-0.468); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8A4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.6,0.6,\'U+E2B0\',-0.3,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.648,0.212,\'U+E7E8\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.364,\'U+E1B0\',-0.58,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,3.144,\'U+E6E1\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.884,2.344,\'U+E588\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.792,0.996,\'U+E481\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,3.6,\'U+EB20\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.532,1.536,\'U+EB69\',0.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.492,4.984,\'U+E538\',-0.672,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.7,0.96,\'U+EA8C\',-0.028,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.0,0.056,\'U+E9B7\',-0.6,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.06,0.74,\'U+E27A\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,2.776,\'U+E6F4\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.888,\'U+E92B\',-1.488,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E151\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.996,3.528,\'U+EB12\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.524,\'U+E0BF\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.184,0.688,\'U+E625\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,0.144,\'U+E030\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.828,0.86,\'U+E56B\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.12,1.12,\'U+E113\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.24,2.352,\'U+E0AC\',-0.62,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8A8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.572,1.488,\'U+E5FB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.74,0.496,\'U+E99F\',-0.368,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E365\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.404,1.3,\'U+E593\',-0.02,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.784,1.552,\'U+E616\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.5,0.5,\'U+E1FC\',-0.132,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.724,2.112,\'U+E4D5\',0.008,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.108,3.512,\'U+E75A\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E3AA\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E3EC\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.328,1.532,\'U+E22D\',-1.164,-0.764); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.164,2.828,\'U+E7FC\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.164,2.828,\'U+E7FB\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.476,0.96,\'U+E2D1\',-1.328,-0.284); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.624,1.624,\'U+E7F9\',-0.248,-0.244); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.1,0.94,\'U+E202\',4.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.548,1.404,\'U+E0EE\',-0.548,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.852,1.324,\'U+E5A7\',-0.88,-0.216); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E3E0\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.624,3.128,\'U+E980\',-1.096,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.86,3.504,\'U+E511\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.956,2.844,\'U+E620\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.468,0.952,\'U+EAA2\',0.72,-0.168); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.328,3.404,\'U+EAED\',-1.232,-0.12); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.06,4.36,\'U+EC60\',-0.036,-0.02); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.912,1.064,\'U+E99A\',-0.456,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E330\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.792,4.192,\'U+E5B8\',-1.468,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E778\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.128,\'U+E806\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.78,0.64,\'U+E998\',-0.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.104,0.372,\'U+E7DE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.892,1.888,\'U+E601\',-0.008,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.0,0.056,\'U+E9C0\',-0.6,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.004,1.372,\'U+E595\',-0.004,-0.12); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.62,1.568,\'U+E7EB\',-0.32,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.04,1.376,\'U+E147\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.476,3.504,\'U+E5B3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.016,0.912,\'U+E635\',-0.016,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E1A9\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.176,1.54,\'U+E1B9\',-0.588,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.752,\'U+E3AD\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.028,2.032,\'U+E0E6\',-1.012,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E312\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.4,0.4,\'U+E044\',0.3,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8B9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,0.904,\'U+E484\',-1.752,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.664,0.24,\'U+EA07\',-1.26,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.956,1.788,\'U+E668\',0.0,-0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.708,0.988,\'U+E2DD\',-0.5,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8BB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.524,3.796,\'U+E5BB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.096,0.796,\'U+E892\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E17E\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.164,0.24,\'U+EA08\',-1.76,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.24,5.008,\'U+E6AA\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.5,2.672,\'U+EBEF\',-2.252,-0.02); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.88,2.652,\'U+E051\',-3.504,0.02); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.832,2.652,\'U+E054\',-2.572,0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.664,2.676,\'U+E05A\',-2.628,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E342\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8B5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.012,2.876,\'U+E897\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,0.92,\'U+E779\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.364,1.356,\'U+E901\',-0.676,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.136,2.552,\'U+E8C5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.988,1.004,\'U+E716\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.6,0.976,\'U+E90A\',-3.2,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.136,1.876,\'U+E521\',-0.044,-0.152); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.536,2.064,\'U+E2F0\',-0.728,-0.396); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.46,4.08,\'U+E6C6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.712,1.668,\'U+E65D\',0.116,0.024); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.712,1.82,\'U+E7A5\',-0.004,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.764,0.744,\'U+EA90\',-0.848,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.956,2.304,\'U+E66A\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.04,1.224,\'U+E1C1\',-0.52,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.104,2.144,\'U+E11B\',-1.048,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E3BC\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.508,2.644,\'U+E12E\',-0.68,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.44,\'U+E15F\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,1.088,\'U+EBD1\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.1,2.24,\'U+EC1A\',-0.036,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E175\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.112,0.836,\'U+EB74\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,1.528,\'U+E069\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E171\',-0.588,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.908,1.252,\'U+E61F\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.02,1.02,\'U+E08D\',-0.532,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.684,0.988,\'U+E2D8\',-2.172,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.804,5.628,\'U+E5B9\',-0.788,0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.228,5.08,\'U+E516\',-0.02,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E30F\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.912,3.308,\'U+EC64\',0.54,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.24,0.988,\'U+E2CE\',-1.732,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E189\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.848,1.452,\'U+E694\',0.0,-0.728); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.86,1.828,\'U+E567\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.116,4.008,\'U+EB49\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.72,1.204,\'U+E224\',-1.84,-0.604); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E1A8\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.132,1.524,\'U+E0C8\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.78,1.204,\'U+E24F\',-4.808,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.748,1.2,\'U+E220\',-0.372,-0.6); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.18,1.876,\'U+E004\',-1.18,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.288,1.572,\'U+E2A5\',-2.756,-0.484); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E3D8\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.928,1.244,\'U+E22A\',-0.464,-0.62); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.812,1.6,\'U+E599\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.476,0.724,\'U+EAB0\',0.0,-0.056); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E199\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.924,0.68,\'U+E594\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.132,0.744,\'U+E4D3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.196,0.912,\'U+EB84\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.424,0.128,\'U+E9D0\',0.112,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.252,\'U+E31D\',-0.688,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,4.784,\'U+E6A5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.016,2.316,\'U+E9BA\',-1.6,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.032,1.436,\'U+E07E\',-0.012,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.624,3.132,\'U+E982\',-1.096,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.004,1.776,\'U+EB16\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.424,0.296,\'U+E9D6\',0.388,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.148,1.272,\'U+E0CC\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.096,1.664,\'U+E432\',-1.188,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.164,1.104,\'U+E243\',-0.076,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.88,\'U+E941\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E3A0\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.956,2.844,\'U+E621\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E3AC\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.044,1.008,\'U+E7C3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.276,1.008,\'U+E554\',-0.136,0.16); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.688,0.792,\'U+E605\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.988,2.0,\'U+E104\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.0,1.0,\'U+E681\',1.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E157\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,0.868,\'U+E789\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.556,3.128,\'U+E724\',-0.004,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.024,2.644,\'U+EB24\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.692,1.632,\'U+E5EA\',-0.256,-0.2); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.216,1.7,\'U+EA8A\',-0.06,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.108,3.128,\'U+E985\',-1.58,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,3.2,\'U+E686\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.956,1.788,\'U+E5F0\',0.0,-0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.148,3.492,\'U+E753\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E3E3\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.976,0.992,\'U+E4D0\',0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.096,0.852,\'U+E42C\',-1.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.032,0.956,\'U+E2C7\',-1.328,-0.28); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.156,2.16,\'U+E91E\',-1.076,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.072,3.12,\'U+E109\',-1.036,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E308\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.012,0.64,\'U+E996\',-1.604,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.076,1.688,\'U+EC21\',-0.044,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.124,\'U+E3F1\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.5,1.58,\'U+E216\',0.0,-0.792); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.18,1.876,\'U+E005\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.752,1.092,\'U+E247\',-1.752,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.908,1.252,\'U+E57B\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.664,0.24,\'U+EA06\',-0.404,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,1.632,\'U+E7D5\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.3,1.792,\'U+E090\',-0.14,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.844,\'U+E720\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.328,2.408,\'U+E4C1\',-1.328,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.128,1.0,\'U+E021\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,2.0,\'U+E3DD\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.0,1.856,\'U+E06F\',-1.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.78,2.376,\'U+EAE6\',-0.508,-0.12); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.876,1.972,\'U+E7BE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.944,1.664,\'U+E433\',-1.188,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.392,1.448,\'U+E922\',-0.196,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,0.98,\'U+E727\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.112,0.836,\'U+EB70\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.0,\'U+E34F\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.368,1.192,\'U+EAD2\',0.0,-0.1); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.532,1.536,\'U+EB6F\',0.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,1.128,\'U+E7E2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.0,0.588,\'U+E9F0\',-2.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,4.128,\'U+EABC\',-1.064,-0.068); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.096,2.776,\'U+E855\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.42,0.852,\'U+EC04\',-0.048,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,0.912,\'U+EBAB\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.5,\'U+E32E\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E35D\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.98,1.464,\'U+E04D\',0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.116,3.048,\'U+E501\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.876,\'U+E335\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.896,1.884,\'U+EA79\',-0.06,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.544,1.956,\'U+E5D8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.98,1.324,\'U+E427\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.828,1.528,\'U+E4B8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.532,1.536,\'U+EB67\',0.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.508,1.316,\'U+E81B\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.62,3.132,\'U+E97A\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.496,0.496,\'U+E8CA\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.56,1.328,\'U+E0F4\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.98,1.348,\'U+E59D\',0.0,-0.208); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.864,5.792,\'U+E518\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.128,\'U+E93E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.624,\'U+E393\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.136,1.132,\'U+E0B1\',-0.568,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.128,\'U+E3B6\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.592,4.004,\'U+E6FC\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,2.0,\'U+E663\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.704,\'U+E662\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.704,\'U+E661\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.028,0.408,\'U+E9E2\',-1.016,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.812,1.064,\'U+E24C\',-2.88,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.532,1.536,\'U+EB6B\',0.264,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.132,\'U+E98E\',-2.6,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.052,2.928,\'U+E53E\',0.372,0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.956,2.844,\'U+E66D\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,2.132,\'U+E6F8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.092,3.128,\'U+E984\',-1.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E156\',-0.584,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',5.4,3.284,\'U+EB48\',-1.404,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.04,1.376,\'U+E145\',-0.54,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.44,6.252,\'U+E008\',-0.24,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E30B\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.008,0.788,\'U+E841\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,0.352,\'U+E4A8\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.94,3.168,\'U+EA81\',-1.024,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.244,3.528,\'U+EB11\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.328,\'U+E956\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.04,1.376,\'U+E143\',-0.52,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.964,1.396,\'U+EADE\',-0.164,-0.104); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.624,\'U+E395\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.44,\'U+E15B\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,0.904,\'U+E443\',-0.7,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.348,\'U+E0E0\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.128,\'U+E399\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.78,1.272,\'U+EAE2\',-0.508,-0.108); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.272,1.364,\'U+E1D3\',-0.58,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',8.084,2.272,\'U+E1E3\',-0.552,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.428,\'U+E1A0\',-0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.524,9.276,\'U+E009\',-0.28,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.44,\'U+E15E\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.72,2.228,\'U+EC3B\',-0.36,-0.128); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,1.372,\'U+E947\',0.0,-0.496); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E195\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.26,0.64,\'U+E2B2\',-0.74,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,2.0,\'U+E32B\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.912,1.064,\'U+E999\',-0.456,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.644,4.892,\'U+E758\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.048,2.972,\'U+E864\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E180\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.204,5.604,\'U+E519\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.304,3.396,\'U+E748\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.992,1.076,\'U+E4E5\',-1.5,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.008,2.44,\'U+E898\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.192,2.192,\'U+EB37\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.364,2.228,\'U+E607\',-1.172,-1.116); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.576,1.348,\'U+EC30\',-2.108,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.232,1.3,\'U+E95D\',-3.548,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.928,5.268,\'U+E515\',-0.02,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.444,\'U+E182\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,0.876,\'U+E94A\',-3.128,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.096,2.104,\'U+E852\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.444,4.08,\'U+E6C8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.496,1.2,\'U+E00A\',0.508,-0.604); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,1.128,\'U+E3C1\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.496,4.08,\'U+E6C4\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.904,2.232,\'U+E873\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.568,5.22,\'U+E5BC\',-0.248,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.136,1.324,\'U+E0E1\',-0.572,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.548,4.2,\'U+EC46\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.256,1.52,\'U+E7B0\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.012,0.64,\'U+E997\',-1.604,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.5,1.368,\'U+E1F8\',3.308,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.876,\'U+E3D7\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.428,4.576,\'U+E832\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.404,2.268,\'U+E1D9\',-0.552,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.12,3.128,\'U+E97C\',-0.568,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.604,2.02,\'U+E564\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.732,1.692,\'U+E4E9\',-3.012,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E3A7\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,2.12,\'U+E106\',-1.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.56,1.328,\'U+E0F0\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.22,1.22,\'U+E5F8\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.12,0.5,\'U+E391\',-0.684,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.216,1.216,\'U+E5F6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,0.752,\'U+E48B\',-2.136,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E3EE\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.988,0.644,\'U+E9C2\',-0.148,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,0.192,\'U+E4AB\',-1.16,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,2.468,\'U+E0A6\',-0.596,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,0.912,\'U+EBAA\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.268,1.376,\'U+E132\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.996,1.524,\'U+E4E0\',-0.996,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.064,2.0,\'U+E8F0\',-1.532,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.456,2.384,\'U+E266\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.776,3.56,\'U+E719\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.664,0.24,\'U+EA09\',-2.26,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.052,1.276,\'U+EA2A\',-0.524,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.648,2.044,\'U+E80C\',-0.324,-1.032); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.644,1.744,\'U+E7BA\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.352,1.576,\'U+E619\',-0.18,-0.788); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.056,\'U+E250\',-2.08,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.912,3.308,\'U+EC63\',0.54,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.368,0.62,\'U+EACD\',0.0,-0.064); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.832,0.648,\'U+E992\',-0.456,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,3.928,\'U+EB21\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,2.024,\'U+E871\',-0.06,-0.076); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.656,0.784,\'U+E48C\',-0.496,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.36,2.208,\'U+EAC2\',-2.312,-0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.544,0.36,\'U+E993\',-0.272,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.748,0.5,\'U+E3F2\',-0.248,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',6.064,1.056,\'U+E24A\',-2.888,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.708,4.004,\'U+EB3F\',0.304,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.104,2.104,\'U+E00C\',1.896,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E39F\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.184,1.0,\'U+E680\',1.44,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.804,3.156,\'U+EBF0\',-1.404,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.048,0.924,\'U+E817\',0.176,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.004,1.064,\'U+E923\',-0.5,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.584,1.58,\'U+E091\',-0.792,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.372,1.548,\'U+E8D5\',-1.184,-0.772); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.052,1.28,\'U+E799\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.976,1.356,\'U+E4A0\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.976,1.472,\'U+E875\',0.0,0.012); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.572,1.46,\'U+E1FD\',-1.24,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.2,0.056,\'U+E9BD\',-0.6,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.748,\'U+E396\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.7,0.988,\'U+E4F2\',-1.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.972,2.72,\'U+E714\',-0.004,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,1.5,\'U+E3D0\',-1.44,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,2.0,\'U+E08C\',-1.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.204,1.76,\'U+EA94\',-1.084,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.564,4.892,\'U+E5C6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.136,2.552,\'U+E8C2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.52,\'U+E598\',-0.064,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.384,0.792,\'U+E2E6\',-0.504,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.02,2.02,\'U+E899\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.94,2.252,\'U+EAAE\',-0.26,-0.188); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.112,1.616,\'U+E741\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.46,1.656,\'U+E285\',-0.776,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.012,4.004,\'U+EB41\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.756,0.792,\'U+E2E9\',-0.496,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.16,3.128,\'U+E98D\',-2.632,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.48,1.256,\'U+EC0D\',-0.048,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,1.544,\'U+E12B\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.924,1.0,\'U+E644\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.544,1.368,\'U+E1F4\',-0.496,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.984,4.252,\'U+EB4E\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.768,1.216,\'U+E7E6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.764,0.68,\'U+E2B7\',-0.376,0.04); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.912,1.044,\'U+E241\',-0.08,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.16,2.768,\'U+E023\',-0.08,-0.32); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.368,1.2,\'U+E251\',-0.084,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.124,\'U+E3A9\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.144,3.928,\'U+EB22\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,2.0,\'U+E011\',1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.968,1.104,\'U+EBCD\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.0,4.212,\'U+E6AF\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.008,2.828,\'U+E861\',-0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.376,2.716,\'U+EBD0\',-0.136,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.144,1.144,\'U+E7F6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.624,1.144,\'U+E7F7\',-0.244,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.748,\'U+E3DA\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.128,3.728,\'U+E6F1\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8A9\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.5,1.568,\'U+E577\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.176,1.376,\'U+E12A\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,0.624,\'U+E300\',-1.44,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.436,0.964,\'U+EC10\',-0.032,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.0,2.0,\'U+E767\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.448,1.46,\'U+E296\',-0.7,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.864,2.66,\'U+E052\',-3.46,0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.94,2.68,\'U+E053\',-2.604,0.016); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.78,1.48,\'U+EAE3\',-0.508,-0.108); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E34A\',-1.44,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.228,3.288,\'U+E049\',-0.616,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.54,2.824,\'U+E5FA\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.692,2.692,\'U+EB3C\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.96,1.356,\'U+E4B2\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.248,\'U+E3AB\',-0.688,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.416,1.064,\'U+E921\',-0.208,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E950\',-2.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.436,1.748,\'U+E452\',-1.392,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.416,2.796,\'U+E6F6\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.128,3.128,\'U+E8A6\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.128,\'U+E814\',0.564,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.536,2.804,\'U+E077\',-1.056,-0.084); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.136,2.136,\'U+E804\',0.004,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',7.5,1.5,\'U+EBA3\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.5,1.368,\'U+E1F7\',2.548,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.448,4.08,\'U+E6C7\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.44,\'U+E15C\',-0.576,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.144,1.632,\'U+E7D6\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.316,1.992,\'U+E576\',0.024,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.688,4.192,\'U+E92E\',-1.344,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.128,1.432,\'U+E1AC\',-0.56,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.008,1.368,\'U+E1FB\',1.8,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.376,\'U+E3A6\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.764,1.196,\'U+EC34\',-1.384,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',3.464,4.08,\'U+E6C5\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',4.256,1.604,\'U+E04A\',-0.132,0.008); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.552,1.992,\'U+EA7C\',-0.276,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.136,2.136,\'U+E800\',0.0,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.136,2.136,\'U+E7FE\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.16,1.944,\'U+E179\',-0.588,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.012,2.872,\'U+E894\',0.0,-0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.124,1.624,\'U+E386\',-1.436,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.072,3.64,\'U+E765\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',2.876,1.972,\'U+E7C2\',0.0,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.912,0.476,\'U+EA65\',-0.44,0.004); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',0.188,0.376,\'U+E9D4\',0.292,0.0); INSERT INTO GLYPH_BOX (name,height,width,unicode,y,x) VALUES (\'Bravura\',1.136,1.136,\'U+E0B2\',-0.568,0.004); ';